// <osiris_sps_source_header>
// This file is part of Osiris Serverless Portal System.
// Copyright (C)2005-2012 Osiris Team (info@osiris-sps.org) / http://www.osiris-sps.org )
//
// Osiris Serverless Portal System is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Osiris Serverless Portal System is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Osiris Serverless Portal System.  If not, see <http://www.gnu.org/licenses/>.
// </osiris_sps_source_header>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;
using Tamir.SharpSsh;

namespace OMS
{
    public class Engine
    {
        static public frmForm Form;

        static public Scp Scp;

        static private List<string> m_BlacklistBase;

        public enum LogType
        {            
            ltStatusBar = 0,
            ltVerbose = 1,
            ltInfo = 2,
            ltWarning = 3,
            ltError = 4,
            ltCritical = 5
        }

        static public string PathProject
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(Environment.CurrentDirectory + "/../../../../../osiris-sps");                
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathShare
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathProject + "/client/share");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathSources
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathProject + "/client/src");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathHtdocs
        {
            get
            {
                //DirectoryInfo di = new DirectoryInfo(PathData + "/extensions/138B613D055759C619D5F4EFD9FDB978387E97CB/htdocs");
                DirectoryInfo di = new DirectoryInfo(PathData + "/extensions/148B613D055759C619D5F4EFD9FDB978387E97CB/htdocs");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathData
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathProject + "/client/data");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathUtils
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathProject + "/utils");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathOms
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(Environment.CurrentDirectory + "/../../../");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathOmsData
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathOms + "/data");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathTemporary
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathOms + "/temp");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string PathOutput
        {
            get
            {
                DirectoryInfo di = new DirectoryInfo(PathOms + "/repository");
                return Helper.FileSystem.NormalizePath(di.FullName);
            }
        }

        static public string GeneratedBy
        {
            get
            {
                return "Automatically generated by Osiris Management System (OMS), builded " + System.IO.File.GetLastWriteTime(System.Reflection.Assembly.GetExecutingAssembly().Location).ToShortDateString();                
            }
        }

        static public List<string> BlacklistBase
        {
            get
            {
                if(m_BlacklistBase == null)
                {
                    m_BlacklistBase = new List<string>();

                    m_BlacklistBase.Add("^temp.nsi$");

                    m_BlacklistBase.Add("^.svn$");
                    m_BlacklistBase.Add("^certificates$");
                    //m_BlacklistBase.Add("^_.*$");
                    m_BlacklistBase.Add("^xx_.*$");
                    m_BlacklistBase.Add("^_work.*$");
                    m_BlacklistBase.Add("^thumbs.db$");
                    m_BlacklistBase.Add(".*\\.ilk$");
                    m_BlacklistBase.Add(".*\\.bak$");
                    m_BlacklistBase.Add(".*\\.temp$");
                    m_BlacklistBase.Add(".*\\.tmp$");
                    m_BlacklistBase.Add(".*\\.pyc$");
                    m_BlacklistBase.Add(".*\\.bsc$");
                    m_BlacklistBase.Add(".*\\.exp$");
                    m_BlacklistBase.Add(".*\\.lib$");
                    m_BlacklistBase.Add(".*\\.xsx$");
                                        
                    // Applications
                    m_BlacklistBase.Add("^sampleapp");
                    m_BlacklistBase.Add("^sampleapp\\..*$");
                    
                    // Applications - TestApp
                    m_BlacklistBase.Add("^testapp$");
                    m_BlacklistBase.Add("^testapp\\.exe$");
                    m_BlacklistBase.Add("^testapp\\.bat$");
                    m_BlacklistBase.Add("^testapp\\.sh$");
                    m_BlacklistBase.Add("^(lib)?boost_unit_test_.*$");

                    // Python library, test only
                    m_BlacklistBase.Add("share/plugins/AF9A4C281070FDB0F34CF417CDB168AB38C8A388/lib/test");

                    // Python 2.7.2 (Temp, only VC10)
                    //m_BlacklistBase.Add("^lib2.7.2$");
                    
                    // ?
                    m_BlacklistBase.Add("^(lib)?firefox\\.(dll|so|dylib)$");

                    // Extensions
                    m_BlacklistBase.Add("share/extensions/3E0BF2254A406BB0EA7CC4DECD669693581209CD$"); // Python Test            

                    // Plugins
                    //m_BlacklistBase.Add("share/plugins/DCCDAE3A28324F6BB5F5578A18A63BD0DAE3587A$"); // dht
                    //m_BlacklistBase.Add("^(lib)?dht\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/AF9A4C281070FDB0F34CF417CDB168AB38C8A388/lib/test"); // Python testsuite

                    m_BlacklistBase.Add("share/plugins/4DB3A7FF3F31FE30C82838415F982A34C9EFB9D3$"); // mono
                    m_BlacklistBase.Add("^(lib)?mono\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/88736612A05E17AEF6A23F905660234E8C6E199F$"); // kademlia
                    m_BlacklistBase.Add("(lib)?kademlia\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/084563A2D4B414CAE520F81430287EB9FBB2A73D$"); // mysql
                    m_BlacklistBase.Add("(lib)?mysql\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/3DF135C9B80B2889C8061F54C758844D253E17DA$"); // opendht
                    m_BlacklistBase.Add("(lib)?opendht\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/0E50136276A0E87CD5ADBB85D75AD3D0E0811D0D$"); // pluginsample
                    m_BlacklistBase.Add("(lib)?PluginSample\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/676C8C3CD59A1233507465F82FFCF6AEFCF713AE$"); // stress
                    m_BlacklistBase.Add("(lib)?stress\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/E99862396FD9E355A6ECC5A94900924A0A973888$"); // wrappers
                    m_BlacklistBase.Add("(lib)?wrappers\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/887366345987AF8BC7BB90028DCA865B211B42AF$"); // tamarin
                    m_BlacklistBase.Add("(lib)?tamarin\\.(dll|so|dylib)$");

                    m_BlacklistBase.Add("share/plugins/0FBA11B86B454316908327DED08F8D1638D13214$"); // translations
                    m_BlacklistBase.Add("(lib)?translations\\.(dll|so|dylib)$");

                    // Non dovrebbero servire più
                    m_BlacklistBase.Add("^dht\\.log$");
                    m_BlacklistBase.Add("^libtorrent_logs$");
                    m_BlacklistBase.Add("^libtorrent_logs0$");
                    m_BlacklistBase.Add("^libtorrent_logs6881$");
                    m_BlacklistBase.Add("^console\\.lib$");
                    m_BlacklistBase.Add("^console\\.exp$");
                }
                return m_BlacklistBase;
            }
        }


        static public void AddLog(string Msg)
        {
            Form.AddLog(LogType.ltInfo, Msg);
        }

        static public void AddLog(LogType Level, string Msg)
        {
            Form.AddLog(Level,Msg);
        }

        static public void AddLogPath(String Name, String Path)
        {
            String Msg = Path;
            if (Directory.Exists(Path) == false)
                Msg += " (missing)";
            AddLog(Engine.LogType.ltInfo, Name + ": " + Msg);
        }
                
        static public void Welcome()
        {
            AddLog(LogType.ltInfo,"Machine: " + Environment.MachineName);
            AddLog(LogType.ltInfo,"User: " + Environment.UserName);
            AddLog(LogType.ltInfo,"Platform: " + Environment.OSVersion.Platform);
            AddLog(LogType.ltInfo, "SO: " + Environment.OSVersion.VersionString);
            AddLog(LogType.ltInfo, "UName: " + Helper.Platform.UName);
            AddLog(LogType.ltInfo, "Architecture: " + Helper.Platform.Architecture);
            AddLog(LogType.ltInfo, "Is Unix: " + Helper.Platform.IsUnix().ToString());
            AddLog(LogType.ltInfo, "Is Windows: " + Helper.Platform.IsWindows().ToString());
            AddLog(LogType.ltInfo, "Is Linux: " + Helper.Platform.IsLinux().ToString());
            AddLog(LogType.ltInfo, "Is OSX: " + Helper.Platform.IsOSX().ToString());
            AddLogPath("Path - Current", Environment.CurrentDirectory);
            AddLogPath("Path - Project", PathProject);            
            AddLogPath("Path - Share", PathShare);
            AddLogPath("Path - Sources",PathSources);
            AddLogPath("Path - Htdocs",PathHtdocs);
            AddLogPath("Path - Utils",PathUtils);

            AddLogPath("Path - Osiris Data", PathData);
            AddLogPath("Path - OMS", PathOms);
            AddLogPath("Path - OMS Data", PathOmsData);            
            AddLogPath("Path - Output", PathOutput);
            AddLogPath("Path - Temporary", PathTemporary);

            if( (Helper.Platform.IsAdmin() == false) )
            {
                // Reason for this:
                // - Only root users can build OSX Volumes.
                AddLog(LogType.ltCritical,"This software must be launched with admin privileges.");
                Application.Exit();
            }

            AddLog(LogType.ltInfo, "OMS Ready.");
        }

        static public String LibraryName(String Platform, String Name, bool AddLibSuffix)
        {
            if (Platform == "windows")
                return Name + ".dll";
            else if (Platform == "linux")
            {
                if (AddLibSuffix)
                    return "lib" + Name + ".so";
                else
                    return Name + ".so";
            }
            else if (Platform == "macosx")
            {
                if (AddLibSuffix)
                    return "lib" + Name + ".dylib";
                else
                    return Name + ".dylib";
            }
            else
                return Name;
        }


        static public void Generate(bool Build, bool Deploy, bool Report, string Name, string Version2, string Version3, string Platform, string Arch, string Type, string Compiler)
        {
            AddLog("---------------------------------------------------------------------------------------------");
            AddLog(Name + " - Version: " + Version3 + " - Platform: " + Platform + " - Architecture: " + Arch + " - Type: " + Type);
                        // In generale            
            String PathOut = PathOutput + "/osiris_" + Version2.ToLower() + "_" + Platform.ToLower() + "_" + Arch.ToLower();            
            String PathTemporary2 = PathTemporary; // First, unique folder

            String PathArch = "";
            String PathBin = "";
            String PathBinAdds = PathOms + "/libraries/" + Platform.ToLower() + "/" + Arch.ToLower();
            if (Platform == "windows")
            {
                PathArch = Platform.ToLower() + "/" + Arch.ToLower() + "/" + Compiler + "/Release";
                PathBin = PathProject + "/client/bin/" + PathArch; // Eccezione
                PathTemporary2 += "/Osiris";
            }
            else if (Platform == "linux")
            {
                PathArch = Platform.ToLower() + "/" + Arch.ToLower() + "/" + Compiler + "/release";
                PathBin = PathProject + "/client/bin/" + PathArch;
                PathTemporary2 += "/osiris";
            }
            else if (Platform == "macosx")
            {
                PathArch = Platform.ToLower() + "/" + Arch.ToLower() + "/" + Compiler + "/release";
                PathBin = PathProject + "/client/bin/" + PathArch + "/Osiris.app/Contents/MacOS";
                PathTemporary2 += "/Osiris.app";
            }

            bool Skip = false;

            //Engine.AddLog("Look for:" + PathBin + "/osiris");

            if ((Platform == "windows") && (File.Exists(PathBin + "/osiris.exe") == false)) Skip=true;
            if ((Platform == "linux") && (File.Exists(PathBin + "/osiris") == false)) Skip = true;
            if ((Platform == "macosx") && (File.Exists(PathBin + "/osiris") == false)) Skip = true;
            if ((Type=="Firefox") && (File.Exists(PathBin + "/" + LibraryName(Platform, "firefox", true)) == false)) Skip = true;
            
            if (Skip == true)
            {
                AddLog("Missing files for this configuration. Skipped.");
                return;
            }

            

            if ((Platform == "windows") && (Type == "Debug"))
            {
                PathOut += "_debug.rar";

                if (Build)
                {
                    String WorkDir = PathProject;
                    //String OutputFileRar = "..\\..\\..\\Output\\debug" + txtVersion.Text + ".rar";

                    Helper.FileSystem.FileRemove(PathOut);

                    String Files = "";

                    Files += " disk_o.bat";
                    Files += " *.h";
                    Files += " *.cpp";
                    Files += " *.cs";
                    Files += " *.pdb";
                    Files += " *.manifest";

                    Files += " client\\bin\\win-i386\\release\\*.dll";
                    Files += " client\\bin\\win-i386\\release\\*.exe";

                    Files += " client\\bin\\win-x86_64\\release\\*.dll";
                    Files += " client\\bin\\win-x86_64\\release\\*.exe";

                    //String CmnSwitch = String.Format("-apOsiris -rr3p -r -md4096 -m5 *.cpp *.h *.cs *.pdb");
                    String CmnSwitch = String.Format("-apOsiris -rr3p -r -md4096 -m5 -x*\\Debug\\* -x*vc??.pdb -x*\\RECYCLER\\* -pbk96ndk1h3oxl01745bdsj2k");

                    Helper.FileSystem.Shell("C:\\Program Files\\WinRAR\\winrar.exe", String.Format("a {0} \"{1}\" {2}", CmnSwitch, PathOut, Files), WorkDir, true, true,true);
                }

                Deploy = false; // Avoid deploy for this.
            }
            else
            {
                // -----------------------------------------------------------------------------
                // Paths definition
                // -----------------------------------------------------------------------------
                String PathTemporaryResources = "";
                String PathTemporaryBinaries = "";

                if (Type == "Firefox")
                {
                    PathTemporaryResources = PathTemporary + "/osiris";
                    PathTemporaryBinaries = PathTemporary + "/osiris";
                    
                    PathOut = PathOutput + "/osirifox_" + Version3.ToLower() + "_" + Platform.ToLower() + "_" + Arch.ToLower() + ".xpi";                                
                }
                else if (Platform == "windows")
                {
                    if (Type == "Portable")
                    {
                        PathTemporaryResources = PathTemporary2;
                        PathTemporaryBinaries = PathTemporary2;
                        PathOut += ".zip";
                    }
                    else
                    {
                        PathTemporaryResources = PathTemporary;
                        PathTemporaryBinaries = PathTemporary;
                        PathOut += ".exe";
                    }
                }
                else if (Platform == "linux")
                {
                    if (Type == "Portable")
                    {
                        PathTemporaryResources = PathTemporary2;
                        PathTemporaryBinaries = PathTemporary2;
                        PathOut += ".tar.gz";
                    }
                    else if (Type == "Debian")
                    {
                        PathTemporaryResources = PathTemporary + "/usr/share/osiris-sps";
                        PathTemporaryBinaries = PathTemporary + "/usr/lib/osiris-sps";
                        PathOut += ".deb";
                    }
                }
                else if (Platform == "macosx")
                {
                    PathTemporaryResources = PathTemporary + "/Osiris.app/Contents/Resources";
                    PathTemporaryBinaries = PathTemporary + "/Osiris.app/Contents/MacOS";

                    if (Type == "Portable")
                        PathOut += ".tar.gz";
                    else if (Type == "DMG")
                        PathOut += ".dmg";

                }

                // -----------------------------------------------------------------------------
                // Building directory
                // -----------------------------------------------------------------------------

                bool BuildingDirectory = Build;

                //BuildingDirectory = false; // We decomment this only for debug of lower parts.

                if (BuildingDirectory)
                {
                    AddLog("Building directory");

                    // Reset Temporary Directory
                    Helper.FileSystem.DirectoryRemove(PathTemporary);
                    Helper.FileSystem.DirectoryCreate(PathTemporary);
                    Helper.FileSystem.DirectoryCreate(PathTemporaryBinaries);
                    Helper.FileSystem.DirectoryCreate(PathTemporaryResources);                    

                    List<string> Blacklist = BlacklistBase;
                    if (Type == "Firefox")
                    {
                        Blacklist = new List<string>();
                        Blacklist.AddRange(BlacklistBase);
                        Blacklist.Add("share/ui$");
                        Blacklist.Add("AF9A4C281070FDB0F34CF417CDB168AB38C8A388/doc$");
                        Blacklist.Add("^(lib)?wx.*\\.(dll|so|dylib)$");
                        Blacklist.Add("^(lib)?ui\\.(dll|so|dylib)$");
                        //Blacklist.Add("^console(.exe)?$");
                        //Blacklist.Add("^osiris(.exe)?$");
                    }

                    Helper.FileSystem.DirectoryCopy(PathShare, PathTemporaryResources + "/share", Blacklist);
                    Helper.FileSystem.DirectoryCopy(PathBin, PathTemporaryBinaries, Blacklist);
                    Helper.FileSystem.DirectoryCopy(PathBinAdds, PathTemporaryBinaries, Blacklist);

                    if (Type == "Firefox")
                    {
                        // Messi qui, altrimenti salta la dir "osiris" che c'è dentro python
                        Helper.FileSystem.FileRemove(PathTemporaryBinaries + "/Osiris");
                        Helper.FileSystem.FileRemove(PathTemporaryBinaries + "/osiris");
                        Helper.FileSystem.FileRemove(PathTemporaryBinaries + "/osiris.exe");
                        Helper.FileSystem.FileRemove(PathTemporaryBinaries + "/console");
                        Helper.FileSystem.FileRemove(PathTemporaryBinaries + "/console.exe");
                    }

                    // SDK
                    Helper.FileSystem.DirectoryCreate(PathTemporaryResources + "/sdk");
                    Helper.FileSystem.FileCopy(PathProject + "/client/src/sdk/sdk.h", PathTemporaryResources + "/sdk/sdk.h");
                    if (Platform == "windows")
                    {
                        Helper.FileSystem.FileCopy(PathBin + "/sdk.lib", PathTemporaryResources + "/sdk/sdk.lib");
                    }

                    if(Type != "Firefox") // Exception: Firefox has your system.xml in their package.
                        Helper.FileSystem.FileCopy(PathOmsData + "/systems/" + Platform.ToLower() + "_" + Type.ToLower() + ".xml", PathTemporaryBinaries + "/system.xml");

                }

                // -----------------------------------------------------------------------------
                // Building package
                // -----------------------------------------------------------------------------

                if (Build)
                {
                    AddLog("Building package");

                    Helper.FileSystem.FileRemove(PathOut);

                    if (Platform == "macosx")
                    {
                        Helper.FileSystem.FileCopy(PathOmsData + "/osx/Info.plist", PathTemporaryResources + "/../Info.plist");
                        Helper.FileSystem.FileCopy(PathOmsData + "/osx/Osiris.icns", PathTemporaryResources + "/Osiris.icns");
                    }

                    if (Type == "Portable")
                    {
                        bool ForceZip = (Platform == "windows"); // zip or gzip?
                        AddLog("Portable, compression.");
                        Helper.FileSystem.Compress(PathOut, PathTemporary, ForceZip);

                    }
                    else if (Type == "Firefox")
                    {                        
                        String NameLib = LibraryName(Platform, "firefox", true);
                        Helper.FileSystem.DirectoryCopy(PathProject + "/client/src/firefox/package", PathTemporary, BlacklistBase);
                        Helper.FileSystem.FileCopy(PathBin + "/" + NameLib, PathTemporary + "/components/" + NameLib);
                        Helper.FileSystem.FileCopy(PathProject + "/client/src/firefox/iosiris.xpt", PathTemporary + "/components/iosiris.xpt");

                        AddLog("Firefox, signing process.");
                        // Signing process.                        
                        String PathUpdateRdfFile = "osirifox_update_" + Platform.ToLower() + "_" + Arch.ToLower() + ".rdf";

                        String InstallRdf = Helper.FileSystem.ReadTextFile(PathProject + "/client/src/firefox/package/install.rdf");
                        InstallRdf = InstallRdf.Replace("{{{os:version3}}}", Version3);
                        InstallRdf = InstallRdf.Replace("{{{os:ffminversion}}}", Engine.Form.txtFirefoxVersionMin.Text);
                        InstallRdf = InstallRdf.Replace("{{{os:ffmaxversion}}}", Engine.Form.txtFirefoxVersionMax.Text);
                        InstallRdf = InstallRdf.Replace("{{{os:updaterdf}}}", PathUpdateRdfFile);
                        Helper.FileSystem.WriteTextFile(PathTemporary + "/install.rdf", InstallRdf);

                        // Compress
                        AddLog("Firefox, compression...");
                        Helper.FileSystem.Compress(PathOut, PathTemporary, true); // Firefox support gzip under linux & osx? mmm.. for the moment, always zip output.

                        if (Helper.Platform.IsWindows() == false)
                        {
                            AddLog(LogType.ltVerbose, "Firefox signing can run only from Windows.");
                        }
                        else
                        {
                            AddLog("Firefox, update.rdf...");
                            String UpdateRdf = Helper.FileSystem.ReadTextFile(PathProject + "/client/src/firefox/update.rdf");
                            UpdateRdf = UpdateRdf.Replace("{{{os:version3}}}", Version3);
                            UpdateRdf = UpdateRdf.Replace("{{{os:ffminversion}}}", Engine.Form.txtFirefoxVersionMin.Text);
                            UpdateRdf = UpdateRdf.Replace("{{{os:ffmaxversion}}}", Engine.Form.txtFirefoxVersionMax.Text);
                            UpdateRdf = UpdateRdf.Replace("{{{os:xpi}}}", new FileInfo(PathOut).Name);
                            String Sha256 = Helper.FileSystem.ShellCmd(PathProject + "/utils/sums/sha256sum.exe \"" + PathOut + "\"", true);
                            Sha256 = Sha256.Substring(0, Sha256.IndexOf(" "));
                            UpdateRdf = UpdateRdf.Replace("{{{os:sha256}}}", "sha256:" + Sha256);
                            Helper.FileSystem.WriteTextFile(PathOutput + "/" + PathUpdateRdfFile, UpdateRdf);

                            AddLog("Firefox, mccoy signing...");
                            Helper.FileSystem.ShellCmd(PathProject + "/utils/moz_mccoy/mccoy.exe -command update -updateRDF \"" + Helper.FileSystem.NormalizePathToWin(PathOutput + "/" + PathUpdateRdfFile) + "\" -key osiris", true);

                            AddLog("Firefox, signing done.");
                        }
                    }
                    else if ((Platform == "linux") && (Type == "Debian"))                    
                    {
                        long FolderSize = Helper.FileSystem.DirectorySize(new DirectoryInfo(PathTemporary),true);
                        long FolderSizeKb = FolderSize / 1024;

                        String DebianArchitecture = Arch.ToLowerInvariant();
                        if (DebianArchitecture == "x86_64")
                            DebianArchitecture = "amd64";

                        Helper.FileSystem.ShellCmd("chmod +x '" + PathOmsData + "/debian/osiris-sps_inst" + "'", true);
                        Helper.FileSystem.ShellCmd("chmod +x '" + PathOmsData + "/debian/postinst" + "'", true);
                        Helper.FileSystem.ShellCmd("chmod +x '" + PathOmsData + "/debian/postrm" + "'", true);
                        Helper.FileSystem.ShellCmd("chmod +x '" + PathOmsData + "/debian/prerm" + "'", true);

                        Helper.FileSystem.DirectoryCreate(PathTemporary + "/DEBIAN");
                        Helper.FileSystem.DirectoryCreate(PathTemporary + "/usr/bin");
                        Helper.FileSystem.FileCopy(PathOmsData + "/debian/osiris-sps_inst", PathTemporary + "/usr/bin/osiris-sps");                        
                        Helper.FileSystem.DirectoryCreate(PathTemporary + "/usr/share/pixmaps");
                        Helper.FileSystem.FileCopy(PathOmsData + "/graphics/icon.png", PathTemporary + "/usr/share/pixmaps/osiris-sps.png");
                        Helper.FileSystem.DirectoryCreate(PathTemporary + "/usr/share/icons");
                        Helper.FileSystem.FileCopy(PathOmsData + "/graphics/icon.png", PathTemporary + "/usr/share/icons/osiris-sps.png");
                        Helper.FileSystem.DirectoryCreate(PathTemporary + "/usr/share/applications");
                        Helper.FileSystem.FileCopy(PathOmsData + "/debian/osiris-sps.desktop", PathTemporary + "/usr/share/applications/osiris-sps.desktop");

                        String TextDebianControl = Helper.FileSystem.ReadTextFile(PathOmsData + "/debian/control");
                        TextDebianControl = TextDebianControl.Replace("{{{os:version}}}", Version2);
                        TextDebianControl = TextDebianControl.Replace("{{{os:size}}}", FolderSizeKb.ToString());
                        TextDebianControl = TextDebianControl.Replace("{{{os:architecture}}}", DebianArchitecture);
                        Helper.FileSystem.WriteTextFile(PathTemporary + "/DEBIAN/control", TextDebianControl);
                        Helper.FileSystem.ShellCmd("chmod 755 '" + PathTemporary + "/DEBIAN/control'",true);
                        /*
                        mkdir ../output_debian/usr/share/doc
                        mkdir ../output_debian/usr/share/doc/osiris
                        cp README ../output_debian/usr/share/doc/osiris-sps
                        cp copyright ../output_debian/usr/share/doc/osiris-sps
                        cp changelog ../output_debian/usr/share/doc/osiris-sps
                    	
                        mkdir $var_buildpath/usr/lib/osiris-sps -p
                        cp osiris $var_buildpath/usr/lib/osiris-sps
                        */

                        //dpkg -b $var_buildpath "../repository/"$var_outname".deb"                        
                        AddLog("Debian, building package...");
                        Helper.FileSystem.ShellCmd("dpkg -b '" + PathTemporary + "' '" + PathOut + "'",true); // Creating debian package
                                                
                        /*
                        echo Copying in debian repository
                        cp "../repository/"$var_outname".deb" "../repository/debian/dists/stable/non-free/binary-"$var_arch"/"$var_outname".deb"
                    	
                        echo Updating debian repository
                        cd ../repository/debian
                        ./build.sh
                        cd ../../scripts 
                        */
                        AddLog("Debian, done.");
                    }
                    else if ((Platform == "macosx") && (Type == "DMG"))
                    {
                        AddLog("DMG, creating...");
                        Helper.FileSystem.FileCopy(PathOmsData + "/osiris.dmg", PathOut + ".tmp.dmg");
                        
                        AddLog("DMG, resizing...");
                        Helper.FileSystem.ShellCmd("hdiutil resize -size 200m '" + PathOut + ".tmp.dmg" + "'",true); // Resize to 200mb to fit files
                        
                        AddLog("DMG, mount...");
                        Helper.FileSystem.ShellCmd("hdiutil attach '" + PathOut + ".tmp.dmg' -mountpoint /Volumes/OsirisDiskBuild", true); // Mounting
                        
                        AddLog("DMG, copying...");
                        Helper.FileSystem.DirectoryCopy(PathTemporary + "/Osiris.app", "/Volumes/OsirisDiskBuild/Osiris.app");
                        
                        AddLog("DMG, demount...");
                        Helper.FileSystem.ShellCmd("hdiutil detach /Volumes/OsirisDiskBuild", true); // De-mounting
                                                
                        Helper.FileSystem.FileRemove(PathOut);
                        AddLog("DMG, compress & convert...");
                        Helper.FileSystem.ShellCmd("hdiutil convert '" + PathOut + ".tmp.dmg'  -format UDCO -imagekey zlib-level=9 -o '" + PathOut + "'", true); // Compression
                        Helper.FileSystem.FileRemove(PathOut + ".tmp.dmg");
                        
                        AddLog("DMG, done.");
                    }
                    else if ((Platform == "windows") && (Type == "Installer"))
                    {
                        StreamReader sr = new StreamReader(PathOmsData + "/Osiris.nsi");
                        String NsiText = sr.ReadToEnd();
                        sr.Close();

                        if(Arch == "x86_64")
                            NsiText = NsiText.Replace("$PROGRAMFILES", "$PROGRAMFILES64");

                        NsiText = NsiText.Replace("#OS_Output#", Helper.FileSystem.NormalizePathToWin(PathOut));
                        NsiText = NsiText.Replace("#OS_ReleasePath#", Helper.FileSystem.NormalizePathToWin(PathTemporary));

                        List<String> NotToOverwrite = new List<string>();
                        NotToOverwrite.Add("options.xml");
                        NotToOverwrite.Add("ui.xml");

                        Helper.Nsis.ReplaceNsisScript(ref NsiText, "Core", PathTemporary, "/", NotToOverwrite);
                        //Helper.Nsis.ReplaceNsisScript(ref NsiText, "Plugins_SQLLite", PathTemporary + "/share/plugins/532E9E0A68EB22E08240965CFA9366DFA6A26A62", "/share/plugins/532E9E0A68EB22E08240965CFA9366DFA6A26A62", NotToOverwrite);
                        //Helper.Nsis.ReplaceNsisScript(ref NsiText, "Plugins_Components", PathTemporary + "/share/plugins/BAADFB75999AC5E321F82BAED85B6C0A56BDCF9B", "/share/plugins/BAADFB75999AC5E321F82BAED85B6C0A56BDCF9B", NotToOverwrite);
                        //Helper.Nsis.ReplaceNsisScript(ref NsiText, "Plugins_Python", PathTemporary + "/share/plugins/AF9A4C281070FDB0F34CF417CDB168AB38C8A388", "/share/plugins/AF9A4C281070FDB0F34CF417CDB168AB38C8A388", NotToOverwrite);

                        StreamWriter sw = new StreamWriter(PathTemporary + "/temp.nsi");
                        sw.Write(NsiText);
                        sw.Close();

                        Helper.FileSystem.Shell(Engine.PathUtils + "\\NSIS\\makensisw.exe", PathTemporary + "/temp.nsi", "", true, true, false);

                        //Helper.FileSystem.FileRemove("temp.nsi");
                    }
                }

                if( (Build) && (Report) )
                {
                    // TODO:
                    // - Elenco dll che son presenti nella directory, ma mai "citate" da ldd.
                    // - Elenco dll "citate" ma non presenti o in path non locali.

                    String TextReport = "";
                    DirectoryInfo DI = new DirectoryInfo(PathTemporaryBinaries);
                    foreach (FileInfo FI in DI.GetFiles())
                    {
                        String Output = "";
                        String Path = Helper.FileSystem.NormalizePath(FI.FullName);
                        if ((Platform == "linux") && (Helper.Platform.IsLinux()))
                            Output = Helper.FileSystem.ShellCmd("ldd \"" + Path + "\"",false);
                        else if ((Platform == "macosx") && (Helper.Platform.IsOSX()))
                            Output = Helper.FileSystem.ShellCmd("otool -L \"" + Path + "\"",false);

                        TextReport += "-------------------\nFile:" + Path + "\n";
                        TextReport += Output;
                    }

                    if (TextReport != "")
                    {
                        TextReport = "Library Dependencies\n--------------------------------------------------------" + TextReport;
                        String PathReport = PathOms + "/reports/osiris_" + Version2.ToLower() + "_" + Platform.ToLower() + "_" + Arch.ToLower() + ".txt";
                        StreamWriter sw = new StreamWriter(PathReport);
                        sw.Write(TextReport);
                        sw.Close();
                    }                    
                }
            }


            if (Deploy)
            {
                /*
                Engine.AddLog("Deploy " + PathOut);

                FileInfo FI = new FileInfo(PathOut);
                
                String PathFrom = PathOut;
                String PathTo = "/home/var/www/osiris-sps/repository/" + FI.Name;

                Scp.To(PathFrom, PathTo);
                */
                Form.UploadToServer("Orange", PathOut, "/repository/internal", "");
            }

        }
    }
}
