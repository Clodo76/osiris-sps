page.controlIdFromOptionName = function(id)
{
	str = id.replace(/\./g, "");
	str = str.replace(/\_/g, "");
	return str;
}

page.createSeparator = function()
{
	div = new html.Div();
	div.css = "os_separator";
	return div;
}

page.createControl = function(id)
{
	title = page.getText("options." + id + ".title");
	desc = page.getText("options." + id + ".description");
	
	div = new html.Div();
	div.optionName = id;
	div.info = new html.Div();
	div.info.style = "border:1px solid transparent;clear:both;float:left;width:30%;padding:5px;";
	//div.info.attributes["os:tooltip"] = id;
	div.controls.add(div.info);
	
	div.info.title = new html.Div();
	div.info.title.controls.add(new html.Text(title));
	//div.info.title.style = "font-size:1.3em";	
	div.info.title.css = "os_title";
	div.info.controls.add(div.info.title);
	
	div.info.desc = new html.Div();
	div.info.desc.controls.add(new html.Text(desc));
	//div.info.desc.style = "font-size:0.8em";
	div.info.desc.css = "os_description";
	div.info.controls.add(div.info.desc);
	
	div.field = new html.Div();
	div.field.style = "border:1px solid transparent;float:right;width:65%;padding:5px;";
	div.controls.add(div.field);	
	
	div.clear = new html.Div();
	//div.clear.css = "os_clear_hr";
	div.clear.css = "os_clear";
	div.controls.add(div.clear);
	
	div.getName = function()
	{
		return this.optionName;
	}
	
	page.optionsControls[id] = div;
	
	return div;
}

page.createControlString = function(id)
{
	div = page.createControl(id);
	
	div.field.textbox = new html.TextBox();
	div.field.textbox.id = page.controlIdFromOptionName(id);
	div.field.textbox.css = "os_input_full";
	div.field.controls.add(div.field.textbox);
	
	if(page.isPostBack == false)
	{
		div.field.textbox.value = options[id];
	}
	
	div.getValue = function()
	{
		return this.field.textbox.value;
	}	
	
	return div;
}

page.createControlBool = function(id)
{
	div = page.createControl(id);
	
	div.field.checkbox = new html.CheckBox();
	div.field.checkbox.id = page.controlIdFromOptionName(id);
	div.field.controls.add(div.field.checkbox);
	
	if(page.isPostBack == false)
	{	
		div.field.checkbox.check = options[id];
	}
	
	div.getValue = function()
	{
		return this.field.checkbox.check;
	}	
	
	return div;
}

page.createControlNumber = function(id)
{
	div = page.createControl(id);
	
	div.field.textbox = new html.TextBox();
	div.field.textbox.id = page.controlIdFromOptionName(id);
	div.field.textbox.css = "os_input_full";
	div.field.controls.add(div.field.textbox);
	
	if(page.isPostBack == false)
	{
		div.field.textbox.value = options[id];
	}
	
	div.getValue = function()
	{
		return parseInt(this.field.textbox.value);
	}	
	
	return div;
}

page.createControlEnum = function(id, items)
{
	div = page.createControl(id);
		
	div.field.combo = new html.ComboBox();
	div.field.combo.id = page.controlIdFromOptionName(id);
	//div.field.combo.css = "os_input_full";
	div.field.controls.add(div.field.combo);		

	for (var item in items) 
	{
		var n = page.getText("options." + id + "." + item);
		var v = items[item];
		div.field.combo.addOption(n,v);
	}	
	
	if(page.isPostBack == false)
	{
		div.field.combo.value = options[id];
	}
	
	div.getValue = function()
	{
		return this.field.combo.value;
	}	
	
	return div;
}

page.createTabPage = function(tab, name)
{	
	var tabPageHeader = new html.Div();
	tabPageHeader.controls.add(new html.Text(page.getText("main.pages.settings." + name)));	
	tabPageHeader.attributes["os:tabType"] = "header";
	tabPageHeader.attributes["os:tabPage"] = tab.tabPageIndex;
	tab.controls.add(tabPageHeader);
	
	var tabPageBody = new html.Div();
	tabPageBody.attributes["os:tabType"] = "body";
	tabPageBody.attributes["os:tabPage"] = tab.tabPageIndex;
	tab.controls.add(tabPageBody);
	
	tab.tabPageIndex++;
	
	return tabPageBody;
}

page.createGroup = function(tabPage, name)
{
	var block = new ide.Block(page.getText("main.pages.settings." + name));		
	block.type = ide.block_minimal;
	tabPage.controls.add(block);
	return block.body;
}

page.onInit = function()
{
	page.optionsControls = new Array();
	
	page.block = new ide.Block(page.getText("main.pages.settings.title"));	
	page.getArea(ide.content).controls.add(page.block);
	
	var tab = new html.Div();
	tab.tabPageIndex = 0;
	tab.style = "display:none;"
	tab.attributes["os:otype"] = "tab";
	page.block.body.controls.add(tab);	
	
	tabPage = page.createTabPage(tab,"look_and_feel");
	tabPage.controls.add(page.createControlString("language.id"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("ide.objects.hot_state_threshold"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("ide.pager.items"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("ide.pager.pages"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("ide.skin.id"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("url.protocols.find_link"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("url.protocols.no_confirm"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("url.protocols.no_redirect"));
	
	tabPage = page.createTabPage(tab,"privacy");
	tabPage.controls.add(page.createControlBool("privacy.allow_external_images"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlBool("privacy.allow_external_urls"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("web.redirect_url"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlEnum("anonymity.html_mode", { "no":"0", "confirm":"1", "yes":"2" }));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlEnum("anonymity.object_mode", { "no":"0", "confirm":"1", "yes":"2" }));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("anonymity.object_trusted_domains"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("anonymity.object_trusted_types"));
			
	tabPage = page.createTabPage(tab,"network");	
	tabPage.controls.add(page.createControlNumber("web.server.port"));	
	tabPage.controls.add(page.createSeparator());	
	tabPage.controls.add(page.createControlBool("web.server.enable_upnp"));			
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlBool("p2p.enable"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("p2p.server.port"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlBool("p2p.server.enable_upnp"));		
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("net.max_download"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("net.max_upload"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("p2p.max_incoming_connections"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("p2p.max_outgoing_connections"));
	tabPage.controls.add(page.createSeparator());	
	tabPage.controls.add(page.createControlEnum("net.proxy.type", { "none":"0", "http":"1", "socks5":"2"}));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("net.proxy.host"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlNumber("net.proxy.port"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("net.proxy.username"));
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlString("net.proxy.password"));	
	tabPage.controls.add(page.createSeparator());
	tabPage.controls.add(page.createControlBool("net.proxy.restrict_to_unsafe_connections"));	
		
	tabPage = page.createTabPage(tab,"advanced");	
	
	tabPage.controls.add(new ide.HelpBox(page.getText("main.pages.settings.advanced.warning"), ""));
	
	tabPage.groupLogging = page.createGroup(tabPage, "logging");
	tabPage.groupLogging.controls.add(page.createControlBool("log.serialize"));
	tabPage.groupLogging.controls.add(page.createSeparator());
	tabPage.groupLogging.controls.add(page.createControlEnum("log.level", { "debug":"0", "notice":"1", "info":"2", "warning":"3", "error":"4" }));
	
	tabPage.groupInternationalization = page.createGroup(tabPage,"internationalization");	
	tabPage.groupInternationalization.controls.add(page.createControlString("language.id"));
	tabPage.groupInternationalization.controls.add(page.createSeparator());
	tabPage.groupInternationalization.controls.add(page.createControlString("language.alternative"));
	tabPage.groupInternationalization.controls.add(page.createSeparator());
	tabPage.groupInternationalization.controls.add(page.createControlNumber("language.time_offset"));
	tabPage.groupInternationalization.controls.add(page.createSeparator());
	tabPage.groupInternationalization.controls.add(page.createControlBool("language.time_offset_by_language"));
	
	tabPage.groupWebAccess = page.createGroup(tabPage,"web_access");	
	tabPage.groupWebAccess.controls.add(page.createControlString("web.server.bind_ip"));	
	tabPage.groupWebAccess.controls.add(page.createSeparator());	
	tabPage.groupWebAccess.controls.add(page.createControlBool("web.allow_remote_connections"));		
	tabPage.groupWebAccess.controls.add(page.createSeparator());
	tabPage.groupWebAccess.controls.add(page.createControlString("web.browser"));			
	tabPage.groupWebAccess.controls.add(page.createSeparator());
	tabPage.groupWebAccess.controls.add(page.createControlNumber("web.session.duration"));
	
	tabPage.groupNetworkP2P = page.createGroup(tabPage,"network_p2p");		
	tabPage.groupNetworkP2P.controls.add(page.createControlString("p2p.server.bind_ip"));	
	tabPage.groupNetworkP2P.controls.add(page.createSeparator());
	tabPage.groupNetworkP2P.controls.add(page.createControlNumber("p2p.bootstrap.request_delay"));
	tabPage.groupNetworkP2P.controls.add(page.createSeparator());
	tabPage.groupNetworkP2P.controls.add(page.createControlNumber("p2p.bootstrap.notify_delay"));
	tabPage.groupNetworkP2P.controls.add(page.createSeparator());
	tabPage.groupNetworkP2P.controls.add(page.createControlNumber("net.connection_timeout"));
	
	tabPage.groupTuning = page.createGroup(tabPage,"tuning");		
	tabPage.groupTuning.controls.add(page.createControlNumber("web.cache_size"));		
	tabPage.groupTuning.controls.add(page.createSeparator());
	tabPage.groupTuning.controls.add(page.createControlEnum("portals.search_level", { "none":"0", "quick":"1", "accurate":"2" }));
	tabPage.groupTuning.controls.add(page.createSeparator());
	tabPage.groupTuning.controls.add(page.createControlNumber("portals.search_limit"));
	tabPage.groupTuning.controls.add(page.createSeparator());
	tabPage.groupTuning.controls.add(page.createControlNumber("plugins.sqlite.cache_size"));
	tabPage.groupTuning.controls.add(page.createSeparator());
	tabPage.groupTuning.controls.add(page.createControlBool("plugins.sqlite.enable_asyncio"));
	tabPage.groupTuning.controls.add(page.createSeparator());
	tabPage.groupTuning.controls.add(page.createControlNumber("portals.objects_step"));
	
	tabPage.groupMisc = page.createGroup(tabPage,"misc");		
//	tabPage.groupMisc.controls.add(page.createControlString("db.default_driver"));	
//	tabPage.groupMisc.controls.add(page.createSeparator());	
	tabPage.groupMisc.controls.add(page.createControlString("system.isis"));
	tabPage.groupMisc.controls.add(page.createSeparator());
	tabPage.groupMisc.controls.add(page.createControlEnum("system.clock_synchronization_method", { "ntp":"ntp", "isis":"isis" }));
	tabPage.groupMisc.controls.add(page.createSeparator());
	tabPage.groupMisc.controls.add(page.createControlBool("system.last_version.check_enable"));
	tabPage.groupMisc.controls.add(page.createSeparator());
	tabPage.groupMisc.controls.add(page.createControlNumber("system.last_version.check_delay"));
	tabPage.groupMisc.controls.add(page.createSeparator());
	tabPage.groupMisc.controls.add(page.createControlNumber("system.hardware_concurrency"));
	tabPage.groupMisc.controls.add(page.createSeparator());
	tabPage.groupMisc.controls.add(page.createControlNumber("system.background_tasks"));
}

page.onLoad = function()
{			
	divActions = new html.Div();
	divActions.css = "os_commands";
	page.block.body.controls.add(divActions);	
	
	page.cmdSave = new ide.Button();	
	page.cmdSave.id = "save";
	page.cmdSave.caption = page.getText("main.pages.settings.actions.save");
	page.cmdSave.onClick = page.save;				
	divActions.controls.add(page.cmdSave);
	
	page.cmdCancel = new ide.Button();	
	page.cmdCancel.id = "cancel";
	page.cmdCancel.caption = page.getText("main.pages.settings.actions.cancel");
	page.cmdCancel.onClick = page.cancel;				
	divActions.controls.add(page.cmdCancel);
}

page.save = function()
{
	for each(ctrl in page.optionsControls)
	{
		options[ctrl.getName()] = ctrl.getValue();
	}

	options.save();	
	options.update();
	
	page.showMessage(page.getText("main.pages.settings.options_updated"));
}

page.cancel = function()
{
	page.redirect(portalsSystem.getLink("home"));
}
