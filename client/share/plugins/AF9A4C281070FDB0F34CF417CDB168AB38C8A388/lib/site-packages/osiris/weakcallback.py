import weakref

class WeakCallable:
	def __init__(self, obj, func):
		self._obj = obj
		self._meth = func
		
	def __call__(self, *args, **kwargs):
		if self._obj is not None:
			return self._meth(self._obj, *args, **kwargs)
		else:
			return self._meth(*args, **kwargs)
			
	def __getattr__(self, attr):
		if attr == 'im_self':
			return self._obj
		if attr == 'im_func':
			return self._meth		
		raise AttributeError, attr

class WeakCallback:
	def __init__(self,fn):
		try:
			self._obj = weakref.ref(fn.im_self)
			self._meth = fn.im_func
		except AttributeError:
			self._obj = None
			self._meth = fn
			
	def __call__(self, *args, **kwargs):
		if self._dead(): 
			#raise TypeError , 'Method called on dead object'
			return None
		return WeakCallable(self._obj(),self._meth)(*args,**kwargs)
		
	def _dead(self):
		return self._obj is not None and self._obj() is None
