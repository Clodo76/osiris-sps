// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "omlhtmlwrapper.h"
#include "omla.h"
#include "omlimg.h"
#include "omlhtmlwrapper.pypp.hpp"

namespace bp = boost::python;

struct OMLHtmlWrapper_wrapper : ::osiris::OMLHtmlWrapper, ::osiris::PythonWrapper< ::osiris::OMLHtmlWrapper > {

    OMLHtmlWrapper_wrapper(::osiris::OMLHtmlWrapper const & arg )
    : ::osiris::OMLHtmlWrapper( arg )
      , ::osiris::PythonWrapper< ::osiris::OMLHtmlWrapper >(){
        // copy constructor
        
    }

    OMLHtmlWrapper_wrapper(::osiris::String const & tag, ::osiris::String const & htmlTag, bool allowedInRowMode, ::osiris::String const & parentTag, ::osiris::String const & childsTag, ::osiris::String const & mapDefaultParamTo )
    : ::osiris::OMLHtmlWrapper( boost::ref(tag), boost::ref(htmlTag), allowedInRowMode, boost::ref(parentTag), boost::ref(childsTag), boost::ref(mapDefaultParamTo) )
      , ::osiris::PythonWrapper< ::osiris::OMLHtmlWrapper >(){
        // constructor
    
    }

    virtual bool allowRowMode(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_allowRowMode = this->get_override( "allowRowMode" ) )
            return func_allowRowMode(  );
        else{
            __pystate.leave();
            return this->::osiris::OMLHtmlWrapper::allowRowMode(  );
        }
    }
    
    bool default_allowRowMode(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLHtmlWrapper::allowRowMode( );
    }

    virtual ::osiris::String processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processHtml = this->get_override( "processHtml" ) )
            return func_processHtml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::OMLHtmlWrapper::processHtml( i, context );
        }
    }
    
    ::osiris::String default_processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLHtmlWrapper::processHtml( i, context );
    }

    virtual ::std::wstring onEncodeParam( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context, ::std::wstring const & name, ::std::wstring const & value ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEncodeParam = this->get_override( "onEncodeParam" ) )
            return func_onEncodeParam( i, context, name, value ).operator std::wstring();
        else{
            __pystate.leave();
            return this->::osiris::OMLHtmlWrapper::onEncodeParam( i, context, name, value );
        }
    }
    
    ::std::wstring default_onEncodeParam( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context, ::std::wstring const & name, ::std::wstring const & value ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLHtmlWrapper::onEncodeParam( i, context, name, value );
    }

    virtual ::osiris::String processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processOsml = this->get_override( "processOsml" ) )
            return func_processOsml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::IOMLCode::processOsml( i, context );
        }
    }
    
    ::osiris::String default_processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLCode::processOsml( i, context );
    }

};

void register_OMLHtmlWrapper_class(){

    ::boost::python::class_< OMLHtmlWrapper_wrapper, ::boost::python::bases< ::osiris::IOMLCode >, ::boost::noncopyable >( "OMLHtmlWrapper", ::boost::python::init< ::osiris::String const &, ::osiris::String const &, bool, ::osiris::String const &, ::osiris::String const &, ::osiris::String const & >(( ::boost::python::arg("tag"), ::boost::python::arg("htmlTag"), ::boost::python::arg("allowedInRowMode"), ::boost::python::arg("parentTag"), ::boost::python::arg("childsTag"), ::boost::python::arg("mapDefaultParamTo") )) )    
        .def( 
            "allowRowMode"
            , (bool ( ::osiris::OMLHtmlWrapper::* )(  ) const)(&::osiris::OMLHtmlWrapper::allowRowMode)
            , (bool ( OMLHtmlWrapper_wrapper::* )(  ) const)(&OMLHtmlWrapper_wrapper::default_allowRowMode) )    
        .def( 
            "processHtml"
            , (::osiris::String ( ::osiris::OMLHtmlWrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&::osiris::OMLHtmlWrapper::processHtml)
            , (::osiris::String ( OMLHtmlWrapper_wrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&OMLHtmlWrapper_wrapper::default_processHtml)
            , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) )    
        .def( 
            "onEncodeParam"
            , (::std::wstring ( ::osiris::OMLHtmlWrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext >,::std::wstring const &,::std::wstring const & ) const)(&::osiris::OMLHtmlWrapper::onEncodeParam)
            , (::std::wstring ( OMLHtmlWrapper_wrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext >,::std::wstring const &,::std::wstring const & ) const)(&OMLHtmlWrapper_wrapper::default_onEncodeParam)
            , ( ::boost::python::arg("i"), ::boost::python::arg("context"), ::boost::python::arg("name"), ::boost::python::arg("value") ) )    
        .def( 
            "processOsml"
            , (::osiris::String ( ::osiris::IOMLCode::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&::osiris::IOMLCode::processOsml)
            , (::osiris::String ( OMLHtmlWrapper_wrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&OMLHtmlWrapper_wrapper::default_processOsml)
            , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );

}
