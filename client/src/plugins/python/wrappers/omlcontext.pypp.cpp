// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "omlcontext.h"
#include "iideportalpage.h"
#include "omlcontext.pypp.hpp"

namespace bp = boost::python;

static boost::python::object getContextID_10940e9dcca6d22aa7e6310d94d68bc9( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String const result = inst.getContextID();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getContextNextID_f06b890872096e7775ad973236c61cdc( ::osiris::OMLContext & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String const result = inst.getContextNextID();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getOutput_328ed3bb2e819fdabe1fe0e998577f1f( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String const & result = inst.getOutput();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
}

static boost::python::object getWarnings_f1b274fe98b2f6a6b9ba2d5488a857ee( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & result = inst.getWarnings();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & >( result ) );
}

static boost::python::object getUrls_0355619629aee0c23b6e47102e13cb19( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & result = inst.getUrls();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & >( result ) );
}

static boost::python::object getPage_9c2a73f39cdc92b9b3d6caf1fea14991( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::shared_ptr<osiris::IPage> result = inst.getPage();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getPortalPage_7781a21f490d311c56ca9fbd428b59a0( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::shared_ptr<osiris::IPortalPage> result = inst.getPortalPage();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getFull_6ca92048d44984b4987349d5a0451f2d( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getFull();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getSecure_f963c47e5a9b4c902b7a51115342643b( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getSecure();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getRow_a019f066766630578bb69f04b971b4e6( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getRow();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getMode_689736fc08256318d4994443f268a1c3( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::OMLRenderMode result = inst.getMode();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getRefID_a5cc5a0a63bc377d24074ff35fe74ca3( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.getRefID();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getFullUrl_6fed83d933823aa0a9aa79cf4be5d8aa( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.getFullUrl();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getSecureCheck_b3489371e860acb126d28524f41006b1( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getSecureCheck();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getShowMore_9599cdf0c89807802b1bd5552639783f( ::osiris::OMLContext const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getShowMore();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getReport_229972f53f3478bc16f9c01c922764f1( ::osiris::OMLContext const & inst, ::osiris::String const & text, bool detailed ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.getReport(text, detailed);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void parseCss_be328c95aac2a0f6dd7a4cb5fc404294( ::osiris::OMLContext & inst, ::osiris::String const & cssText, bool encode ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.parseCss(cssText, encode);
    __pythreadSaver.restore();
}

static void addWarningSyntax_9da53fc2ae04286da9e6891e0b7414f9( ::osiris::OMLContext & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningSyntax();
    __pythreadSaver.restore();
}

static void addWarningMustBeInside_6fec9070ac00f7e05e29a8199ec45e48( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::osiris::String const & parentTag ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningMustBeInside(i, parentTag);
    __pythreadSaver.restore();
}

static void addWarningCantBeHere_9213c57e6adf074c58abeffd398ab4cc( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLItem > ref ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningCantBeHere(i, ref);
    __pythreadSaver.restore();
}

static void addWarningInvalidUrl_e248ef0a20a4cfde53ecfcae96681452( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::osiris::String const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningInvalidUrl(i, url);
    __pythreadSaver.restore();
}

static void addWarningInvalidParam_5426795f8b12c9b6b7163fa63806bf6e( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::osiris::String const & name ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningInvalidParam(i, name);
    __pythreadSaver.restore();
}

static boost::python::object incrementAndCheckRecursive_90b8aefbcd785849d2261742caeb126f( ::osiris::OMLContext & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.incrementAndCheckRecursive();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void decrementRecursive_1198be4b09ad3429fd48b7ccb38df965( ::osiris::OMLContext & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.decrementRecursive();
    __pythreadSaver.restore();
}

static boost::python::object generateReportTree_22a7e4f6ff9d7bb714b7cd8e23cf6ba4( ::osiris::OMLContext const & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::osiris::uint32 depth ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.generateReportTree(i, depth);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void generateItems_c8177800704073297622a0729f61b53a( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > root, ::std::wstring const & text ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.generateItems(root, text);
    __pythreadSaver.restore();
}

static void addUrl_b224d4103269dccc3ff89c5b13c732bd( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::osiris::String const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addUrl(i, url);
    __pythreadSaver.restore();
}

static boost::python::object findNotEscaped_8801b9739a6274b44b670b1f13f8c001( ::std::wstring const & text, ::std::wstring const & what, ::std::size_t posStart ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::size_t result = ::osiris::OMLContext::findNotEscaped(text, what, posStart);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object findToken_5aa83a6e49c717b3a3c33f6dffa29b6a( ::std::wstring const & text, ::std::wstring const & what, ::std::size_t posStart ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::size_t result = ::osiris::OMLContext::findToken(text, what, posStart);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object findTokens_c68a42b6614875fa54dc421433aa19fb( ::std::wstring const & text, ::std::wstring const & tokens, ::std::size_t posStart ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::size_t result = ::osiris::OMLContext::findTokens(text, tokens, posStart);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void addWarning_44d431c9ff9ec0fa1fbef0db456e70d1( ::osiris::OMLContext & inst, ::osiris::String const & msg ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarning(msg);
    __pythreadSaver.restore();
}

static void addWarningCantHaveParams_3542496e3e68748d7a6fbd8b6f9fad2c( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningCantHaveParams(i);
    __pythreadSaver.restore();
}

static void addWarningParamRequired_a8e05dc21ce8becbd9273a037c8e5aa3( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningParamRequired(i);
    __pythreadSaver.restore();
}

static void addWarningRowModeNotAllowed_aa360e130d0b6d50d911a8258d78afaa( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addWarningRowModeNotAllowed(i);
    __pythreadSaver.restore();
}

static boost::python::object checkPortalPageAvailable_39abc4c3d44437c1c12553e89dbca67f( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.checkPortalPageAvailable(i);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object closeItem_b3ef836b910934c794ee8f6d2e7fbce0( ::osiris::OMLContext & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::shared_ptr<osiris::OMLItem> result = inst.closeItem(i);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getFriendlyName_8e0a6204922e8ea341625c95ca0c010d( ::osiris::OMLContext const & inst, ::boost::shared_ptr< osiris::OMLItem > i ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.getFriendlyName(i);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void parseOml_ccbe7e577924a766bb26678e75911aec( ::osiris::OMLContext & inst, ::osiris::String const & oml ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.parseOml(oml);
    __pythreadSaver.restore();
}

static void setFull_f0dbff6ae616389da57eaf6bf803c855( ::osiris::OMLContext & inst, bool full ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setFull(full);
    __pythreadSaver.restore();
}

static void setFullUrl_1535703fed658ffab38ba5b8279d71c3( ::osiris::OMLContext & inst, ::osiris::String fullUrl ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setFullUrl(fullUrl);
    __pythreadSaver.restore();
}

static void setMode_e63ebd1a86eb75496fedd13443a7eac2( ::osiris::OMLContext & inst, ::osiris::OMLRenderMode mode ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setMode(mode);
    __pythreadSaver.restore();
}

static void setOutput_a8e8d57ca9b65e5e4d113379e9d5a456( ::osiris::OMLContext & inst, ::osiris::String const & html ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setOutput(html);
    __pythreadSaver.restore();
}

static void setRefID_f723be865cce940f8daa493198a6caf6( ::osiris::OMLContext & inst, ::osiris::String refID ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setRefID(refID);
    __pythreadSaver.restore();
}

static void setRow_fe13dde4938ad317ded1a6eb5ebc57bc( ::osiris::OMLContext & inst, bool row ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setRow(row);
    __pythreadSaver.restore();
}

static void setSecure_887de446cde82cde2a560a38f4500750( ::osiris::OMLContext & inst, bool secure ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setSecure(secure);
    __pythreadSaver.restore();
}

static void setSecureCheck_8fbc7f4397ea5ed700eb7c73c81537b3( ::osiris::OMLContext & inst, bool secure ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setSecureCheck(secure);
    __pythreadSaver.restore();
}

static void setShowMore_d145c010ff7843911477a2ddc5988bf6( ::osiris::OMLContext & inst, bool showMore ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setShowMore(showMore);
    __pythreadSaver.restore();
}

void register_OMLContext_class(){

    { //::osiris::OMLContext
        typedef ::boost::python::class_< ::osiris::OMLContext, ::boost::noncopyable > OMLContext_exposer_t;
        OMLContext_exposer_t OMLContext_exposer = OMLContext_exposer_t( "OMLContext", ::boost::python::init< ::boost::shared_ptr< osiris::IPage >, bool, bool, bool, bool, ::osiris::OMLRenderMode, ::osiris::String const &, ::osiris::String const & >(( ::boost::python::arg("page"), ::boost::python::arg("enableWarning"), ::boost::python::arg("full"), ::boost::python::arg("secure"), ::boost::python::arg("row"), ::boost::python::arg("mode"), ::boost::python::arg("refID"), ::boost::python::arg("fullUrl") )) );
        ::boost::python::scope OMLContext_scope( OMLContext_exposer );
        { //::osiris::OMLContext::getContextID
        
            typedef boost::python::object ( *getContextID_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getContextID"
                , getContextID_function_type( &getContextID_10940e9dcca6d22aa7e6310d94d68bc9 ) );
        
        }
        { //::osiris::OMLContext::getContextNextID
        
            typedef boost::python::object ( *getContextNextID_function_type )( ::osiris::OMLContext & );
            
            OMLContext_exposer.def( 
                "getContextNextID"
                , getContextNextID_function_type( &getContextNextID_f06b890872096e7775ad973236c61cdc ) );
        
        }
        { //::osiris::OMLContext::getOutput
        
            typedef boost::python::object ( *getOutput_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getOutput"
                , getOutput_function_type( &getOutput_328ed3bb2e819fdabe1fe0e998577f1f ) );
        
        }
        { //::osiris::OMLContext::getWarnings
        
            typedef boost::python::object ( *getWarnings_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getWarnings"
                , getWarnings_function_type( &getWarnings_f1b274fe98b2f6a6b9ba2d5488a857ee ) );
        
        }
        { //::osiris::OMLContext::getUrls
        
            typedef boost::python::object ( *getUrls_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getUrls"
                , getUrls_function_type( &getUrls_0355619629aee0c23b6e47102e13cb19 ) );
        
        }
        { //::osiris::OMLContext::getPage
        
            typedef boost::python::object ( *getPage_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getPage"
                , getPage_function_type( &getPage_9c2a73f39cdc92b9b3d6caf1fea14991 ) );
        
        }
        { //::osiris::OMLContext::getPortalPage
        
            typedef boost::python::object ( *getPortalPage_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getPortalPage"
                , getPortalPage_function_type( &getPortalPage_7781a21f490d311c56ca9fbd428b59a0 ) );
        
        }
        { //::osiris::OMLContext::getFull
        
            typedef boost::python::object ( *getFull_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getFull"
                , getFull_function_type( &getFull_6ca92048d44984b4987349d5a0451f2d ) );
        
        }
        { //::osiris::OMLContext::getSecure
        
            typedef boost::python::object ( *getSecure_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getSecure"
                , getSecure_function_type( &getSecure_f963c47e5a9b4c902b7a51115342643b ) );
        
        }
        { //::osiris::OMLContext::getRow
        
            typedef boost::python::object ( *getRow_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getRow"
                , getRow_function_type( &getRow_a019f066766630578bb69f04b971b4e6 ) );
        
        }
        { //::osiris::OMLContext::getMode
        
            typedef boost::python::object ( *getMode_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getMode"
                , getMode_function_type( &getMode_689736fc08256318d4994443f268a1c3 ) );
        
        }
        { //::osiris::OMLContext::getRefID
        
            typedef boost::python::object ( *getRefID_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getRefID"
                , getRefID_function_type( &getRefID_a5cc5a0a63bc377d24074ff35fe74ca3 ) );
        
        }
        { //::osiris::OMLContext::getFullUrl
        
            typedef boost::python::object ( *getFullUrl_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getFullUrl"
                , getFullUrl_function_type( &getFullUrl_6fed83d933823aa0a9aa79cf4be5d8aa ) );
        
        }
        { //::osiris::OMLContext::getSecureCheck
        
            typedef boost::python::object ( *getSecureCheck_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getSecureCheck"
                , getSecureCheck_function_type( &getSecureCheck_b3489371e860acb126d28524f41006b1 ) );
        
        }
        { //::osiris::OMLContext::getShowMore
        
            typedef boost::python::object ( *getShowMore_function_type )( ::osiris::OMLContext const & );
            
            OMLContext_exposer.def( 
                "getShowMore"
                , getShowMore_function_type( &getShowMore_9599cdf0c89807802b1bd5552639783f ) );
        
        }
        { //::osiris::OMLContext::getReport
        
            typedef boost::python::object ( *getReport_function_type )( ::osiris::OMLContext const &,::osiris::String const &,bool );
            
            OMLContext_exposer.def( 
                "getReport"
                , getReport_function_type( &getReport_229972f53f3478bc16f9c01c922764f1 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("text"), ::boost::python::arg("detailed") ) );
        
        }
        { //::osiris::OMLContext::parseCss
        
            typedef void ( *parseCss_function_type )( ::osiris::OMLContext &,::osiris::String const &,bool );
            
            OMLContext_exposer.def( 
                "parseCss"
                , parseCss_function_type( &parseCss_be328c95aac2a0f6dd7a4cb5fc404294 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("cssText"), ::boost::python::arg("encode") ) );
        
        }
        { //::osiris::OMLContext::addWarningSyntax
        
            typedef void ( *addWarningSyntax_function_type )( ::osiris::OMLContext & );
            
            OMLContext_exposer.def( 
                "addWarningSyntax"
                , addWarningSyntax_function_type( &addWarningSyntax_9da53fc2ae04286da9e6891e0b7414f9 ) );
        
        }
        { //::osiris::OMLContext::addWarningMustBeInside
        
            typedef void ( *addWarningMustBeInside_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "addWarningMustBeInside"
                , addWarningMustBeInside_function_type( &addWarningMustBeInside_6fec9070ac00f7e05e29a8199ec45e48 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("parentTag") ) );
        
        }
        { //::osiris::OMLContext::addWarningCantBeHere
        
            typedef void ( *addWarningCantBeHere_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "addWarningCantBeHere"
                , addWarningCantBeHere_function_type( &addWarningCantBeHere_9213c57e6adf074c58abeffd398ab4cc )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("ref") ) );
        
        }
        { //::osiris::OMLContext::addWarningInvalidUrl
        
            typedef void ( *addWarningInvalidUrl_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "addWarningInvalidUrl"
                , addWarningInvalidUrl_function_type( &addWarningInvalidUrl_e248ef0a20a4cfde53ecfcae96681452 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::OMLContext::addWarningInvalidParam
        
            typedef void ( *addWarningInvalidParam_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "addWarningInvalidParam"
                , addWarningInvalidParam_function_type( &addWarningInvalidParam_5426795f8b12c9b6b7163fa63806bf6e )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::OMLContext::incrementAndCheckRecursive
        
            typedef boost::python::object ( *incrementAndCheckRecursive_function_type )( ::osiris::OMLContext & );
            
            OMLContext_exposer.def( 
                "incrementAndCheckRecursive"
                , incrementAndCheckRecursive_function_type( &incrementAndCheckRecursive_90b8aefbcd785849d2261742caeb126f ) );
        
        }
        { //::osiris::OMLContext::decrementRecursive
        
            typedef void ( *decrementRecursive_function_type )( ::osiris::OMLContext & );
            
            OMLContext_exposer.def( 
                "decrementRecursive"
                , decrementRecursive_function_type( &decrementRecursive_1198be4b09ad3429fd48b7ccb38df965 ) );
        
        }
        { //::osiris::OMLContext::generateReportTree
        
            typedef boost::python::object ( *generateReportTree_function_type )( ::osiris::OMLContext const &,::boost::shared_ptr<osiris::OMLItem>,::osiris::uint32 );
            
            OMLContext_exposer.def( 
                "generateReportTree"
                , generateReportTree_function_type( &generateReportTree_22a7e4f6ff9d7bb714b7cd8e23cf6ba4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("depth") ) );
        
        }
        { //::osiris::OMLContext::generateItems
        
            typedef void ( *generateItems_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::std::wstring const & );
            
            OMLContext_exposer.def( 
                "generateItems"
                , generateItems_function_type( &generateItems_c8177800704073297622a0729f61b53a )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("root"), ::boost::python::arg("text") ) );
        
        }
        { //::osiris::OMLContext::addUrl
        
            typedef void ( *addUrl_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem>,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "addUrl"
                , addUrl_function_type( &addUrl_b224d4103269dccc3ff89c5b13c732bd )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::OMLContext::findNotEscaped
        
            typedef boost::python::object ( *findNotEscaped_function_type )( ::std::wstring const &,::std::wstring const &,::std::size_t );
            
            OMLContext_exposer.def( 
                "findNotEscaped"
                , findNotEscaped_function_type( &findNotEscaped_8801b9739a6274b44b670b1f13f8c001 )
                , ( ::boost::python::arg("text"), ::boost::python::arg("what"), ::boost::python::arg("posStart") ) );
        
        }
        { //::osiris::OMLContext::findToken
        
            typedef boost::python::object ( *findToken_function_type )( ::std::wstring const &,::std::wstring const &,::std::size_t );
            
            OMLContext_exposer.def( 
                "findToken"
                , findToken_function_type( &findToken_5aa83a6e49c717b3a3c33f6dffa29b6a )
                , ( ::boost::python::arg("text"), ::boost::python::arg("what"), ::boost::python::arg("posStart") ) );
        
        }
        { //::osiris::OMLContext::findTokens
        
            typedef boost::python::object ( *findTokens_function_type )( ::std::wstring const &,::std::wstring const &,::std::size_t );
            
            OMLContext_exposer.def( 
                "findTokens"
                , findTokens_function_type( &findTokens_c68a42b6614875fa54dc421433aa19fb )
                , ( ::boost::python::arg("text"), ::boost::python::arg("tokens"), ::boost::python::arg("posStart") ) );
        
        }
        { //::osiris::OMLContext::addWarning
        
            typedef void ( *addWarning_function_type )( ::osiris::OMLContext &,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "addWarning"
                , addWarning_function_type( &addWarning_44d431c9ff9ec0fa1fbef0db456e70d1 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("msg") ) );
        
        }
        { //::osiris::OMLContext::addWarningCantHaveParams
        
            typedef void ( *addWarningCantHaveParams_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "addWarningCantHaveParams"
                , addWarningCantHaveParams_function_type( &addWarningCantHaveParams_3542496e3e68748d7a6fbd8b6f9fad2c )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::addWarningParamRequired
        
            typedef void ( *addWarningParamRequired_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "addWarningParamRequired"
                , addWarningParamRequired_function_type( &addWarningParamRequired_a8e05dc21ce8becbd9273a037c8e5aa3 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::addWarningRowModeNotAllowed
        
            typedef void ( *addWarningRowModeNotAllowed_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "addWarningRowModeNotAllowed"
                , addWarningRowModeNotAllowed_function_type( &addWarningRowModeNotAllowed_aa360e130d0b6d50d911a8258d78afaa )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::checkPortalPageAvailable
        
            typedef boost::python::object ( *checkPortalPageAvailable_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "checkPortalPageAvailable"
                , checkPortalPageAvailable_function_type( &checkPortalPageAvailable_39abc4c3d44437c1c12553e89dbca67f )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::closeItem
        
            typedef boost::python::object ( *closeItem_function_type )( ::osiris::OMLContext &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "closeItem"
                , closeItem_function_type( &closeItem_b3ef836b910934c794ee8f6d2e7fbce0 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::getFriendlyName
        
            typedef boost::python::object ( *getFriendlyName_function_type )( ::osiris::OMLContext const &,::boost::shared_ptr<osiris::OMLItem> );
            
            OMLContext_exposer.def( 
                "getFriendlyName"
                , getFriendlyName_function_type( &getFriendlyName_8e0a6204922e8ea341625c95ca0c010d )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i") ) );
        
        }
        { //::osiris::OMLContext::parseOml
        
            typedef void ( *parseOml_function_type )( ::osiris::OMLContext &,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "parseOml"
                , parseOml_function_type( &parseOml_ccbe7e577924a766bb26678e75911aec )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("oml") ) );
        
        }
        { //::osiris::OMLContext::setFull
        
            typedef void ( *setFull_function_type )( ::osiris::OMLContext &,bool );
            
            OMLContext_exposer.def( 
                "setFull"
                , setFull_function_type( &setFull_f0dbff6ae616389da57eaf6bf803c855 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("full") ) );
        
        }
        { //::osiris::OMLContext::setFullUrl
        
            typedef void ( *setFullUrl_function_type )( ::osiris::OMLContext &,::osiris::String );
            
            OMLContext_exposer.def( 
                "setFullUrl"
                , setFullUrl_function_type( &setFullUrl_1535703fed658ffab38ba5b8279d71c3 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fullUrl") ) );
        
        }
        { //::osiris::OMLContext::setMode
        
            typedef void ( *setMode_function_type )( ::osiris::OMLContext &,::osiris::OMLRenderMode );
            
            OMLContext_exposer.def( 
                "setMode"
                , setMode_function_type( &setMode_e63ebd1a86eb75496fedd13443a7eac2 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("mode") ) );
        
        }
        { //::osiris::OMLContext::setOutput
        
            typedef void ( *setOutput_function_type )( ::osiris::OMLContext &,::osiris::String const & );
            
            OMLContext_exposer.def( 
                "setOutput"
                , setOutput_function_type( &setOutput_a8e8d57ca9b65e5e4d113379e9d5a456 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) );
        
        }
        { //::osiris::OMLContext::setRefID
        
            typedef void ( *setRefID_function_type )( ::osiris::OMLContext &,::osiris::String );
            
            OMLContext_exposer.def( 
                "setRefID"
                , setRefID_function_type( &setRefID_f723be865cce940f8daa493198a6caf6 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("refID") ) );
        
        }
        { //::osiris::OMLContext::setRow
        
            typedef void ( *setRow_function_type )( ::osiris::OMLContext &,bool );
            
            OMLContext_exposer.def( 
                "setRow"
                , setRow_function_type( &setRow_fe13dde4938ad317ded1a6eb5ebc57bc )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("row") ) );
        
        }
        { //::osiris::OMLContext::setSecure
        
            typedef void ( *setSecure_function_type )( ::osiris::OMLContext &,bool );
            
            OMLContext_exposer.def( 
                "setSecure"
                , setSecure_function_type( &setSecure_887de446cde82cde2a560a38f4500750 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("secure") ) );
        
        }
        { //::osiris::OMLContext::setSecureCheck
        
            typedef void ( *setSecureCheck_function_type )( ::osiris::OMLContext &,bool );
            
            OMLContext_exposer.def( 
                "setSecureCheck"
                , setSecureCheck_function_type( &setSecureCheck_8fbc7f4397ea5ed700eb7c73c81537b3 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("secure") ) );
        
        }
        { //::osiris::OMLContext::setShowMore
        
            typedef void ( *setShowMore_function_type )( ::osiris::OMLContext &,bool );
            
            OMLContext_exposer.def( 
                "setShowMore"
                , setShowMore_function_type( &setShowMore_d145c010ff7843911477a2ddc5988bf6 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("showMore") ) );
        
        }
        OMLContext_exposer.staticmethod( "findNotEscaped" );
        OMLContext_exposer.staticmethod( "findToken" );
        OMLContext_exposer.staticmethod( "findTokens" );
        { //property "output"[fget=::osiris::OMLContext::getOutput, fset=::osiris::OMLContext::setOutput]
        
            typedef ::osiris::String const & ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( ::osiris::String const & ) ;
            
            OMLContext_exposer.add_property( 
                "output"
                , ::boost::python::make_function( 
                      fget( &::osiris::OMLContext::getOutput )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::OMLContext::setOutput )
                , "get\\set property, built on top of \"osiris::String const & osiris::OMLContext::getOutput() const [member function]\" and \"void osiris::OMLContext::setOutput(osiris::String const & html) [member function]\"" );
        
        }
        { //property "full"[fget=::osiris::OMLContext::getFull, fset=::osiris::OMLContext::setFull]
        
            typedef bool ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( bool ) ;
            
            OMLContext_exposer.add_property( 
                "full"
                , fget( &::osiris::OMLContext::getFull )
                , fset( &::osiris::OMLContext::setFull )
                , "get\\set property, built on top of \"bool osiris::OMLContext::getFull() const [member function]\" and \"void osiris::OMLContext::setFull(bool full) [member function]\"" );
        
        }
        { //property "secure"[fget=::osiris::OMLContext::getSecure, fset=::osiris::OMLContext::setSecure]
        
            typedef bool ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( bool ) ;
            
            OMLContext_exposer.add_property( 
                "secure"
                , fget( &::osiris::OMLContext::getSecure )
                , fset( &::osiris::OMLContext::setSecure )
                , "get\\set property, built on top of \"bool osiris::OMLContext::getSecure() const [member function]\" and \"void osiris::OMLContext::setSecure(bool secure) [member function]\"" );
        
        }
        { //property "row"[fget=::osiris::OMLContext::getRow, fset=::osiris::OMLContext::setRow]
        
            typedef bool ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( bool ) ;
            
            OMLContext_exposer.add_property( 
                "row"
                , fget( &::osiris::OMLContext::getRow )
                , fset( &::osiris::OMLContext::setRow )
                , "get\\set property, built on top of \"bool osiris::OMLContext::getRow() const [member function]\" and \"void osiris::OMLContext::setRow(bool row) [member function]\"" );
        
        }
        { //property "mode"[fget=::osiris::OMLContext::getMode, fset=::osiris::OMLContext::setMode]
        
            typedef ::osiris::OMLRenderMode ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( ::osiris::OMLRenderMode ) ;
            
            OMLContext_exposer.add_property( 
                "mode"
                , fget( &::osiris::OMLContext::getMode )
                , fset( &::osiris::OMLContext::setMode )
                , "get\\set property, built on top of \"osiris::OMLRenderMode osiris::OMLContext::getMode() const [member function]\" and \"void osiris::OMLContext::setMode(osiris::OMLRenderMode mode) [member function]\"" );
        
        }
        { //property "refID"[fget=::osiris::OMLContext::getRefID, fset=::osiris::OMLContext::setRefID]
        
            typedef ::osiris::String ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( ::osiris::String ) ;
            
            OMLContext_exposer.add_property( 
                "refID"
                , fget( &::osiris::OMLContext::getRefID )
                , fset( &::osiris::OMLContext::setRefID )
                , "get\\set property, built on top of \"osiris::String osiris::OMLContext::getRefID() const [member function]\" and \"void osiris::OMLContext::setRefID(osiris::String refID) [member function]\"" );
        
        }
        { //property "fullUrl"[fget=::osiris::OMLContext::getFullUrl, fset=::osiris::OMLContext::setFullUrl]
        
            typedef ::osiris::String ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( ::osiris::String ) ;
            
            OMLContext_exposer.add_property( 
                "fullUrl"
                , fget( &::osiris::OMLContext::getFullUrl )
                , fset( &::osiris::OMLContext::setFullUrl )
                , "get\\set property, built on top of \"osiris::String osiris::OMLContext::getFullUrl() const [member function]\" and \"void osiris::OMLContext::setFullUrl(osiris::String fullUrl) [member function]\"" );
        
        }
        { //property "secureCheck"[fget=::osiris::OMLContext::getSecureCheck, fset=::osiris::OMLContext::setSecureCheck]
        
            typedef bool ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( bool ) ;
            
            OMLContext_exposer.add_property( 
                "secureCheck"
                , fget( &::osiris::OMLContext::getSecureCheck )
                , fset( &::osiris::OMLContext::setSecureCheck )
                , "get\\set property, built on top of \"bool osiris::OMLContext::getSecureCheck() const [member function]\" and \"void osiris::OMLContext::setSecureCheck(bool secure) [member function]\"" );
        
        }
        { //property "showMore"[fget=::osiris::OMLContext::getShowMore, fset=::osiris::OMLContext::setShowMore]
        
            typedef bool ( ::osiris::OMLContext::*fget )(  ) const;
            typedef void ( ::osiris::OMLContext::*fset )( bool ) ;
            
            OMLContext_exposer.add_property( 
                "showMore"
                , fget( &::osiris::OMLContext::getShowMore )
                , fset( &::osiris::OMLContext::setShowMore )
                , "get\\set property, built on top of \"bool osiris::OMLContext::getShowMore() const [member function]\" and \"void osiris::OMLContext::setShowMore(bool showMore) [member function]\"" );
        
        }
        { //property "contextID"[fget=::osiris::OMLContext::getContextID]
        
            typedef ::osiris::String const ( ::osiris::OMLContext::*fget )(  ) const;
            
            OMLContext_exposer.add_property( 
                "contextID"
                , fget( &::osiris::OMLContext::getContextID )
                , "get property, built on top of \"osiris::String const osiris::OMLContext::getContextID() const [member function]\"" );
        
        }
        { //property "warnings"[fget=::osiris::OMLContext::getWarnings]
        
            typedef ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & ( ::osiris::OMLContext::*fget )(  ) const;
            
            OMLContext_exposer.add_property( 
                "warnings"
                , ::boost::python::make_function( 
                      fget( &::osiris::OMLContext::getWarnings )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & osiris::OMLContext::getWarnings() const [member function]\"" );
        
        }
        { //property "urls"[fget=::osiris::OMLContext::getUrls]
        
            typedef ::std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & ( ::osiris::OMLContext::*fget )(  ) const;
            
            OMLContext_exposer.add_property( 
                "urls"
                , ::boost::python::make_function( 
                      fget( &::osiris::OMLContext::getUrls )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::list<osiris::String, osiris::StdAllocator<osiris::String, osiris::SysAllocator<osiris::String> > > const & osiris::OMLContext::getUrls() const [member function]\"" );
        
        }
        { //property "page"[fget=::osiris::OMLContext::getPage]
        
            typedef ::boost::shared_ptr<osiris::IPage> ( ::osiris::OMLContext::*fget )(  ) const;
            
            OMLContext_exposer.add_property( 
                "page"
                , fget( &::osiris::OMLContext::getPage )
                , "get property, built on top of \"boost::shared_ptr<osiris::IPage> osiris::OMLContext::getPage() const [member function]\"" );
        
        }
        { //property "portalPage"[fget=::osiris::OMLContext::getPortalPage]
        
            typedef ::boost::shared_ptr<osiris::IPortalPage> ( ::osiris::OMLContext::*fget )(  ) const;
            
            OMLContext_exposer.add_property( 
                "portalPage"
                , fget( &::osiris::OMLContext::getPortalPage )
                , "get property, built on top of \"boost::shared_ptr<osiris::IPortalPage> osiris::OMLContext::getPortalPage() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::OMLContext > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::OMLContext >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::OMLContext >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::OMLContext > > >();
    }

}
