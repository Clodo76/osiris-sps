// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmltab.h"
#include "ideportalcontrol.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "htmltab.pypp.hpp"

namespace bp = boost::python;

struct HtmlTab_wrapper : ::osiris::HtmlTab, ::osiris::PythonWrapper< ::osiris::HtmlTab > {

    HtmlTab_wrapper( )
    : ::osiris::HtmlTab( )
      , ::osiris::PythonWrapper< ::osiris::HtmlTab >(){
        // null constructor
    
    }

    static boost::python::object getType( ::osiris::HtmlTab const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlTab::Type result = inst.getType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCssTable( ::osiris::HtmlTab const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getCssTable();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getCssLink( ::osiris::HtmlTab const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getCssLink();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getCssLinkHover( ::osiris::HtmlTab const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getCssLinkHover();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static void addPage( ::osiris::HtmlTab & inst, ::boost::shared_ptr< osiris::IHtmlControl > page, ::osiris::String const & title ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addPage(page, title);
        __pythreadSaver.restore();
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlTab::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlTab::onPreRender( );
    }

    static void setCssLink( ::osiris::HtmlTab & inst, ::osiris::String const & cssLink ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCssLink(cssLink);
        __pythreadSaver.restore();
    }

    static void setCssLinkHover( ::osiris::HtmlTab & inst, ::osiris::String const & cssLinkHover ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCssLinkHover(cssLinkHover);
        __pythreadSaver.restore();
    }

    static void setCssTable( ::osiris::HtmlTab & inst, ::osiris::String const & cssTable ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCssTable(cssTable);
        __pythreadSaver.restore();
    }

    static void setType( ::osiris::HtmlTab & inst, ::osiris::HtmlTab::Type type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setType(type);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(osiris::null) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::IHtmlControl::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHtmlControl::getSession( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onInit( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlDiv::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlDiv::onRender( boost::ref(writer) );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_HtmlTab_class(){

    { //::osiris::HtmlTab
        typedef ::boost::python::class_< HtmlTab_wrapper, ::boost::python::bases< ::osiris::HtmlDiv >, ::boost::noncopyable > HtmlTab_exposer_t;
        HtmlTab_exposer_t HtmlTab_exposer = HtmlTab_exposer_t( "HtmlTab", ::boost::python::no_init );
        ::boost::python::scope HtmlTab_scope( HtmlTab_exposer );
        ::boost::python::enum_< ::osiris::HtmlTab::Type>("Type")
            .value("ttLeft", ::osiris::HtmlTab::ttLeft)
            .value("ttTop", ::osiris::HtmlTab::ttTop)
            .value("ttRight", ::osiris::HtmlTab::ttRight)
            .value("ttBottom", ::osiris::HtmlTab::ttBottom)
            .export_values()
            ;
        HtmlTab_exposer.def( ::boost::python::init< >() );
        { //::osiris::HtmlTab::getType
        
            typedef boost::python::object ( *getType_function_type )( ::osiris::HtmlTab const & );
            
            HtmlTab_exposer.def( 
                "getType"
                , getType_function_type( &HtmlTab_wrapper::getType ) );
        
        }
        { //::osiris::HtmlTab::getCssTable
        
            typedef boost::python::object ( *getCssTable_function_type )( ::osiris::HtmlTab const & );
            
            HtmlTab_exposer.def( 
                "getCssTable"
                , getCssTable_function_type( &HtmlTab_wrapper::getCssTable ) );
        
        }
        { //::osiris::HtmlTab::getCssLink
        
            typedef boost::python::object ( *getCssLink_function_type )( ::osiris::HtmlTab const & );
            
            HtmlTab_exposer.def( 
                "getCssLink"
                , getCssLink_function_type( &HtmlTab_wrapper::getCssLink ) );
        
        }
        { //::osiris::HtmlTab::getCssLinkHover
        
            typedef boost::python::object ( *getCssLinkHover_function_type )( ::osiris::HtmlTab const & );
            
            HtmlTab_exposer.def( 
                "getCssLinkHover"
                , getCssLinkHover_function_type( &HtmlTab_wrapper::getCssLinkHover ) );
        
        }
        { //::osiris::HtmlTab::addPage
        
            typedef void ( *addPage_function_type )( ::osiris::HtmlTab &,::boost::shared_ptr<osiris::IHtmlControl>,::osiris::String const & );
            
            HtmlTab_exposer.def( 
                "addPage"
                , addPage_function_type( &HtmlTab_wrapper::addPage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("page"), ::boost::python::arg("title") ) );
        
        }
        { //::osiris::HtmlTab::onPreRender
        
            typedef void ( HtmlTab_wrapper::*onPreRender_function_type )(  ) ;
            
            HtmlTab_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &HtmlTab_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::HtmlTab::setCssLink
        
            typedef void ( *setCssLink_function_type )( ::osiris::HtmlTab &,::osiris::String const & );
            
            HtmlTab_exposer.def( 
                "setCssLink"
                , setCssLink_function_type( &HtmlTab_wrapper::setCssLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("cssLink") ) );
        
        }
        { //::osiris::HtmlTab::setCssLinkHover
        
            typedef void ( *setCssLinkHover_function_type )( ::osiris::HtmlTab &,::osiris::String const & );
            
            HtmlTab_exposer.def( 
                "setCssLinkHover"
                , setCssLinkHover_function_type( &HtmlTab_wrapper::setCssLinkHover )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("cssLinkHover") ) );
        
        }
        { //::osiris::HtmlTab::setCssTable
        
            typedef void ( *setCssTable_function_type )( ::osiris::HtmlTab &,::osiris::String const & );
            
            HtmlTab_exposer.def( 
                "setCssTable"
                , setCssTable_function_type( &HtmlTab_wrapper::setCssTable )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("cssTable") ) );
        
        }
        { //::osiris::HtmlTab::setType
        
            typedef void ( *setType_function_type )( ::osiris::HtmlTab &,::osiris::HtmlTab::Type );
            
            HtmlTab_exposer.def( 
                "setType"
                , setType_function_type( &HtmlTab_wrapper::setType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( HtmlTab_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            HtmlTab_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &HtmlTab_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( HtmlTab_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            HtmlTab_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &HtmlTab_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::IHtmlControl::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( HtmlTab_wrapper::*default_getSession_function_type )(  ) const;
            
            HtmlTab_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::IHtmlControl::getSession)
                , default_getSession_function_type(&HtmlTab_wrapper::default_getSession) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( HtmlTab_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            HtmlTab_exposer.def( 
                "onEvent"
                , onEvent_function_type( &HtmlTab_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::onInit
        
            typedef void ( HtmlTab_wrapper::*onInit_function_type )(  ) ;
            
            HtmlTab_exposer.def( 
                "onInit"
                , onInit_function_type( &HtmlTab_wrapper::default_onInit ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( HtmlTab_wrapper::*onLoad_function_type )(  ) ;
            
            HtmlTab_exposer.def( 
                "onLoad"
                , onLoad_function_type( &HtmlTab_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( HtmlTab_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            HtmlTab_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &HtmlTab_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::HtmlDiv::onRender
        
            typedef void ( HtmlTab_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTab_exposer.def( 
                "onRender"
                , onRender_function_type( &HtmlTab_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( HtmlTab_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlTab_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &HtmlTab_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlTab_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTab_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&HtmlTab_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlTab_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTab_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&HtmlTab_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( HtmlTab_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlTab_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &HtmlTab_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "type"[fget=::osiris::HtmlTab::getType, fset=::osiris::HtmlTab::setType]
        
            typedef ::osiris::HtmlTab::Type ( ::osiris::HtmlTab::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTab::*fset )( ::osiris::HtmlTab::Type ) ;
            
            HtmlTab_exposer.add_property( 
                "type"
                , fget( &::osiris::HtmlTab::getType )
                , fset( &::osiris::HtmlTab::setType )
                , "get\\set property, built on top of \"osiris::HtmlTab::Type osiris::HtmlTab::getType() const [member function]\" and \"void osiris::HtmlTab::setType(osiris::HtmlTab::Type type) [member function]\"" );
        
        }
        { //property "cssTable"[fget=::osiris::HtmlTab::getCssTable, fset=::osiris::HtmlTab::setCssTable]
        
            typedef ::osiris::String const & ( ::osiris::HtmlTab::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTab::*fset )( ::osiris::String const & ) ;
            
            HtmlTab_exposer.add_property( 
                "cssTable"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlTab::getCssTable )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlTab::setCssTable )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlTab::getCssTable() const [member function]\" and \"void osiris::HtmlTab::setCssTable(osiris::String const & cssTable) [member function]\"" );
        
        }
        { //property "cssLink"[fget=::osiris::HtmlTab::getCssLink, fset=::osiris::HtmlTab::setCssLink]
        
            typedef ::osiris::String const & ( ::osiris::HtmlTab::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTab::*fset )( ::osiris::String const & ) ;
            
            HtmlTab_exposer.add_property( 
                "cssLink"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlTab::getCssLink )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlTab::setCssLink )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlTab::getCssLink() const [member function]\" and \"void osiris::HtmlTab::setCssLink(osiris::String const & cssLink) [member function]\"" );
        
        }
        { //property "cssLinkHover"[fget=::osiris::HtmlTab::getCssLinkHover, fset=::osiris::HtmlTab::setCssLinkHover]
        
            typedef ::osiris::String const & ( ::osiris::HtmlTab::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTab::*fset )( ::osiris::String const & ) ;
            
            HtmlTab_exposer.add_property( 
                "cssLinkHover"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlTab::getCssLinkHover )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlTab::setCssLinkHover )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlTab::getCssLinkHover() const [member function]\" and \"void osiris::HtmlTab::setCssLinkHover(osiris::String const & cssLinkHover) [member function]\"" );
        
        }
    }

}
