// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "datetime.h"
#include "datetime.pypp.hpp"

namespace bp = boost::python;

static void applyTimeOffset_fe91ee2360f76a5a35e1a3b7aa461f94( ::osiris::DateTime & inst, ::osiris::int32 const & timeOffset, ::osiris::int32 const & timeDST ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.applyTimeOffset(timeOffset, timeDST);
    __pythreadSaver.restore();
}

static void clear_294e7c192b9171ca5ec57c9b0eaa48c3( ::osiris::DateTime & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.clear();
    __pythreadSaver.restore();
}

static boost::python::object getDay_47d034d90236e820bd4d3e02cc9c7246( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getDay();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getDayOfWeek_45326b3c7857da14d50a0eec8ff2de61( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getDayOfWeek();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getHours_0a313718a47dd892907930c3ea1c9a92( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getHours();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getMinutes_74c5a29a5f94e873b64c34220b37c947( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getMinutes();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getMonth_333f04154daa90c5490e321d38a2a107( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getMonth();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getSeconds_f17b268318e9f7709017fada3bac3fef( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getSeconds();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getYear_070d3a22283a4a4f27f3751a5a68766e( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getYear();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isNull_d868876cb230eae7ec88b5c673d195ac( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isNull();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isValid_665aaf3c217043ad2648b494d586d404( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isValid();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object now_d2f451fd3062aa8e8e4316e8eadd3127(  ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::DateTime result = ::osiris::DateTime::now();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void setDate_5e16833fecd83bf4556bfebd323e38ed( ::osiris::DateTime & inst, ::osiris::uint32 year, ::osiris::uint32 month, ::osiris::uint32 day ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setDate(year, month, day);
    __pythreadSaver.restore();
}

static void setTime_07c736742b21a4a5048ace88e4aad8de( ::osiris::DateTime & inst, ::osiris::uint32 hour, ::osiris::uint32 minutes, ::osiris::uint32 seconds ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setTime(hour, minutes, seconds);
    __pythreadSaver.restore();
}

static boost::python::object toPosixTime_b5c0f22c52c3722dd0b573feacf62a33( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::posix_time::ptime result = inst.toPosixTime();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toString_b38706616453fa68e5b4745984f08e1e( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.toString();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toTime_t_353e0636d79d4c24287967c7c58dce67( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::time_t result = inst.toTime_t();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toTm_10dbff7ee28e446400d147dc6fc2e5db( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::tm result = inst.toTm();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toUnix_00fb7abf7a4c4734264873ada7b5beab( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.toUnix();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toXML_238b43a8242d0043dc06a554822113ad( ::osiris::DateTime const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.toXML();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromPosixTime_11d91963d4a971722cb6563b39518dbd( ::osiris::DateTime & inst, ::boost::posix_time::ptime const & time ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromPosixTime(time);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromString_2e084c315d531b6ca5f426d4a293afa4( ::osiris::DateTime & inst, ::osiris::String const & str ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromString(str);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromTime_t_ec8b8879ae1e1fb4afa297d029db62d2( ::osiris::DateTime & inst, ::time_t const & t ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromTime_t(t);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromTm_212dd811a091e65d1947617856e6342f( ::osiris::DateTime & inst, ::tm const & dt ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromTm(dt);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromUnix_341b5cc1aae6b40b23f9debccd7e33b7( ::osiris::DateTime & inst, ::osiris::uint32 const & unix_time ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromUnix(unix_time);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromXML_bec340f5b6c48eb77a17a7b67c5c610e( ::osiris::DateTime & inst, ::osiris::String const & str ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromXML(str);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void setDay_3c24d56542a358620b0cddb772ab4385( ::osiris::DateTime & inst, ::osiris::uint32 day ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setDay(day);
    __pythreadSaver.restore();
}

static void setHours_d970bf8d3656509c845efa167c80e868( ::osiris::DateTime & inst, ::osiris::uint32 hours ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setHours(hours);
    __pythreadSaver.restore();
}

static void setMinutes_bf351aaf0e8a5522401e5e0bbd2853ac( ::osiris::DateTime & inst, ::osiris::uint32 minutes ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setMinutes(minutes);
    __pythreadSaver.restore();
}

static void setMonth_21ae77a3a150790ae5d5e259eade1ca0( ::osiris::DateTime & inst, ::osiris::uint32 month ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setMonth(month);
    __pythreadSaver.restore();
}

static void setSeconds_96da0df837ce3e40ab1454ab146e9bb8( ::osiris::DateTime & inst, ::osiris::uint32 seconds ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setSeconds(seconds);
    __pythreadSaver.restore();
}

static void setYear_446ce97394577b8c8d328ec547d8210f( ::osiris::DateTime & inst, ::osiris::uint32 year ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setYear(year);
    __pythreadSaver.restore();
}

void register_DateTime_class(){

    { //::osiris::DateTime
        typedef ::boost::python::class_< ::osiris::DateTime > DateTime_exposer_t;
        DateTime_exposer_t DateTime_exposer = DateTime_exposer_t( "DateTime", ::boost::python::init< >() );
        ::boost::python::scope DateTime_scope( DateTime_exposer );
        ::boost::python::enum_< ::osiris::DateTime::DateTimePattern>("DateTimePattern")
            .value("dpLongDatePattern", ::osiris::DateTime::dpLongDatePattern)
            .value("dpShortDatePattern", ::osiris::DateTime::dpShortDatePattern)
            .value("dpLongTimePattern", ::osiris::DateTime::dpLongTimePattern)
            .value("dpShortTimePattern", ::osiris::DateTime::dpShortTimePattern)
            .value("dpLongDateTimePattern", ::osiris::DateTime::dpLongDateTimePattern)
            .value("dpShortDateTimePattern", ::osiris::DateTime::dpShortDateTimePattern)
            .value("dpUserFriendly", ::osiris::DateTime::dpUserFriendly)
            .value("dpRFC822", ::osiris::DateTime::dpRFC822)
            .export_values()
            ;
        DateTime_exposer.def( ::boost::python::init< ::osiris::uint32, ::osiris::uint32, ::osiris::uint32, ::boost::python::optional< ::osiris::uint32, ::osiris::uint32, ::osiris::uint32 > >(( ::boost::python::arg("year"), ::boost::python::arg("month"), ::boost::python::arg("day"), ::boost::python::arg("hour")=(::osiris::uint32)(0), ::boost::python::arg("minutes")=(::osiris::uint32)(0), ::boost::python::arg("seconds")=(::osiris::uint32)(0) )) );
        DateTime_exposer.def( ::boost::python::init< ::osiris::DateTime const & >(( ::boost::python::arg("dt") )) );
        DateTime_exposer.def( ::boost::python::init< ::boost::posix_time::ptime const & >(( ::boost::python::arg("pt") )) );
        ::boost::python::implicitly_convertible< ::boost::posix_time::ptime const &, ::osiris::DateTime >();
        DateTime_exposer.def( ::boost::python::init< ::osiris::String const & >(( ::boost::python::arg("str") )) );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::DateTime >();
        DateTime_exposer.def( ::boost::python::init< ::osiris::uint32 const & >(( ::boost::python::arg("unix_time") )) );
        ::boost::python::implicitly_convertible< ::osiris::uint32 const &, ::osiris::DateTime >();
        { //::osiris::DateTime::applyTimeOffset
        
            typedef void ( *applyTimeOffset_function_type )( ::osiris::DateTime &,::osiris::int32 const &,::osiris::int32 const & );
            
            DateTime_exposer.def( 
                "applyTimeOffset"
                , applyTimeOffset_function_type( &applyTimeOffset_fe91ee2360f76a5a35e1a3b7aa461f94 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("timeOffset"), ::boost::python::arg("timeDST") ) );
        
        }
        { //::osiris::DateTime::clear
        
            typedef void ( *clear_function_type )( ::osiris::DateTime & );
            
            DateTime_exposer.def( 
                "clear"
                , clear_function_type( &clear_294e7c192b9171ca5ec57c9b0eaa48c3 ) );
        
        }
        { //::osiris::DateTime::getDay
        
            typedef boost::python::object ( *getDay_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getDay"
                , getDay_function_type( &getDay_47d034d90236e820bd4d3e02cc9c7246 ) );
        
        }
        { //::osiris::DateTime::getDayOfWeek
        
            typedef boost::python::object ( *getDayOfWeek_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getDayOfWeek"
                , getDayOfWeek_function_type( &getDayOfWeek_45326b3c7857da14d50a0eec8ff2de61 ) );
        
        }
        { //::osiris::DateTime::getHours
        
            typedef boost::python::object ( *getHours_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getHours"
                , getHours_function_type( &getHours_0a313718a47dd892907930c3ea1c9a92 ) );
        
        }
        { //::osiris::DateTime::getMinutes
        
            typedef boost::python::object ( *getMinutes_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getMinutes"
                , getMinutes_function_type( &getMinutes_74c5a29a5f94e873b64c34220b37c947 ) );
        
        }
        { //::osiris::DateTime::getMonth
        
            typedef boost::python::object ( *getMonth_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getMonth"
                , getMonth_function_type( &getMonth_333f04154daa90c5490e321d38a2a107 ) );
        
        }
        { //::osiris::DateTime::getSeconds
        
            typedef boost::python::object ( *getSeconds_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getSeconds"
                , getSeconds_function_type( &getSeconds_f17b268318e9f7709017fada3bac3fef ) );
        
        }
        { //::osiris::DateTime::getYear
        
            typedef boost::python::object ( *getYear_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "getYear"
                , getYear_function_type( &getYear_070d3a22283a4a4f27f3751a5a68766e ) );
        
        }
        { //::osiris::DateTime::isNull
        
            typedef boost::python::object ( *isNull_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "isNull"
                , isNull_function_type( &isNull_d868876cb230eae7ec88b5c673d195ac ) );
        
        }
        { //::osiris::DateTime::isValid
        
            typedef boost::python::object ( *isValid_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "isValid"
                , isValid_function_type( &isValid_665aaf3c217043ad2648b494d586d404 ) );
        
        }
        { //::osiris::DateTime::now
        
            typedef boost::python::object ( *now_function_type )(  );
            
            DateTime_exposer.def( 
                "now"
                , now_function_type( &now_d2f451fd3062aa8e8e4316e8eadd3127 ) );
        
        }
        { //::osiris::DateTime::setDate
        
            typedef void ( *setDate_function_type )( ::osiris::DateTime &,::osiris::uint32,::osiris::uint32,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setDate"
                , setDate_function_type( &setDate_5e16833fecd83bf4556bfebd323e38ed )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("year"), ::boost::python::arg("month"), ::boost::python::arg("day") ) );
        
        }
        { //::osiris::DateTime::setTime
        
            typedef void ( *setTime_function_type )( ::osiris::DateTime &,::osiris::uint32,::osiris::uint32,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setTime"
                , setTime_function_type( &setTime_07c736742b21a4a5048ace88e4aad8de )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("hour"), ::boost::python::arg("minutes"), ::boost::python::arg("seconds") ) );
        
        }
        { //::osiris::DateTime::toPosixTime
        
            typedef boost::python::object ( *toPosixTime_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toPosixTime"
                , toPosixTime_function_type( &toPosixTime_b5c0f22c52c3722dd0b573feacf62a33 ) );
        
        }
        { //::osiris::DateTime::toString
        
            typedef boost::python::object ( *toString_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toString"
                , toString_function_type( &toString_b38706616453fa68e5b4745984f08e1e ) );
        
        }
        { //::osiris::DateTime::toTime_t
        
            typedef boost::python::object ( *toTime_t_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toTime_t"
                , toTime_t_function_type( &toTime_t_353e0636d79d4c24287967c7c58dce67 ) );
        
        }
        { //::osiris::DateTime::toTm
        
            typedef boost::python::object ( *toTm_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toTm"
                , toTm_function_type( &toTm_10dbff7ee28e446400d147dc6fc2e5db ) );
        
        }
        { //::osiris::DateTime::toUnix
        
            typedef boost::python::object ( *toUnix_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toUnix"
                , toUnix_function_type( &toUnix_00fb7abf7a4c4734264873ada7b5beab ) );
        
        }
        { //::osiris::DateTime::toXML
        
            typedef boost::python::object ( *toXML_function_type )( ::osiris::DateTime const & );
            
            DateTime_exposer.def( 
                "toXML"
                , toXML_function_type( &toXML_238b43a8242d0043dc06a554822113ad ) );
        
        }
        { //::osiris::DateTime::fromPosixTime
        
            typedef boost::python::object ( *fromPosixTime_function_type )( ::osiris::DateTime &,::boost::posix_time::ptime const & );
            
            DateTime_exposer.def( 
                "fromPosixTime"
                , fromPosixTime_function_type( &fromPosixTime_11d91963d4a971722cb6563b39518dbd )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("time") ) );
        
        }
        { //::osiris::DateTime::fromString
        
            typedef boost::python::object ( *fromString_function_type )( ::osiris::DateTime &,::osiris::String const & );
            
            DateTime_exposer.def( 
                "fromString"
                , fromString_function_type( &fromString_2e084c315d531b6ca5f426d4a293afa4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::DateTime::fromTime_t
        
            typedef boost::python::object ( *fromTime_t_function_type )( ::osiris::DateTime &,::time_t const & );
            
            DateTime_exposer.def( 
                "fromTime_t"
                , fromTime_t_function_type( &fromTime_t_ec8b8879ae1e1fb4afa297d029db62d2 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("t") ) );
        
        }
        { //::osiris::DateTime::fromTm
        
            typedef boost::python::object ( *fromTm_function_type )( ::osiris::DateTime &,::tm const & );
            
            DateTime_exposer.def( 
                "fromTm"
                , fromTm_function_type( &fromTm_212dd811a091e65d1947617856e6342f )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::DateTime::fromUnix
        
            typedef boost::python::object ( *fromUnix_function_type )( ::osiris::DateTime &,::osiris::uint32 const & );
            
            DateTime_exposer.def( 
                "fromUnix"
                , fromUnix_function_type( &fromUnix_341b5cc1aae6b40b23f9debccd7e33b7 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("unix_time") ) );
        
        }
        { //::osiris::DateTime::fromXML
        
            typedef boost::python::object ( *fromXML_function_type )( ::osiris::DateTime &,::osiris::String const & );
            
            DateTime_exposer.def( 
                "fromXML"
                , fromXML_function_type( &fromXML_bec340f5b6c48eb77a17a7b67c5c610e )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        DateTime_exposer.def( ::boost::python::self != ::boost::python::self );
        DateTime_exposer.def( ::boost::python::self != ::boost::python::other< ::osiris::String >() );
        DateTime_exposer.def( ::boost::python::self < ::boost::python::self );
        DateTime_exposer.def( ::boost::python::self <= ::boost::python::self );
        { //::osiris::DateTime::operator=
        
            typedef ::osiris::DateTime & ( ::osiris::DateTime::*assign_function_type )( ::osiris::DateTime const & ) ;
            
            DateTime_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::DateTime::operator= )
                , ( ::boost::python::arg("dt") )
                , bp::return_self< >() );
        
        }
        { //::osiris::DateTime::operator=
        
            typedef ::osiris::DateTime & ( ::osiris::DateTime::*assign_function_type )( ::boost::posix_time::ptime const & ) ;
            
            DateTime_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::DateTime::operator= )
                , ( ::boost::python::arg("pt") )
                , bp::return_self< >() );
        
        }
        { //::osiris::DateTime::operator=
        
            typedef ::osiris::DateTime & ( ::osiris::DateTime::*assign_function_type )( ::osiris::String const & ) ;
            
            DateTime_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::DateTime::operator= )
                , ( ::boost::python::arg("str") )
                , bp::return_self< >() );
        
        }
        { //::osiris::DateTime::operator=
        
            typedef ::osiris::DateTime & ( ::osiris::DateTime::*assign_function_type )( ::osiris::uint32 const & ) ;
            
            DateTime_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::DateTime::operator= )
                , ( ::boost::python::arg("unix_time") )
                , bp::return_self< >() );
        
        }
        DateTime_exposer.def( ::boost::python::self == ::boost::python::self );
        DateTime_exposer.def( ::boost::python::self == ::boost::python::other< ::osiris::String >() );
        DateTime_exposer.def( ::boost::python::self > ::boost::python::self );
        DateTime_exposer.def( ::boost::python::self >= ::boost::python::self );
        { //::osiris::DateTime::setDay
        
            typedef void ( *setDay_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setDay"
                , setDay_function_type( &setDay_3c24d56542a358620b0cddb772ab4385 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("day") ) );
        
        }
        { //::osiris::DateTime::setHours
        
            typedef void ( *setHours_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setHours"
                , setHours_function_type( &setHours_d970bf8d3656509c845efa167c80e868 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("hours") ) );
        
        }
        { //::osiris::DateTime::setMinutes
        
            typedef void ( *setMinutes_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setMinutes"
                , setMinutes_function_type( &setMinutes_bf351aaf0e8a5522401e5e0bbd2853ac )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("minutes") ) );
        
        }
        { //::osiris::DateTime::setMonth
        
            typedef void ( *setMonth_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setMonth"
                , setMonth_function_type( &setMonth_21ae77a3a150790ae5d5e259eade1ca0 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("month") ) );
        
        }
        { //::osiris::DateTime::setSeconds
        
            typedef void ( *setSeconds_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setSeconds"
                , setSeconds_function_type( &setSeconds_96da0df837ce3e40ab1454ab146e9bb8 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("seconds") ) );
        
        }
        { //::osiris::DateTime::setYear
        
            typedef void ( *setYear_function_type )( ::osiris::DateTime &,::osiris::uint32 );
            
            DateTime_exposer.def( 
                "setYear"
                , setYear_function_type( &setYear_446ce97394577b8c8d328ec547d8210f )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("year") ) );
        
        }
        DateTime_exposer.def_readonly( "EMPTY", ::osiris::DateTime::EMPTY );
        DateTime_exposer.staticmethod( "now" );
        { //property "year"[fget=::osiris::DateTime::getYear, fset=::osiris::DateTime::setYear]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "year"
                , fget( &::osiris::DateTime::getYear )
                , fset( &::osiris::DateTime::setYear )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getYear() const [member function]\" and \"void osiris::DateTime::setYear(osiris::uint32 year) [member function]\"" );
        
        }
        { //property "month"[fget=::osiris::DateTime::getMonth, fset=::osiris::DateTime::setMonth]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "month"
                , fget( &::osiris::DateTime::getMonth )
                , fset( &::osiris::DateTime::setMonth )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getMonth() const [member function]\" and \"void osiris::DateTime::setMonth(osiris::uint32 month) [member function]\"" );
        
        }
        { //property "day"[fget=::osiris::DateTime::getDay, fset=::osiris::DateTime::setDay]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "day"
                , fget( &::osiris::DateTime::getDay )
                , fset( &::osiris::DateTime::setDay )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getDay() const [member function]\" and \"void osiris::DateTime::setDay(osiris::uint32 day) [member function]\"" );
        
        }
        { //property "hours"[fget=::osiris::DateTime::getHours, fset=::osiris::DateTime::setHours]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "hours"
                , fget( &::osiris::DateTime::getHours )
                , fset( &::osiris::DateTime::setHours )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getHours() const [member function]\" and \"void osiris::DateTime::setHours(osiris::uint32 hours) [member function]\"" );
        
        }
        { //property "minutes"[fget=::osiris::DateTime::getMinutes, fset=::osiris::DateTime::setMinutes]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "minutes"
                , fget( &::osiris::DateTime::getMinutes )
                , fset( &::osiris::DateTime::setMinutes )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getMinutes() const [member function]\" and \"void osiris::DateTime::setMinutes(osiris::uint32 minutes) [member function]\"" );
        
        }
        { //property "seconds"[fget=::osiris::DateTime::getSeconds, fset=::osiris::DateTime::setSeconds]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            typedef void ( ::osiris::DateTime::*fset )( ::osiris::uint32 ) ;
            
            DateTime_exposer.add_property( 
                "seconds"
                , fget( &::osiris::DateTime::getSeconds )
                , fset( &::osiris::DateTime::setSeconds )
                , "get\\set property, built on top of \"osiris::uint32 osiris::DateTime::getSeconds() const [member function]\" and \"void osiris::DateTime::setSeconds(osiris::uint32 seconds) [member function]\"" );
        
        }
        { //property "dayOfWeek"[fget=::osiris::DateTime::getDayOfWeek]
        
            typedef ::osiris::uint32 ( ::osiris::DateTime::*fget )(  ) const;
            
            DateTime_exposer.add_property( 
                "dayOfWeek"
                , fget( &::osiris::DateTime::getDayOfWeek )
                , "get property, built on top of \"osiris::uint32 osiris::DateTime::getDayOfWeek() const [member function]\"" );
        
        }
    }

}
