// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpclient.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpurl.h"
#include "httpclient.pypp.hpp"

namespace bp = boost::python;

struct HttpClient_wrapper : ::osiris::HttpClient, ::osiris::PythonWrapper< ::osiris::HttpClient > {

    HttpClient_wrapper(::osiris::HttpClient const & arg )
    : ::osiris::HttpClient( arg )
      , ::osiris::PythonWrapper< ::osiris::HttpClient >(){
        // copy constructor
        
    }

    HttpClient_wrapper(::boost::shared_ptr< boost::asio::io_service > service, ::boost::shared_ptr< osiris::TCPSocket > socket )
    : ::osiris::HttpClient( service, socket )
      , ::osiris::PythonWrapper< ::osiris::HttpClient >(){
        // constructor
    
    }

    virtual void onResponseCompleted(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onResponseCompleted = this->get_override( "onResponseCompleted" ) )
            func_onResponseCompleted(  );
        else{
            __pystate.leave();
            this->::osiris::HttpClient::onResponseCompleted(  );
        }
    }
    
    virtual void default_onResponseCompleted(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpClient::onResponseCompleted( );
    }

    virtual void onResponseError(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onResponseError = this->get_override( "onResponseError" ) )
            func_onResponseError(  );
        else{
            __pystate.leave();
            this->::osiris::HttpClient::onResponseError(  );
        }
    }
    
    virtual void default_onResponseError(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpClient::onResponseError( );
    }

    virtual void onResponseProgress( ::osiris::uint32 value, ::osiris::uint32 total ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onResponseProgress = this->get_override( "onResponseProgress" ) )
            func_onResponseProgress( value, total );
        else{
            __pystate.leave();
            this->::osiris::HttpClient::onResponseProgress( value, total );
        }
    }
    
    virtual void default_onResponseProgress( ::osiris::uint32 value, ::osiris::uint32 total ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpClient::onResponseProgress( value, total );
    }

    static boost::python::object perform_88ea12b8ca1444fe0ec4fcdb25d4bf9d( ::osiris::HttpClient & inst, ::osiris::HttpUrl const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.perform(url);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    void initRedirect( ::osiris::HttpUrl const & redirectUrl, ::boost::shared_ptr< osiris::HttpRequest > request, ::boost::shared_ptr< osiris::HttpResponse > response ){
        ::osiris::IHttpClient::initRedirect( boost::ref(redirectUrl), request, response );
    }

};

void register_HttpClient_class(){

    { //::osiris::HttpClient
        typedef ::boost::python::class_< HttpClient_wrapper, ::boost::python::bases< ::osiris::IHttpClient > > HttpClient_exposer_t;
        HttpClient_exposer_t HttpClient_exposer = HttpClient_exposer_t( "HttpClient", ::boost::python::init< ::boost::shared_ptr< boost::asio::io_service >, ::boost::shared_ptr< osiris::TCPSocket > >(( ::boost::python::arg("service"), ::boost::python::arg("socket") )) );
        ::boost::python::scope HttpClient_scope( HttpClient_exposer );
        { //::osiris::HttpClient::getSSLContext
        
            typedef ::boost::asio::ssl::context & ( ::osiris::HttpClient::*getSSLContext_function_type )(  ) ;
            
            HttpClient_exposer.def( 
                "getSSLContext"
                , getSSLContext_function_type(&::osiris::HttpClient::getSSLContext)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osiris::HttpClient::onResponseCompleted
        
            typedef void ( HttpClient_wrapper::*onResponseCompleted_function_type )(  ) ;
            
            HttpClient_exposer.def( 
                "onResponseCompleted"
                , onResponseCompleted_function_type( &HttpClient_wrapper::default_onResponseCompleted ) );
        
        }
        { //::osiris::HttpClient::onResponseError
        
            typedef void ( HttpClient_wrapper::*onResponseError_function_type )(  ) ;
            
            HttpClient_exposer.def( 
                "onResponseError"
                , onResponseError_function_type( &HttpClient_wrapper::default_onResponseError ) );
        
        }
        { //::osiris::HttpClient::onResponseProgress
        
            typedef void ( HttpClient_wrapper::*onResponseProgress_function_type )( ::osiris::uint32,::osiris::uint32 ) ;
            
            HttpClient_exposer.def( 
                "onResponseProgress"
                , onResponseProgress_function_type( &HttpClient_wrapper::default_onResponseProgress )
                , ( ::boost::python::arg("value"), ::boost::python::arg("total") ) );
        
        }
        { //::osiris::HttpClient::perform
        
            typedef boost::python::object ( *perform_function_type )( ::osiris::HttpClient &,::osiris::HttpUrl const & );
            
            HttpClient_exposer.def( 
                "perform"
                , perform_function_type( &HttpClient_wrapper::perform_88ea12b8ca1444fe0ec4fcdb25d4bf9d )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::IHttpClient::initRedirect
        
            typedef void ( HttpClient_wrapper::*initRedirect_function_type )( ::osiris::HttpUrl const &,::boost::shared_ptr< osiris::HttpRequest >,::boost::shared_ptr< osiris::HttpResponse > ) ;
            
            HttpClient_exposer.def( 
                "initRedirect"
                , initRedirect_function_type( &HttpClient_wrapper::initRedirect )
                , ( ::boost::python::arg("redirectUrl"), ::boost::python::arg("request"), ::boost::python::arg("response") ) );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HttpClient > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpClient >, boost::shared_ptr< ::osiris::IHttpClient > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpClient >, boost::shared_ptr< ::osiris::Object > >();
    }

}
