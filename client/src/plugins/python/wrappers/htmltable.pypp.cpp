// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmltable.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "htmltable.pypp.hpp"

namespace bp = boost::python;

struct HtmlTable_wrapper : ::osiris::HtmlTable, ::osiris::PythonWrapper< ::osiris::HtmlTable > {

    HtmlTable_wrapper(::osiris::uint32 cellSpacing=1 )
    : ::osiris::HtmlTable( cellSpacing )
      , ::osiris::PythonWrapper< ::osiris::HtmlTable >(){
        // constructor
    
    }

    static boost::python::object getCellSpacing( ::osiris::HtmlTable const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlUnit result = inst.getCellSpacing();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCellPadding( ::osiris::HtmlTable const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlUnit result = inst.getCellPadding();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object addRow( ::osiris::HtmlTable & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlTableRow> result = inst.addRow();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlTable::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlTable::onRender( boost::ref(writer) );
    }

    static void setCellPadding( ::osiris::HtmlTable & inst, ::osiris::HtmlUnit const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCellPadding(value);
        __pythreadSaver.restore();
    }

    static void setCellSpacing( ::osiris::HtmlTable & inst, ::osiris::HtmlUnit const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCellSpacing(value);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(nullptr) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::IHtmlControl::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHtmlControl::getSession( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(nullptr) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(nullptr) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onInit( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onPreRender( );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_HtmlTable_class(){

    { //::osiris::HtmlTable
        typedef ::boost::python::class_< HtmlTable_wrapper, ::boost::python::bases< ::osiris::IHtmlControl >, ::boost::noncopyable > HtmlTable_exposer_t;
        HtmlTable_exposer_t HtmlTable_exposer = HtmlTable_exposer_t( "HtmlTable", ::boost::python::init< ::boost::python::optional< ::osiris::uint32 > >(( ::boost::python::arg("cellSpacing")=(::osiris::uint32)(1) )) );
        ::boost::python::scope HtmlTable_scope( HtmlTable_exposer );
        ::boost::python::implicitly_convertible< ::osiris::uint32, ::osiris::HtmlTable >();
        { //::osiris::HtmlTable::getCellSpacing
        
            typedef boost::python::object ( *getCellSpacing_function_type )( ::osiris::HtmlTable const & );
            
            HtmlTable_exposer.def( 
                "getCellSpacing"
                , getCellSpacing_function_type( &HtmlTable_wrapper::getCellSpacing ) );
        
        }
        { //::osiris::HtmlTable::getCellPadding
        
            typedef boost::python::object ( *getCellPadding_function_type )( ::osiris::HtmlTable const & );
            
            HtmlTable_exposer.def( 
                "getCellPadding"
                , getCellPadding_function_type( &HtmlTable_wrapper::getCellPadding ) );
        
        }
        { //::osiris::HtmlTable::addRow
        
            typedef boost::python::object ( *addRow_function_type )( ::osiris::HtmlTable & );
            
            HtmlTable_exposer.def( 
                "addRow"
                , addRow_function_type( &HtmlTable_wrapper::addRow ) );
        
        }
        { //::osiris::HtmlTable::onRender
        
            typedef void ( HtmlTable_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTable_exposer.def( 
                "onRender"
                , onRender_function_type( &HtmlTable_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlTable::setCellPadding
        
            typedef void ( *setCellPadding_function_type )( ::osiris::HtmlTable &,::osiris::HtmlUnit const & );
            
            HtmlTable_exposer.def( 
                "setCellPadding"
                , setCellPadding_function_type( &HtmlTable_wrapper::setCellPadding )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HtmlTable::setCellSpacing
        
            typedef void ( *setCellSpacing_function_type )( ::osiris::HtmlTable &,::osiris::HtmlUnit const & );
            
            HtmlTable_exposer.def( 
                "setCellSpacing"
                , setCellSpacing_function_type( &HtmlTable_wrapper::setCellSpacing )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( HtmlTable_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            HtmlTable_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &HtmlTable_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( HtmlTable_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            HtmlTable_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &HtmlTable_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(nullptr) ) );
        
        }
        { //::osiris::IHtmlControl::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::IHtmlControl::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( HtmlTable_wrapper::*default_getSession_function_type )(  ) const;
            
            HtmlTable_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::IHtmlControl::getSession)
                , default_getSession_function_type(&HtmlTable_wrapper::default_getSession) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( HtmlTable_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            HtmlTable_exposer.def( 
                "onEvent"
                , onEvent_function_type( &HtmlTable_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(nullptr) ) );
        
        }
        { //::osiris::IHtmlControl::onInit
        
            typedef void ( HtmlTable_wrapper::*onInit_function_type )(  ) ;
            
            HtmlTable_exposer.def( 
                "onInit"
                , onInit_function_type( &HtmlTable_wrapper::default_onInit ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( HtmlTable_wrapper::*onLoad_function_type )(  ) ;
            
            HtmlTable_exposer.def( 
                "onLoad"
                , onLoad_function_type( &HtmlTable_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( HtmlTable_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            HtmlTable_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &HtmlTable_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::onPreRender
        
            typedef void ( HtmlTable_wrapper::*onPreRender_function_type )(  ) ;
            
            HtmlTable_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &HtmlTable_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( HtmlTable_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlTable_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &HtmlTable_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlTable_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTable_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&HtmlTable_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlTable_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlTable_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&HtmlTable_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( HtmlTable_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlTable_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &HtmlTable_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "cellSpacing"[fget=::osiris::HtmlTable::getCellSpacing, fset=::osiris::HtmlTable::setCellSpacing]
        
            typedef ::osiris::HtmlUnit ( ::osiris::HtmlTable::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTable::*fset )( ::osiris::HtmlUnit const & ) ;
            
            HtmlTable_exposer.add_property( 
                "cellSpacing"
                , fget( &::osiris::HtmlTable::getCellSpacing )
                , fset( &::osiris::HtmlTable::setCellSpacing )
                , "get\\set property, built on top of \"osiris::HtmlUnit osiris::HtmlTable::getCellSpacing() const [member function]\" and \"void osiris::HtmlTable::setCellSpacing(osiris::HtmlUnit const & value) [member function]\"" );
        
        }
        { //property "cellPadding"[fget=::osiris::HtmlTable::getCellPadding, fset=::osiris::HtmlTable::setCellPadding]
        
            typedef ::osiris::HtmlUnit ( ::osiris::HtmlTable::*fget )(  ) const;
            typedef void ( ::osiris::HtmlTable::*fset )( ::osiris::HtmlUnit const & ) ;
            
            HtmlTable_exposer.add_property( 
                "cellPadding"
                , fget( &::osiris::HtmlTable::getCellPadding )
                , fset( &::osiris::HtmlTable::setCellPadding )
                , "get\\set property, built on top of \"osiris::HtmlUnit osiris::HtmlTable::getCellPadding() const [member function]\" and \"void osiris::HtmlTable::setCellPadding(osiris::HtmlUnit const & value) [member function]\"" );
        
        }
    }

}
