// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "omlurl.h"
#include "omlurl.pypp.hpp"

namespace bp = boost::python;

struct OMLUrl_wrapper : ::osiris::OMLUrl, ::osiris::PythonWrapper< ::osiris::OMLUrl > {

    OMLUrl_wrapper(::osiris::OMLUrl const & arg )
    : ::osiris::OMLUrl( arg )
      , ::osiris::PythonWrapper< ::osiris::OMLUrl >(){
        // copy constructor
        
    }

    OMLUrl_wrapper(::osiris::String const & tag )
    : ::osiris::OMLUrl( boost::ref(tag) )
      , ::osiris::PythonWrapper< ::osiris::OMLUrl >(){
        // constructor
    
    }

    static void generateBodyFromUrl( ::osiris::OMLUrl const & inst, ::boost::shared_ptr< osiris::OMLContext > context, ::osiris::String const & url, ::osiris::String & preBody, ::osiris::String & body, ::osiris::String & postBody ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.generateBodyFromUrl(context, url, preBody, body, postBody);
        __pythreadSaver.restore();
    }

    virtual bool allowRowMode(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_allowRowMode = this->get_override( "allowRowMode" ) )
            return func_allowRowMode(  );
        else{
            __pystate.leave();
            return this->::osiris::OMLUrl::allowRowMode(  );
        }
    }
    
    bool default_allowRowMode(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLUrl::allowRowMode( );
    }

    virtual ::osiris::String processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processHtml = this->get_override( "processHtml" ) )
            return func_processHtml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::OMLUrl::processHtml( i, context );
        }
    }
    
    ::osiris::String default_processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLUrl::processHtml( i, context );
    }

    virtual ::osiris::String processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processOsml = this->get_override( "processOsml" ) )
            return func_processOsml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::IOMLCode::processOsml( i, context );
        }
    }
    
    ::osiris::String default_processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLCode::processOsml( i, context );
    }

};

void register_OMLUrl_class(){

    { //::osiris::OMLUrl
        typedef ::boost::python::class_< OMLUrl_wrapper, ::boost::python::bases< ::osiris::IOMLCode > > OMLUrl_exposer_t;
        OMLUrl_exposer_t OMLUrl_exposer = OMLUrl_exposer_t( "OMLUrl", ::boost::python::init< ::osiris::String const & >(( ::boost::python::arg("tag") )) );
        ::boost::python::scope OMLUrl_scope( OMLUrl_exposer );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::OMLUrl >();
        { //::osiris::OMLUrl::generateBodyFromUrl
        
            typedef void ( *generateBodyFromUrl_function_type )( ::osiris::OMLUrl const &,::boost::shared_ptr<osiris::OMLContext>,::osiris::String const &,::osiris::String &,::osiris::String &,::osiris::String & );
            
            OMLUrl_exposer.def( 
                "generateBodyFromUrl"
                , generateBodyFromUrl_function_type( &OMLUrl_wrapper::generateBodyFromUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("context"), ::boost::python::arg("url"), ::boost::python::arg("preBody"), ::boost::python::arg("body"), ::boost::python::arg("postBody") ) );
        
        }
        { //::osiris::OMLUrl::allowRowMode
        
            typedef bool ( ::osiris::OMLUrl::*allowRowMode_function_type )(  ) const;
            typedef bool ( OMLUrl_wrapper::*default_allowRowMode_function_type )(  ) const;
            
            OMLUrl_exposer.def( 
                "allowRowMode"
                , allowRowMode_function_type(&::osiris::OMLUrl::allowRowMode)
                , default_allowRowMode_function_type(&OMLUrl_wrapper::default_allowRowMode) );
        
        }
        { //::osiris::OMLUrl::processHtml
        
            typedef ::osiris::String ( ::osiris::OMLUrl::*processHtml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            typedef ::osiris::String ( OMLUrl_wrapper::*default_processHtml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            
            OMLUrl_exposer.def( 
                "processHtml"
                , processHtml_function_type(&::osiris::OMLUrl::processHtml)
                , default_processHtml_function_type(&OMLUrl_wrapper::default_processHtml)
                , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
        { //::osiris::IOMLCode::processOsml
        
            typedef ::osiris::String ( ::osiris::IOMLCode::*processOsml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            typedef ::osiris::String ( OMLUrl_wrapper::*default_processOsml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            
            OMLUrl_exposer.def( 
                "processOsml"
                , processOsml_function_type(&::osiris::IOMLCode::processOsml)
                , default_processOsml_function_type(&OMLUrl_wrapper::default_processOsml)
                , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
    }

}
