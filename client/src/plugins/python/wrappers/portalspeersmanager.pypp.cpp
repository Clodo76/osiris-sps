// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "portalspeersmanager.h"
#include "portalspeersmanager.pypp.hpp"

namespace bp = boost::python;

static boost::python::object empty_661bda377f0536e324bf4329629b82b2( ::osiris::PortalsPeersManager const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.empty();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getPeersCacheSize_84e9abaa267a172aeaf4b9d5bdfeaf74( ::osiris::PortalsPeersManager const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint32 result = inst.getPeersCacheSize();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object savePeer_a3d65b08cbc3d72109497d8a896e030b( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPAddress > address, bool validate, ::osiris::String const & origin ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.savePeer(address, validate, origin);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object savePeer_3846e95f0111def0f753fb8f5fee4ff0( ::osiris::PortalsPeersManager & inst, ::osiris::String const & ip, ::osiris::uint32 port, bool validate, ::osiris::String const & origin ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.savePeer(ip, port, validate, origin);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object peekPeer_3b65602ec22ec2197590f960e40c27a7( ::osiris::PortalsPeersManager & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::shared_ptr<osiris::PortalsPeer> result = inst.peekPeer();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void extractSupernodes_e8f8c6bb3eadc64f38939f371430c488( ::osiris::PortalsPeersManager & inst, ::osiris::uint32 count, ::std::list<boost::shared_ptr<osiris::PortalsPeer>,osiris::StdAllocator<boost::shared_ptr<osiris::PortalsPeer>, osiris::NedAllocator<boost::shared_ptr<osiris::PortalsPeer> > > > & peers ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.extractSupernodes(count, peers);
    __pythreadSaver.restore();
}

static void getPeersInfo_072a3927870552799b6718181d25ec58( ::osiris::PortalsPeersManager & inst, ::osiris::uint32 & activePeers, ::osiris::uint32 & activeSupernodes ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.getPeersInfo(activePeers, activeSupernodes);
    __pythreadSaver.restore();
}

static boost::python::object getContactDateCheck_61e84e90810f62336723367a2982e406( ::osiris::PortalsPeersManager const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::DateTime result = inst.getContactDateCheck();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void addSupernode_a32dd58feaee6532eee47d30e8d85315( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPAddress > address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.addSupernode(address);
    __pythreadSaver.restore();
}

static void exportXML_c5bf026a651cbaf165472aa6652b1e0c( ::osiris::PortalsPeersManager const & inst, ::boost::shared_ptr< osiris::XMLNode > node ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.exportXML(node);
    __pythreadSaver.restore();
}

static void invalidatePeer_a1989b63ff620fdc8d1d23830c092981( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPAddress > address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.invalidatePeer(address);
    __pythreadSaver.restore();
}

static boost::python::object loadPeers_5acf46eccf301eb76408b70020b142dd( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.loadPeers(database);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void removePeer_67f5c62d9d1b99199861fb2f8db0e24d( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPAddress > address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.removePeer(address);
    __pythreadSaver.restore();
}

static void removePeer_f05a9c06e1a90b70303d8e50454d2224( ::osiris::PortalsPeersManager & inst, ::osiris::uint64 id ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.removePeer(id);
    __pythreadSaver.restore();
}

static boost::python::object savePeers_53a39f769d65f8cee10ac82f6ef9151e( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.savePeers(database);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void setPeersCacheSize_88ae650933c6be784b11a2e33b8bfd4c( ::osiris::PortalsPeersManager & inst, ::osiris::uint32 size ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setPeersCacheSize(size);
    __pythreadSaver.restore();
}

static void validatePeer_042e6982b92dac92763810e48e952685( ::osiris::PortalsPeersManager & inst, ::boost::shared_ptr< osiris::IPAddress > address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.validatePeer(address);
    __pythreadSaver.restore();
}

void register_PortalsPeersManager_class(){

    { //::osiris::PortalsPeersManager
        typedef ::boost::python::class_< ::osiris::PortalsPeersManager, ::boost::noncopyable > PortalsPeersManager_exposer_t;
        PortalsPeersManager_exposer_t PortalsPeersManager_exposer = PortalsPeersManager_exposer_t( "PortalsPeersManager", ::boost::python::init< ::osiris::Portal &, ::osiris::uint32 >(( ::boost::python::arg("portal"), ::boost::python::arg("peersCacheSize") )) );
        ::boost::python::scope PortalsPeersManager_scope( PortalsPeersManager_exposer );
        { //::osiris::PortalsPeersManager::empty
        
            typedef boost::python::object ( *empty_function_type )( ::osiris::PortalsPeersManager const & );
            
            PortalsPeersManager_exposer.def( 
                "empty"
                , empty_function_type( &empty_661bda377f0536e324bf4329629b82b2 ) );
        
        }
        { //::osiris::PortalsPeersManager::getPeersCacheSize
        
            typedef boost::python::object ( *getPeersCacheSize_function_type )( ::osiris::PortalsPeersManager const & );
            
            PortalsPeersManager_exposer.def( 
                "getPeersCacheSize"
                , getPeersCacheSize_function_type( &getPeersCacheSize_84e9abaa267a172aeaf4b9d5bdfeaf74 ) );
        
        }
        { //::osiris::PortalsPeersManager::savePeer
        
            typedef boost::python::object ( *savePeer_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPAddress>,bool,::osiris::String const & );
            
            PortalsPeersManager_exposer.def( 
                "savePeer"
                , savePeer_function_type( &savePeer_a3d65b08cbc3d72109497d8a896e030b )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address"), ::boost::python::arg("validate"), ::boost::python::arg("origin") ) );
        
        }
        { //::osiris::PortalsPeersManager::savePeer
        
            typedef boost::python::object ( *savePeer_function_type )( ::osiris::PortalsPeersManager &,::osiris::String const &,::osiris::uint32,bool,::osiris::String const & );
            
            PortalsPeersManager_exposer.def( 
                "savePeer"
                , savePeer_function_type( &savePeer_3846e95f0111def0f753fb8f5fee4ff0 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("ip"), ::boost::python::arg("port"), ::boost::python::arg("validate"), ::boost::python::arg("origin") ) );
        
        }
        { //::osiris::PortalsPeersManager::peekPeer
        
            typedef boost::python::object ( *peekPeer_function_type )( ::osiris::PortalsPeersManager & );
            
            PortalsPeersManager_exposer.def( 
                "peekPeer"
                , peekPeer_function_type( &peekPeer_3b65602ec22ec2197590f960e40c27a7 ) );
        
        }
        { //::osiris::PortalsPeersManager::extractSupernodes
        
            typedef void ( *extractSupernodes_function_type )( ::osiris::PortalsPeersManager &,::osiris::uint32,::std::list<boost::shared_ptr<osiris::PortalsPeer>,osiris::StdAllocator<boost::shared_ptr<osiris::PortalsPeer>, osiris::NedAllocator<boost::shared_ptr<osiris::PortalsPeer> > > > & );
            
            PortalsPeersManager_exposer.def( 
                "extractSupernodes"
                , extractSupernodes_function_type( &extractSupernodes_e8f8c6bb3eadc64f38939f371430c488 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("count"), ::boost::python::arg("peers") ) );
        
        }
        { //::osiris::PortalsPeersManager::getPeersInfo
        
            typedef void ( *getPeersInfo_function_type )( ::osiris::PortalsPeersManager &,::osiris::uint32 &,::osiris::uint32 & );
            
            PortalsPeersManager_exposer.def( 
                "getPeersInfo"
                , getPeersInfo_function_type( &getPeersInfo_072a3927870552799b6718181d25ec58 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("activePeers"), ::boost::python::arg("activeSupernodes") ) );
        
        }
        { //::osiris::PortalsPeersManager::getContactDateCheck
        
            typedef boost::python::object ( *getContactDateCheck_function_type )( ::osiris::PortalsPeersManager const & );
            
            PortalsPeersManager_exposer.def( 
                "getContactDateCheck"
                , getContactDateCheck_function_type( &getContactDateCheck_61e84e90810f62336723367a2982e406 ) );
        
        }
        { //::osiris::PortalsPeersManager::addSupernode
        
            typedef void ( *addSupernode_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPAddress> );
            
            PortalsPeersManager_exposer.def( 
                "addSupernode"
                , addSupernode_function_type( &addSupernode_a32dd58feaee6532eee47d30e8d85315 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::PortalsPeersManager::exportXML
        
            typedef void ( *exportXML_function_type )( ::osiris::PortalsPeersManager const &,::boost::shared_ptr<osiris::XMLNode> );
            
            PortalsPeersManager_exposer.def( 
                "exportXML"
                , exportXML_function_type( &exportXML_c5bf026a651cbaf165472aa6652b1e0c )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("node") ) );
        
        }
        { //::osiris::PortalsPeersManager::invalidatePeer
        
            typedef void ( *invalidatePeer_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPAddress> );
            
            PortalsPeersManager_exposer.def( 
                "invalidatePeer"
                , invalidatePeer_function_type( &invalidatePeer_a1989b63ff620fdc8d1d23830c092981 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::PortalsPeersManager::loadPeers
        
            typedef boost::python::object ( *loadPeers_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPortalDatabase> );
            
            PortalsPeersManager_exposer.def( 
                "loadPeers"
                , loadPeers_function_type( &loadPeers_5acf46eccf301eb76408b70020b142dd )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("database") ) );
        
        }
        { //::osiris::PortalsPeersManager::removePeer
        
            typedef void ( *removePeer_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPAddress> );
            
            PortalsPeersManager_exposer.def( 
                "removePeer"
                , removePeer_function_type( &removePeer_67f5c62d9d1b99199861fb2f8db0e24d )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::PortalsPeersManager::removePeer
        
            typedef void ( *removePeer_function_type )( ::osiris::PortalsPeersManager &,::osiris::uint64 );
            
            PortalsPeersManager_exposer.def( 
                "removePeer"
                , removePeer_function_type( &removePeer_f05a9c06e1a90b70303d8e50454d2224 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsPeersManager::savePeers
        
            typedef boost::python::object ( *savePeers_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPortalDatabase> );
            
            PortalsPeersManager_exposer.def( 
                "savePeers"
                , savePeers_function_type( &savePeers_53a39f769d65f8cee10ac82f6ef9151e )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("database") ) );
        
        }
        { //::osiris::PortalsPeersManager::setPeersCacheSize
        
            typedef void ( *setPeersCacheSize_function_type )( ::osiris::PortalsPeersManager &,::osiris::uint32 );
            
            PortalsPeersManager_exposer.def( 
                "setPeersCacheSize"
                , setPeersCacheSize_function_type( &setPeersCacheSize_88ae650933c6be784b11a2e33b8bfd4c )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("size") ) );
        
        }
        { //::osiris::PortalsPeersManager::validatePeer
        
            typedef void ( *validatePeer_function_type )( ::osiris::PortalsPeersManager &,::boost::shared_ptr<osiris::IPAddress> );
            
            PortalsPeersManager_exposer.def( 
                "validatePeer"
                , validatePeer_function_type( &validatePeer_042e6982b92dac92763810e48e952685 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //property "peersCacheSize"[fget=::osiris::PortalsPeersManager::getPeersCacheSize, fset=::osiris::PortalsPeersManager::setPeersCacheSize]
        
            typedef ::osiris::uint32 ( ::osiris::PortalsPeersManager::*fget )(  ) const;
            typedef void ( ::osiris::PortalsPeersManager::*fset )( ::osiris::uint32 ) ;
            
            PortalsPeersManager_exposer.add_property( 
                "peersCacheSize"
                , fget( &::osiris::PortalsPeersManager::getPeersCacheSize )
                , fset( &::osiris::PortalsPeersManager::setPeersCacheSize )
                , "get\\set property, built on top of \"osiris::uint32 osiris::PortalsPeersManager::getPeersCacheSize() const [member function]\" and \"void osiris::PortalsPeersManager::setPeersCacheSize(osiris::uint32 size) [member function]\"" );
        
        }
        { //property "contactDateCheck"[fget=::osiris::PortalsPeersManager::getContactDateCheck]
        
            typedef ::osiris::DateTime ( ::osiris::PortalsPeersManager::*fget )(  ) const;
            
            PortalsPeersManager_exposer.add_property( 
                "contactDateCheck"
                , fget( &::osiris::PortalsPeersManager::getContactDateCheck )
                , "get property, built on top of \"osiris::DateTime osiris::PortalsPeersManager::getContactDateCheck() const [member function]\"" );
        
        }
    }

}
