// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "isearchresults.h"
#include "searchresult.h"
#include "searchresultsdatabase.h"
#include "searchresultslucene.h"
#include "isearchresults.pypp.hpp"

namespace bp = boost::python;

struct ISearchResults_wrapper : ::osiris::ISearchResults, ::osiris::PythonWrapper< ::osiris::ISearchResults > {

    ISearchResults_wrapper( )
    : ::osiris::ISearchResults( )
      , ::osiris::PythonWrapper< ::osiris::ISearchResults >(){
        // null constructor
    
    }

    static boost::python::object getPartial( ::osiris::ISearchResults const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getPartial();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getElapsed( ::osiris::ISearchResults const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        double result = inst.getElapsed();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void exportXML( ::boost::shared_ptr< osiris::XMLNode > node, ::boost::shared_ptr< osiris::SearchQuery > query, ::boost::shared_ptr< osiris::IPortalPage > page, bool external ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_exportXML = this->get_override( "exportXML" ) )
            func_exportXML( node, query, page, external );
        else{
            __pystate.leave();
            this->::osiris::ISearchResults::exportXML( node, query, page, external );
        }
    }
    
    void default_exportXML( ::boost::shared_ptr< osiris::XMLNode > node, ::boost::shared_ptr< osiris::SearchQuery > query, ::boost::shared_ptr< osiris::IPortalPage > page, bool external ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ISearchResults::exportXML( node, query, page, external );
    }

    virtual void search( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_search = this->get_override( "search" ) )
            func_search( database, portal, query, boost::ref(objectsMap) );
        else{
            __pystate.leave();
            this->::osiris::ISearchResults::search( database, portal, query, boost::ref(objectsMap) );
        }
    }
    
    void default_search( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ISearchResults::search( database, portal, query, boost::ref(objectsMap) );
    }

    virtual void clear(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_clear = this->get_override( "clear" );
        func_clear(  );
    }

    virtual ::boost::shared_ptr< osiris::SearchResult > getResult( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::osiris::uint32 index, bool asGroup=false ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getResult = this->get_override( "getResult" );
        return func_getResult( database, index, asGroup );
    }

    virtual ::osiris::uint32 getResults(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getResults = this->get_override( "getResults" );
        return func_getResults(  );
    }

    virtual ::osiris::uint32 getTotalResults(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getTotalResults = this->get_override( "getTotalResults" );
        return func_getTotalResults(  );
    }

    virtual void executeQuery( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_executeQuery = this->get_override( "executeQuery" );
        func_executeQuery( database, portal, query, boost::ref(objectsMap) );
    }

    static void setPartial( ::osiris::ISearchResults & inst, bool partial ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPartial(partial);
        __pythreadSaver.restore();
    }

};

void register_ISearchResults_class(){

    { //::osiris::ISearchResults
        typedef ::boost::python::class_< ISearchResults_wrapper, ::boost::noncopyable > ISearchResults_exposer_t;
        ISearchResults_exposer_t ISearchResults_exposer = ISearchResults_exposer_t( "ISearchResults", ::boost::python::init< >() );
        ::boost::python::scope ISearchResults_scope( ISearchResults_exposer );
        { //::osiris::ISearchResults::getPartial
        
            typedef boost::python::object ( *getPartial_function_type )( ::osiris::ISearchResults const & );
            
            ISearchResults_exposer.def( 
                "getPartial"
                , getPartial_function_type( &ISearchResults_wrapper::getPartial ) );
        
        }
        { //::osiris::ISearchResults::getElapsed
        
            typedef boost::python::object ( *getElapsed_function_type )( ::osiris::ISearchResults const & );
            
            ISearchResults_exposer.def( 
                "getElapsed"
                , getElapsed_function_type( &ISearchResults_wrapper::getElapsed ) );
        
        }
        { //::osiris::ISearchResults::exportXML
        
            typedef void ( ::osiris::ISearchResults::*exportXML_function_type )( ::boost::shared_ptr< osiris::XMLNode >,::boost::shared_ptr< osiris::SearchQuery >,::boost::shared_ptr< osiris::IPortalPage >,bool ) ;
            typedef void ( ISearchResults_wrapper::*default_exportXML_function_type )( ::boost::shared_ptr< osiris::XMLNode >,::boost::shared_ptr< osiris::SearchQuery >,::boost::shared_ptr< osiris::IPortalPage >,bool ) ;
            
            ISearchResults_exposer.def( 
                "exportXML"
                , exportXML_function_type(&::osiris::ISearchResults::exportXML)
                , default_exportXML_function_type(&ISearchResults_wrapper::default_exportXML)
                , ( ::boost::python::arg("node"), ::boost::python::arg("query"), ::boost::python::arg("page"), ::boost::python::arg("external") ) );
        
        }
        { //::osiris::ISearchResults::search
        
            typedef void ( ::osiris::ISearchResults::*search_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) ;
            typedef void ( ISearchResults_wrapper::*default_search_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) ;
            
            ISearchResults_exposer.def( 
                "search"
                , search_function_type(&::osiris::ISearchResults::search)
                , default_search_function_type(&ISearchResults_wrapper::default_search)
                , ( ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("query"), ::boost::python::arg("objectsMap") ) );
        
        }
        { //::osiris::ISearchResults::clear
        
            typedef void ( ::osiris::ISearchResults::*clear_function_type )(  ) ;
            
            ISearchResults_exposer.def( 
                "clear"
                , ( clear_function_type(&::osiris::ISearchResults::clear) ) );
        
        }
        { //::osiris::ISearchResults::getResult
        
            typedef ::boost::shared_ptr<osiris::SearchResult> ( ::osiris::ISearchResults::*getResult_function_type )( ::boost::shared_ptr<osiris::IPortalDatabase>,::osiris::uint32,bool ) ;
            
            ISearchResults_exposer.def( 
                "getResult"
                , ( getResult_function_type(&::osiris::ISearchResults::getResult) )
                , ( ::boost::python::arg("database"), ::boost::python::arg("index"), ::boost::python::arg("asGroup")=(bool)(false) ) );
        
        }
        { //::osiris::ISearchResults::getResults
        
            typedef ::osiris::uint32 ( ::osiris::ISearchResults::*getResults_function_type )(  ) ;
            
            ISearchResults_exposer.def( 
                "getResults"
                , ( getResults_function_type(&::osiris::ISearchResults::getResults) ) );
        
        }
        { //::osiris::ISearchResults::getTotalResults
        
            typedef ::osiris::uint32 ( ::osiris::ISearchResults::*getTotalResults_function_type )(  ) ;
            
            ISearchResults_exposer.def( 
                "getTotalResults"
                , ( getTotalResults_function_type(&::osiris::ISearchResults::getTotalResults) ) );
        
        }
        { //::osiris::ISearchResults::executeQuery
        
            typedef void ( ISearchResults_wrapper::*executeQuery_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) ;
            
            ISearchResults_exposer.def( 
                "executeQuery"
                , executeQuery_function_type( &ISearchResults_wrapper::executeQuery )
                , ( ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("query"), ::boost::python::arg("objectsMap") ) );
        
        }
        { //::osiris::ISearchResults::setPartial
        
            typedef void ( *setPartial_function_type )( ::osiris::ISearchResults &,bool );
            
            ISearchResults_exposer.def( 
                "setPartial"
                , setPartial_function_type( &ISearchResults_wrapper::setPartial )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("partial") ) );
        
        }
        { //property "partial"[fget=::osiris::ISearchResults::getPartial, fset=::osiris::ISearchResults::setPartial]
        
            typedef bool ( ::osiris::ISearchResults::*fget )(  ) const;
            typedef void ( ::osiris::ISearchResults::*fset )( bool ) ;
            
            ISearchResults_exposer.add_property( 
                "partial"
                , fget( &::osiris::ISearchResults::getPartial )
                , fset( &::osiris::ISearchResults::setPartial )
                , "get\\set property, built on top of \"bool osiris::ISearchResults::getPartial() const [member function]\" and \"void osiris::ISearchResults::setPartial(bool partial) [member function]\"" );
        
        }
        { //property "elapsed"[fget=::osiris::ISearchResults::getElapsed]
        
            typedef double ( ::osiris::ISearchResults::*fget )(  ) const;
            
            ISearchResults_exposer.add_property( 
                "elapsed"
                , fget( &::osiris::ISearchResults::getElapsed )
                , "get property, built on top of \"double osiris::ISearchResults::getElapsed() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::ISearchResults > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::ISearchResults >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::ISearchResults >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::ISearchResults > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::ISearchResults >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::SearchResultsDatabase >, boost::shared_ptr< ::osiris::ISearchResults > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::SearchResultsLucene >, boost::shared_ptr< ::osiris::ISearchResults > >();
    }

}
