// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "idexslresolver.h"
#include "idexslresolver.pypp.hpp"

namespace bp = boost::python;

struct IdeXSLResolver_wrapper : ::osiris::IdeXSLResolver, ::osiris::PythonWrapper< ::osiris::IdeXSLResolver > {

    IdeXSLResolver_wrapper(::osiris::IdeXSLResolver const & arg )
    : ::osiris::IdeXSLResolver( arg )
      , ::osiris::PythonWrapper< ::osiris::IdeXSLResolver >(){
        // copy constructor
        
    }

    IdeXSLResolver_wrapper(::boost::shared_ptr< osiris::IdeSkin > skin )
    : ::osiris::IdeXSLResolver( skin )
      , ::osiris::PythonWrapper< ::osiris::IdeXSLResolver >(){
        // constructor
    
    }

    virtual bool resolve( ::osiris::String const & uri, ::osiris::String & resolved ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_resolve = this->get_override( "resolve" ) )
            return func_resolve( boost::ref(uri), boost::ref(resolved) );
        else{
            __pystate.leave();
            return this->::osiris::IdeXSLResolver::resolve( boost::ref(uri), boost::ref(resolved) );
        }
    }
    
    bool default_resolve( ::osiris::String const & uri, ::osiris::String & resolved ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IdeXSLResolver::resolve( boost::ref(uri), boost::ref(resolved) );
    }

};

void register_IdeXSLResolver_class(){

    { //::osiris::IdeXSLResolver
        typedef ::boost::python::class_< IdeXSLResolver_wrapper, ::boost::python::bases< ::osiris::IXMLResolver > > IdeXSLResolver_exposer_t;
        IdeXSLResolver_exposer_t IdeXSLResolver_exposer = IdeXSLResolver_exposer_t( "IdeXSLResolver", ::boost::python::init< ::boost::shared_ptr< osiris::IdeSkin > >(( ::boost::python::arg("skin") )) );
        ::boost::python::scope IdeXSLResolver_scope( IdeXSLResolver_exposer );
        ::boost::python::implicitly_convertible< ::boost::shared_ptr< osiris::IdeSkin >, ::osiris::IdeXSLResolver >();
        { //::osiris::IdeXSLResolver::resolve
        
            typedef bool ( ::osiris::IdeXSLResolver::*resolve_function_type )( ::osiris::String const &,::osiris::String & ) ;
            typedef bool ( IdeXSLResolver_wrapper::*default_resolve_function_type )( ::osiris::String const &,::osiris::String & ) ;
            
            IdeXSLResolver_exposer.def( 
                "resolve"
                , resolve_function_type(&::osiris::IdeXSLResolver::resolve)
                , default_resolve_function_type(&IdeXSLResolver_wrapper::default_resolve)
                , ( ::boost::python::arg("uri"), ::boost::python::arg("resolved") ) );
        
        }
    }

}
