// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmlpage.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "iidepage.h"
#include "iidemainpage.h"
#include "iideportalpage.h"
#include "htmlpage.pypp.hpp"

namespace bp = boost::python;

struct HtmlPage_wrapper : ::osiris::HtmlPage, ::osiris::PythonWrapper< ::osiris::HtmlPage > {

    HtmlPage_wrapper(::boost::shared_ptr< osiris::HttpSession > session )
    : ::osiris::HtmlPage( session )
      , ::osiris::PythonWrapper< ::osiris::HtmlPage >(){
        // constructor
    
    }

    static boost::python::object getAjax( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getAjax();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPageMode( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpPageMode result = inst.getPageMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getAction( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getAction();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getMethod( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpMethod result = inst.getMethod();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getEncoding( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpEncoding result = inst.getEncoding();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPageTitle( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getPageTitle();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getPageDescription( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getPageDescription();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getFavicon( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getFavicon();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getViewStates( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DataTree const & result = inst.getViewStates();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::DataTree const & >( result ) );
    }

    static boost::python::object getAdditionalHead( ::osiris::HtmlPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getAdditionalHead();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static void reload( ::osiris::HtmlPage & inst, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & additionalParams=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.reload(additionalParams);
        __pythreadSaver.restore();
    }

    virtual bool transmit(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_transmit = this->get_override( "transmit" ) )
            return func_transmit(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::transmit(  );
        }
    }
    
    bool default_transmit(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::transmit( );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::getSession( );
    }

    virtual ::osiris::String getBaseTitle(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getBaseTitle = this->get_override( "getBaseTitle" ) )
            return func_getBaseTitle(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::getBaseTitle(  );
        }
    }
    
    virtual ::osiris::String default_getBaseTitle(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::getBaseTitle( );
    }

    virtual ::osiris::String formatTitle(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_formatTitle = this->get_override( "formatTitle" ) )
            return func_formatTitle(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::formatTitle(  );
        }
    }
    
    virtual ::osiris::String default_formatTitle(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::formatTitle( );
    }

    virtual void loadViewState(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_loadViewState = this->get_override( "loadViewState" ) )
            func_loadViewState(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::loadViewState(  );
        }
    }
    
    virtual void default_loadViewState(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::loadViewState( );
    }

    virtual void raiseEvents(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_raiseEvents = this->get_override( "raiseEvents" ) )
            func_raiseEvents(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::raiseEvents(  );
        }
    }
    
    virtual void default_raiseEvents(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::raiseEvents( );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::onInit( );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::onPreRender( );
    }

    static void addCss( ::osiris::HtmlPage & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addCss(url);
        __pythreadSaver.restore();
    }

    static void addJavascript( ::osiris::HtmlPage & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addJavascript(url);
        __pythreadSaver.restore();
    }

    static void addLinkTag( ::osiris::HtmlPage & inst, ::boost::shared_ptr< osiris::HtmlLinkTag > linktag ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addLinkTag(linktag);
        __pythreadSaver.restore();
    }

    static void addMetaTag( ::osiris::HtmlPage & inst, ::boost::shared_ptr< osiris::HtmlMetaTag > metatag ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addMetaTag(metatag);
        __pythreadSaver.restore();
    }

    static boost::python::object hasCss( ::osiris::HtmlPage const & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasCss(url);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasJavascript( ::osiris::HtmlPage const & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasJavascript(url);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::onRender( boost::ref(writer) );
    }

    virtual bool onTransmit( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onTransmit = this->get_override( "onTransmit" ) )
            return func_onTransmit( boost::ref(writer) );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::onTransmit( boost::ref(writer) );
        }
    }
    
    virtual bool default_onTransmit( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::onTransmit( boost::ref(writer) );
    }

    virtual void redirect( ::std::string const & url ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_redirect = this->get_override( "redirect" ) )
            func_redirect( url );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::redirect( url );
        }
    }
    
    void default_redirect( ::std::string const & url ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::redirect( url );
    }

    virtual void renderBody( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderBody = this->get_override( "renderBody" ) )
            func_renderBody( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderBody( boost::ref(writer) );
        }
    }
    
    virtual void default_renderBody( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderBody( boost::ref(writer) );
    }

    virtual void renderContent( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderContent = this->get_override( "renderContent" ) )
            func_renderContent( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderContent( boost::ref(writer) );
        }
    }
    
    virtual void default_renderContent( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderContent( boost::ref(writer) );
    }

    virtual void renderCss( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderCss = this->get_override( "renderCss" ) )
            func_renderCss( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderCss( boost::ref(writer) );
        }
    }
    
    virtual void default_renderCss( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderCss( boost::ref(writer) );
    }

    virtual void renderForm( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderForm = this->get_override( "renderForm" ) )
            func_renderForm( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderForm( boost::ref(writer) );
        }
    }
    
    virtual void default_renderForm( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderForm( boost::ref(writer) );
    }

    virtual void renderHead( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderHead = this->get_override( "renderHead" ) )
            func_renderHead( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderHead( boost::ref(writer) );
        }
    }
    
    virtual void default_renderHead( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderHead( boost::ref(writer) );
    }

    virtual void renderHeader( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderHeader = this->get_override( "renderHeader" ) )
            func_renderHeader( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderHeader( boost::ref(writer) );
        }
    }
    
    virtual void default_renderHeader( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderHeader( boost::ref(writer) );
    }

    virtual void renderJavascripts( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderJavascripts = this->get_override( "renderJavascripts" ) )
            func_renderJavascripts( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderJavascripts( boost::ref(writer) );
        }
    }
    
    virtual void default_renderJavascripts( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderJavascripts( boost::ref(writer) );
    }

    virtual void renderLinktags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderLinktags = this->get_override( "renderLinktags" ) )
            func_renderLinktags( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderLinktags( boost::ref(writer) );
        }
    }
    
    virtual void default_renderLinktags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderLinktags( boost::ref(writer) );
    }

    virtual void renderMetatags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderMetatags = this->get_override( "renderMetatags" ) )
            func_renderMetatags( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderMetatags( boost::ref(writer) );
        }
    }
    
    virtual void default_renderMetatags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderMetatags( boost::ref(writer) );
    }

    virtual void renderViewState( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderViewState = this->get_override( "renderViewState" ) )
            func_renderViewState( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderViewState( boost::ref(writer) );
        }
    }
    
    virtual void default_renderViewState( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderViewState( boost::ref(writer) );
    }

    virtual void reportError( ::osiris::HttpStatusCode status ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_reportError = this->get_override( "reportError" ) )
            func_reportError( status );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::reportError( status );
        }
    }
    
    void default_reportError( ::osiris::HttpStatusCode status ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::reportError( status );
    }

    static void setAction( ::osiris::HtmlPage & inst, ::osiris::String const & action ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAction(action);
        __pythreadSaver.restore();
    }

    static void setAdditionalHead( ::osiris::HtmlPage & inst, ::osiris::String const & additionalHead ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAdditionalHead(additionalHead);
        __pythreadSaver.restore();
    }

    static void setAjax( ::osiris::HtmlPage & inst, bool ajax ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAjax(ajax);
        __pythreadSaver.restore();
    }

    static void setEncoding( ::osiris::HtmlPage & inst, ::osiris::HttpEncoding encoding ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setEncoding(encoding);
        __pythreadSaver.restore();
    }

    static void setFavicon( ::osiris::HtmlPage & inst, ::osiris::String const & favicon ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFavicon(favicon);
        __pythreadSaver.restore();
    }

    static void setMethod( ::osiris::HtmlPage & inst, ::osiris::HttpMethod method ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setMethod(method);
        __pythreadSaver.restore();
    }

    static void setPageDescription( ::osiris::HtmlPage & inst, ::osiris::String const & title ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPageDescription(title);
        __pythreadSaver.restore();
    }

    static void setPageMode( ::osiris::HtmlPage & inst, ::osiris::HttpPageMode mode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPageMode(mode);
        __pythreadSaver.restore();
    }

    static void setPageTitle( ::osiris::HtmlPage & inst, ::osiris::String const & title ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPageTitle(title);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(osiris::null) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_HtmlPage_class(){

    { //::osiris::HtmlPage
        typedef ::boost::python::class_< HtmlPage_wrapper, ::boost::python::bases< ::osiris::IHtmlControl >, ::boost::noncopyable > HtmlPage_exposer_t;
        HtmlPage_exposer_t HtmlPage_exposer = HtmlPage_exposer_t( "HtmlPage", ::boost::python::init< ::boost::shared_ptr< osiris::HttpSession > >(( ::boost::python::arg("session") )) );
        ::boost::python::scope HtmlPage_scope( HtmlPage_exposer );
        ::boost::python::implicitly_convertible< ::boost::shared_ptr< osiris::HttpSession >, ::osiris::HtmlPage >();
        { //::osiris::HtmlPage::getAjax
        
            typedef boost::python::object ( *getAjax_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getAjax"
                , getAjax_function_type( &HtmlPage_wrapper::getAjax ) );
        
        }
        { //::osiris::HtmlPage::getPageMode
        
            typedef boost::python::object ( *getPageMode_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getPageMode"
                , getPageMode_function_type( &HtmlPage_wrapper::getPageMode ) );
        
        }
        { //::osiris::HtmlPage::getAction
        
            typedef boost::python::object ( *getAction_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getAction"
                , getAction_function_type( &HtmlPage_wrapper::getAction ) );
        
        }
        { //::osiris::HtmlPage::getMethod
        
            typedef boost::python::object ( *getMethod_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getMethod"
                , getMethod_function_type( &HtmlPage_wrapper::getMethod ) );
        
        }
        { //::osiris::HtmlPage::getEncoding
        
            typedef boost::python::object ( *getEncoding_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getEncoding"
                , getEncoding_function_type( &HtmlPage_wrapper::getEncoding ) );
        
        }
        { //::osiris::HtmlPage::getPageTitle
        
            typedef boost::python::object ( *getPageTitle_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getPageTitle"
                , getPageTitle_function_type( &HtmlPage_wrapper::getPageTitle ) );
        
        }
        { //::osiris::HtmlPage::getPageDescription
        
            typedef boost::python::object ( *getPageDescription_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getPageDescription"
                , getPageDescription_function_type( &HtmlPage_wrapper::getPageDescription ) );
        
        }
        { //::osiris::HtmlPage::getFavicon
        
            typedef boost::python::object ( *getFavicon_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getFavicon"
                , getFavicon_function_type( &HtmlPage_wrapper::getFavicon ) );
        
        }
        { //::osiris::HtmlPage::getViewStates
        
            typedef boost::python::object ( *getViewStates_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getViewStates"
                , getViewStates_function_type( &HtmlPage_wrapper::getViewStates ) );
        
        }
        { //::osiris::HtmlPage::getAdditionalHead
        
            typedef boost::python::object ( *getAdditionalHead_function_type )( ::osiris::HtmlPage const & );
            
            HtmlPage_exposer.def( 
                "getAdditionalHead"
                , getAdditionalHead_function_type( &HtmlPage_wrapper::getAdditionalHead ) );
        
        }
        { //::osiris::HtmlPage::reload
        
            typedef void ( *reload_function_type )( ::osiris::HtmlPage &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            HtmlPage_exposer.def( 
                "reload"
                , reload_function_type( &HtmlPage_wrapper::reload )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("additionalParams")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::HtmlPage::transmit
        
            typedef bool ( ::osiris::HtmlPage::*transmit_function_type )(  ) ;
            typedef bool ( HtmlPage_wrapper::*default_transmit_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "transmit"
                , transmit_function_type(&::osiris::HtmlPage::transmit)
                , default_transmit_function_type(&HtmlPage_wrapper::default_transmit) );
        
        }
        { //::osiris::HtmlPage::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::HtmlPage::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( HtmlPage_wrapper::*default_getSession_function_type )(  ) const;
            
            HtmlPage_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::HtmlPage::getSession)
                , default_getSession_function_type(&HtmlPage_wrapper::default_getSession) );
        
        }
        { //::osiris::HtmlPage::getBaseTitle
        
            typedef ::osiris::String ( HtmlPage_wrapper::*getBaseTitle_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "getBaseTitle"
                , getBaseTitle_function_type( &HtmlPage_wrapper::default_getBaseTitle ) );
        
        }
        { //::osiris::HtmlPage::formatTitle
        
            typedef ::osiris::String ( HtmlPage_wrapper::*formatTitle_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "formatTitle"
                , formatTitle_function_type( &HtmlPage_wrapper::default_formatTitle ) );
        
        }
        { //::osiris::HtmlPage::loadViewState
        
            typedef void ( HtmlPage_wrapper::*loadViewState_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "loadViewState"
                , loadViewState_function_type( &HtmlPage_wrapper::default_loadViewState ) );
        
        }
        { //::osiris::HtmlPage::raiseEvents
        
            typedef void ( HtmlPage_wrapper::*raiseEvents_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "raiseEvents"
                , raiseEvents_function_type( &HtmlPage_wrapper::default_raiseEvents ) );
        
        }
        { //::osiris::HtmlPage::onInit
        
            typedef void ( HtmlPage_wrapper::*onInit_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "onInit"
                , onInit_function_type( &HtmlPage_wrapper::default_onInit ) );
        
        }
        { //::osiris::HtmlPage::onPreRender
        
            typedef void ( HtmlPage_wrapper::*onPreRender_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &HtmlPage_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::HtmlPage::addCss
        
            typedef void ( *addCss_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "addCss"
                , addCss_function_type( &HtmlPage_wrapper::addCss )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlPage::addJavascript
        
            typedef void ( *addJavascript_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "addJavascript"
                , addJavascript_function_type( &HtmlPage_wrapper::addJavascript )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlPage::addLinkTag
        
            typedef void ( *addLinkTag_function_type )( ::osiris::HtmlPage &,::boost::shared_ptr<osiris::HtmlLinkTag> );
            
            HtmlPage_exposer.def( 
                "addLinkTag"
                , addLinkTag_function_type( &HtmlPage_wrapper::addLinkTag )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("linktag") ) );
        
        }
        { //::osiris::HtmlPage::addMetaTag
        
            typedef void ( *addMetaTag_function_type )( ::osiris::HtmlPage &,::boost::shared_ptr<osiris::HtmlMetaTag> );
            
            HtmlPage_exposer.def( 
                "addMetaTag"
                , addMetaTag_function_type( &HtmlPage_wrapper::addMetaTag )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("metatag") ) );
        
        }
        { //::osiris::HtmlPage::hasCss
        
            typedef boost::python::object ( *hasCss_function_type )( ::osiris::HtmlPage const &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "hasCss"
                , hasCss_function_type( &HtmlPage_wrapper::hasCss )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlPage::hasJavascript
        
            typedef boost::python::object ( *hasJavascript_function_type )( ::osiris::HtmlPage const &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "hasJavascript"
                , hasJavascript_function_type( &HtmlPage_wrapper::hasJavascript )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlPage::onRender
        
            typedef void ( HtmlPage_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "onRender"
                , onRender_function_type( &HtmlPage_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::onTransmit
        
            typedef bool ( HtmlPage_wrapper::*onTransmit_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "onTransmit"
                , onTransmit_function_type( &HtmlPage_wrapper::default_onTransmit )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::redirect
        
            typedef void ( ::osiris::HtmlPage::*redirect_function_type )( ::std::string const & ) ;
            typedef void ( HtmlPage_wrapper::*default_redirect_function_type )( ::std::string const & ) ;
            
            HtmlPage_exposer.def( 
                "redirect"
                , redirect_function_type(&::osiris::HtmlPage::redirect)
                , default_redirect_function_type(&HtmlPage_wrapper::default_redirect)
                , ( ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlPage::renderBody
        
            typedef void ( HtmlPage_wrapper::*renderBody_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderBody"
                , renderBody_function_type( &HtmlPage_wrapper::default_renderBody )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderContent
        
            typedef void ( HtmlPage_wrapper::*renderContent_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderContent"
                , renderContent_function_type( &HtmlPage_wrapper::default_renderContent )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderCss
        
            typedef void ( HtmlPage_wrapper::*renderCss_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderCss"
                , renderCss_function_type( &HtmlPage_wrapper::default_renderCss )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderForm
        
            typedef void ( HtmlPage_wrapper::*renderForm_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderForm"
                , renderForm_function_type( &HtmlPage_wrapper::default_renderForm )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderHead
        
            typedef void ( HtmlPage_wrapper::*renderHead_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderHead"
                , renderHead_function_type( &HtmlPage_wrapper::default_renderHead )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderHeader
        
            typedef void ( HtmlPage_wrapper::*renderHeader_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderHeader"
                , renderHeader_function_type( &HtmlPage_wrapper::default_renderHeader )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderJavascripts
        
            typedef void ( HtmlPage_wrapper::*renderJavascripts_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderJavascripts"
                , renderJavascripts_function_type( &HtmlPage_wrapper::default_renderJavascripts )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderLinktags
        
            typedef void ( HtmlPage_wrapper::*renderLinktags_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderLinktags"
                , renderLinktags_function_type( &HtmlPage_wrapper::default_renderLinktags )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderMetatags
        
            typedef void ( HtmlPage_wrapper::*renderMetatags_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderMetatags"
                , renderMetatags_function_type( &HtmlPage_wrapper::default_renderMetatags )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderViewState
        
            typedef void ( HtmlPage_wrapper::*renderViewState_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderViewState"
                , renderViewState_function_type( &HtmlPage_wrapper::default_renderViewState )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::reportError
        
            typedef void ( ::osiris::HtmlPage::*reportError_function_type )( ::osiris::HttpStatusCode ) ;
            typedef void ( HtmlPage_wrapper::*default_reportError_function_type )( ::osiris::HttpStatusCode ) ;
            
            HtmlPage_exposer.def( 
                "reportError"
                , reportError_function_type(&::osiris::HtmlPage::reportError)
                , default_reportError_function_type(&HtmlPage_wrapper::default_reportError)
                , ( ::boost::python::arg("status") ) );
        
        }
        { //::osiris::HtmlPage::setAction
        
            typedef void ( *setAction_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "setAction"
                , setAction_function_type( &HtmlPage_wrapper::setAction )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("action") ) );
        
        }
        { //::osiris::HtmlPage::setAdditionalHead
        
            typedef void ( *setAdditionalHead_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "setAdditionalHead"
                , setAdditionalHead_function_type( &HtmlPage_wrapper::setAdditionalHead )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("additionalHead") ) );
        
        }
        { //::osiris::HtmlPage::setAjax
        
            typedef void ( *setAjax_function_type )( ::osiris::HtmlPage &,bool );
            
            HtmlPage_exposer.def( 
                "setAjax"
                , setAjax_function_type( &HtmlPage_wrapper::setAjax )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("ajax") ) );
        
        }
        { //::osiris::HtmlPage::setEncoding
        
            typedef void ( *setEncoding_function_type )( ::osiris::HtmlPage &,::osiris::HttpEncoding );
            
            HtmlPage_exposer.def( 
                "setEncoding"
                , setEncoding_function_type( &HtmlPage_wrapper::setEncoding )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("encoding") ) );
        
        }
        { //::osiris::HtmlPage::setFavicon
        
            typedef void ( *setFavicon_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "setFavicon"
                , setFavicon_function_type( &HtmlPage_wrapper::setFavicon )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("favicon") ) );
        
        }
        { //::osiris::HtmlPage::setMethod
        
            typedef void ( *setMethod_function_type )( ::osiris::HtmlPage &,::osiris::HttpMethod );
            
            HtmlPage_exposer.def( 
                "setMethod"
                , setMethod_function_type( &HtmlPage_wrapper::setMethod )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("method") ) );
        
        }
        { //::osiris::HtmlPage::setPageDescription
        
            typedef void ( *setPageDescription_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "setPageDescription"
                , setPageDescription_function_type( &HtmlPage_wrapper::setPageDescription )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("title") ) );
        
        }
        { //::osiris::HtmlPage::setPageMode
        
            typedef void ( *setPageMode_function_type )( ::osiris::HtmlPage &,::osiris::HttpPageMode );
            
            HtmlPage_exposer.def( 
                "setPageMode"
                , setPageMode_function_type( &HtmlPage_wrapper::setPageMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("mode") ) );
        
        }
        { //::osiris::HtmlPage::setPageTitle
        
            typedef void ( *setPageTitle_function_type )( ::osiris::HtmlPage &,::osiris::String const & );
            
            HtmlPage_exposer.def( 
                "setPageTitle"
                , setPageTitle_function_type( &HtmlPage_wrapper::setPageTitle )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("title") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( HtmlPage_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            HtmlPage_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &HtmlPage_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( HtmlPage_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            HtmlPage_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &HtmlPage_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( HtmlPage_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            HtmlPage_exposer.def( 
                "onEvent"
                , onEvent_function_type( &HtmlPage_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( HtmlPage_wrapper::*onLoad_function_type )(  ) ;
            
            HtmlPage_exposer.def( 
                "onLoad"
                , onLoad_function_type( &HtmlPage_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( HtmlPage_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            HtmlPage_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &HtmlPage_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( HtmlPage_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlPage_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &HtmlPage_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlPage_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&HtmlPage_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlPage_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlPage_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&HtmlPage_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( HtmlPage_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlPage_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &HtmlPage_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "ajax"[fget=::osiris::HtmlPage::getAjax, fset=::osiris::HtmlPage::setAjax]
        
            typedef bool ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( bool ) ;
            
            HtmlPage_exposer.add_property( 
                "ajax"
                , fget( &::osiris::HtmlPage::getAjax )
                , fset( &::osiris::HtmlPage::setAjax )
                , "get\\set property, built on top of \"bool osiris::HtmlPage::getAjax() const [member function]\" and \"void osiris::HtmlPage::setAjax(bool ajax) [member function]\"" );
        
        }
        { //property "pageMode"[fget=::osiris::HtmlPage::getPageMode, fset=::osiris::HtmlPage::setPageMode]
        
            typedef ::osiris::HttpPageMode ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::HttpPageMode ) ;
            
            HtmlPage_exposer.add_property( 
                "pageMode"
                , fget( &::osiris::HtmlPage::getPageMode )
                , fset( &::osiris::HtmlPage::setPageMode )
                , "get\\set property, built on top of \"osiris::HttpPageMode osiris::HtmlPage::getPageMode() const [member function]\" and \"void osiris::HtmlPage::setPageMode(osiris::HttpPageMode mode) [member function]\"" );
        
        }
        { //property "action"[fget=::osiris::HtmlPage::getAction, fset=::osiris::HtmlPage::setAction]
        
            typedef ::osiris::String const & ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::String const & ) ;
            
            HtmlPage_exposer.add_property( 
                "action"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getAction )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlPage::setAction )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlPage::getAction() const [member function]\" and \"void osiris::HtmlPage::setAction(osiris::String const & action) [member function]\"" );
        
        }
        { //property "method"[fget=::osiris::HtmlPage::getMethod, fset=::osiris::HtmlPage::setMethod]
        
            typedef ::osiris::HttpMethod ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::HttpMethod ) ;
            
            HtmlPage_exposer.add_property( 
                "method"
                , fget( &::osiris::HtmlPage::getMethod )
                , fset( &::osiris::HtmlPage::setMethod )
                , "get\\set property, built on top of \"osiris::HttpMethod osiris::HtmlPage::getMethod() const [member function]\" and \"void osiris::HtmlPage::setMethod(osiris::HttpMethod method) [member function]\"" );
        
        }
        { //property "encoding"[fget=::osiris::HtmlPage::getEncoding, fset=::osiris::HtmlPage::setEncoding]
        
            typedef ::osiris::HttpEncoding ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::HttpEncoding ) ;
            
            HtmlPage_exposer.add_property( 
                "encoding"
                , fget( &::osiris::HtmlPage::getEncoding )
                , fset( &::osiris::HtmlPage::setEncoding )
                , "get\\set property, built on top of \"osiris::HttpEncoding osiris::HtmlPage::getEncoding() const [member function]\" and \"void osiris::HtmlPage::setEncoding(osiris::HttpEncoding encoding) [member function]\"" );
        
        }
        { //property "pageTitle"[fget=::osiris::HtmlPage::getPageTitle, fset=::osiris::HtmlPage::setPageTitle]
        
            typedef ::osiris::String const & ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::String const & ) ;
            
            HtmlPage_exposer.add_property( 
                "pageTitle"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getPageTitle )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlPage::setPageTitle )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlPage::getPageTitle() const [member function]\" and \"void osiris::HtmlPage::setPageTitle(osiris::String const & title) [member function]\"" );
        
        }
        { //property "pageDescription"[fget=::osiris::HtmlPage::getPageDescription, fset=::osiris::HtmlPage::setPageDescription]
        
            typedef ::osiris::String const & ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::String const & ) ;
            
            HtmlPage_exposer.add_property( 
                "pageDescription"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getPageDescription )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlPage::setPageDescription )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlPage::getPageDescription() const [member function]\" and \"void osiris::HtmlPage::setPageDescription(osiris::String const & title) [member function]\"" );
        
        }
        { //property "favicon"[fget=::osiris::HtmlPage::getFavicon, fset=::osiris::HtmlPage::setFavicon]
        
            typedef ::osiris::String const & ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::String const & ) ;
            
            HtmlPage_exposer.add_property( 
                "favicon"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getFavicon )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlPage::setFavicon )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlPage::getFavicon() const [member function]\" and \"void osiris::HtmlPage::setFavicon(osiris::String const & favicon) [member function]\"" );
        
        }
        { //property "additionalHead"[fget=::osiris::HtmlPage::getAdditionalHead, fset=::osiris::HtmlPage::setAdditionalHead]
        
            typedef ::osiris::String const & ( ::osiris::HtmlPage::*fget )(  ) const;
            typedef void ( ::osiris::HtmlPage::*fset )( ::osiris::String const & ) ;
            
            HtmlPage_exposer.add_property( 
                "additionalHead"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getAdditionalHead )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlPage::setAdditionalHead )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlPage::getAdditionalHead() const [member function]\" and \"void osiris::HtmlPage::setAdditionalHead(osiris::String const & additionalHead) [member function]\"" );
        
        }
        { //property "viewStates"[fget=::osiris::HtmlPage::getViewStates]
        
            typedef ::osiris::DataTree const & ( ::osiris::HtmlPage::*fget )(  ) const;
            
            HtmlPage_exposer.add_property( 
                "viewStates"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlPage::getViewStates )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::DataTree const & osiris::HtmlPage::getViewStates() const [member function]\"" );
        
        }
        { //property "session"[fget=::osiris::HtmlPage::getSession]
        
            typedef ::boost::shared_ptr<osiris::HttpSession> ( ::osiris::HtmlPage::*fget )(  ) const;
            
            HtmlPage_exposer.add_property( 
                "session"
                , fget( &::osiris::HtmlPage::getSession )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpSession> osiris::HtmlPage::getSession() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HtmlPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlPage >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlPage >, boost::shared_ptr< ::boost::signals::trackable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlPage >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IHtmlControl > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlPage >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPage >, boost::shared_ptr< ::osiris::HtmlPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IMainPage >, boost::shared_ptr< ::osiris::HtmlPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlVirtualPage< osiris::IMainPage > >, boost::shared_ptr< ::osiris::HtmlPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPortalPage >, boost::shared_ptr< ::osiris::HtmlPage > >();
    }

}
