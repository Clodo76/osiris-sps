// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "hash.h"
#include "hash.pypp.hpp"

namespace bp = boost::python;

static boost::python::object getBuffer_e10c41c63eedae5320db1e2cc1c636f4( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::Buffer const & result = inst.getBuffer();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::Buffer const & >( result ) );
}

static boost::python::object getType_7b89e04ebf4c407b56241cc78984a336( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::HashType result = inst.getType();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object empty_71d463499f8c561b6b008dcc041df5e3( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.empty();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isValid_d25f6f62946854ef08c514927dfe8c40( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isValid();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void clear_33c159c8df40dc0cdcab62c91e9eb41a( ::osiris::Hash & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.clear();
    __pythreadSaver.restore();
}

static boost::python::object toHex_a7f4b05a177e3c9e122958e23c7574f5( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = inst.toHex();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toBase64_68973db75c92ae8ad70b2c4b23672fef( ::osiris::Hash const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = inst.toBase64();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void assign_a3d882c93517679f2ebf75883990593f( ::osiris::Hash & inst, ::osiris::Buffer const & buffer, ::osiris::HashType type=(::osiris::hashTypeUnknown) ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.assign(buffer, type);
    __pythreadSaver.restore();
}

static boost::python::object fromBase64_79a1b5d63ab9e9285c6371d33cf95160( ::osiris::Hash & inst, ::std::string const & str, ::osiris::HashType type=(::osiris::hashTypeUnknown) ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromBase64(str, type);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object fromHex_a187caddf1846ac42288fc0ce54c3535( ::osiris::Hash & inst, ::std::string const & str, ::osiris::HashType type=(::osiris::hashTypeUnknown) ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.fromHex(str, type);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

void register_Hash_class(){

    { //::osiris::Hash
        typedef ::boost::python::class_< ::osiris::Hash > Hash_exposer_t;
        Hash_exposer_t Hash_exposer = Hash_exposer_t( "Hash", ::boost::python::init< >() );
        ::boost::python::scope Hash_scope( Hash_exposer );
        Hash_exposer.def( ::boost::python::init< ::osiris::Buffer const &, ::osiris::HashType >(( ::boost::python::arg("buffer"), ::boost::python::arg("type") )) );
        Hash_exposer.def( ::boost::python::init< ::osiris::Hash const & >(( ::boost::python::arg("second") )) );
        { //::osiris::Hash::getBuffer
        
            typedef boost::python::object ( *getBuffer_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "getBuffer"
                , getBuffer_function_type( &getBuffer_e10c41c63eedae5320db1e2cc1c636f4 ) );
        
        }
        { //::osiris::Hash::getType
        
            typedef boost::python::object ( *getType_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "getType"
                , getType_function_type( &getType_7b89e04ebf4c407b56241cc78984a336 ) );
        
        }
        { //::osiris::Hash::empty
        
            typedef boost::python::object ( *empty_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "empty"
                , empty_function_type( &empty_71d463499f8c561b6b008dcc041df5e3 ) );
        
        }
        { //::osiris::Hash::isValid
        
            typedef boost::python::object ( *isValid_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "isValid"
                , isValid_function_type( &isValid_d25f6f62946854ef08c514927dfe8c40 ) );
        
        }
        { //::osiris::Hash::clear
        
            typedef void ( *clear_function_type )( ::osiris::Hash & );
            
            Hash_exposer.def( 
                "clear"
                , clear_function_type( &clear_33c159c8df40dc0cdcab62c91e9eb41a ) );
        
        }
        { //::osiris::Hash::toHex
        
            typedef boost::python::object ( *toHex_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "toHex"
                , toHex_function_type( &toHex_a7f4b05a177e3c9e122958e23c7574f5 ) );
        
        }
        { //::osiris::Hash::toBase64
        
            typedef boost::python::object ( *toBase64_function_type )( ::osiris::Hash const & );
            
            Hash_exposer.def( 
                "toBase64"
                , toBase64_function_type( &toBase64_68973db75c92ae8ad70b2c4b23672fef ) );
        
        }
        { //::osiris::Hash::assign
        
            typedef void ( *assign_function_type )( ::osiris::Hash &,::osiris::Buffer const &,::osiris::HashType );
            
            Hash_exposer.def( 
                "assign"
                , assign_function_type( &assign_a3d882c93517679f2ebf75883990593f )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("buffer"), ::boost::python::arg("type")=(::osiris::hashTypeUnknown) ) );
        
        }
        { //::osiris::Hash::fromBase64
        
            typedef boost::python::object ( *fromBase64_function_type )( ::osiris::Hash &,::std::string const &,::osiris::HashType );
            
            Hash_exposer.def( 
                "fromBase64"
                , fromBase64_function_type( &fromBase64_79a1b5d63ab9e9285c6371d33cf95160 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str"), ::boost::python::arg("type")=(::osiris::hashTypeUnknown) ) );
        
        }
        { //::osiris::Hash::fromHex
        
            typedef boost::python::object ( *fromHex_function_type )( ::osiris::Hash &,::std::string const &,::osiris::HashType );
            
            Hash_exposer.def( 
                "fromHex"
                , fromHex_function_type( &fromHex_a187caddf1846ac42288fc0ce54c3535 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str"), ::boost::python::arg("type")=(::osiris::hashTypeUnknown) ) );
        
        }
        { //::osiris::Hash::operator=
        
            typedef ::osiris::Hash & ( ::osiris::Hash::*assign_function_type )( ::osiris::Hash const & ) ;
            
            Hash_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::Hash::operator= )
                , ( ::boost::python::arg("second") )
                , bp::return_self< >() );
        
        }
        Hash_exposer.def( ::boost::python::self == ::boost::python::self );
        Hash_exposer.def_readonly( "EMPTY", ::osiris::Hash::EMPTY );
        { //property "buffer"[fget=::osiris::Hash::getBuffer]
        
            typedef ::osiris::Buffer const & ( ::osiris::Hash::*fget )(  ) const;
            
            Hash_exposer.add_property( 
                "buffer"
                , ::boost::python::make_function( 
                      fget( &::osiris::Hash::getBuffer )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::Buffer const & osiris::Hash::getBuffer() const [member function]\"" );
        
        }
        { //property "type"[fget=::osiris::Hash::getType]
        
            typedef ::osiris::HashType ( ::osiris::Hash::*fget )(  ) const;
            
            Hash_exposer.add_property( 
                "type"
                , fget( &::osiris::Hash::getType )
                , "get property, built on top of \"osiris::HashType osiris::Hash::getType() const [member function]\"" );
        
        }
    }

}
