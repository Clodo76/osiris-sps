// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmlmetatag.h"
#include "htmlwriter.h"
#include "htmlmetatag.pypp.hpp"

namespace bp = boost::python;

struct HtmlMetaTag_wrapper : ::osiris::HtmlMetaTag, ::osiris::PythonWrapper< ::osiris::HtmlMetaTag > {

    HtmlMetaTag_wrapper(::osiris::HtmlMetaTag const & arg )
    : ::osiris::HtmlMetaTag( arg )
      , ::osiris::PythonWrapper< ::osiris::HtmlMetaTag >(){
        // copy constructor
        
    }

    HtmlMetaTag_wrapper( )
    : ::osiris::HtmlMetaTag( )
      , ::osiris::PythonWrapper< ::osiris::HtmlMetaTag >(){
        // nullptr constructor
    
    }

    static boost::python::object getName( ::osiris::HtmlMetaTag const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getName();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getHttpEquiv( ::osiris::HtmlMetaTag const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getHttpEquiv();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getContent( ::osiris::HtmlMetaTag const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getContent();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getLang( ::osiris::HtmlMetaTag const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getLang();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getUrl( ::osiris::HtmlMetaTag const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getUrl();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object createByHttpEquiv( ::osiris::String const & httpEquiv, ::osiris::String const & content=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlMetaTag> result = ::osiris::HtmlMetaTag::createByHttpEquiv(httpEquiv, content);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object createByName( ::osiris::String const & name, ::osiris::String const & content=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlMetaTag> result = ::osiris::HtmlMetaTag::createByName(name, content);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void render( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_render = this->get_override( "render" ) )
            func_render( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlMetaTag::render( boost::ref(writer) );
        }
    }
    
    void default_render( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlMetaTag::render( boost::ref(writer) );
    }

    static void setContent( ::osiris::HtmlMetaTag & inst, ::osiris::String const & content ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContent(content);
        __pythreadSaver.restore();
    }

    static void setHttpEquiv( ::osiris::HtmlMetaTag & inst, ::osiris::String const & httpEquiv ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHttpEquiv(httpEquiv);
        __pythreadSaver.restore();
    }

    static void setLang( ::osiris::HtmlMetaTag & inst, ::osiris::String const & lang ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLang(lang);
        __pythreadSaver.restore();
    }

    static void setName( ::osiris::HtmlMetaTag & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setName(name);
        __pythreadSaver.restore();
    }

    static void setUrl( ::osiris::HtmlMetaTag & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setUrl(url);
        __pythreadSaver.restore();
    }

};

void register_HtmlMetaTag_class(){

    { //::osiris::HtmlMetaTag
        typedef ::boost::python::class_< HtmlMetaTag_wrapper, ::boost::noncopyable > HtmlMetaTag_exposer_t;
        HtmlMetaTag_exposer_t HtmlMetaTag_exposer = HtmlMetaTag_exposer_t( "HtmlMetaTag", ::boost::python::no_init );
        ::boost::python::scope HtmlMetaTag_scope( HtmlMetaTag_exposer );
        HtmlMetaTag_exposer.def( ::boost::python::init< >() );
        { //::osiris::HtmlMetaTag::getName
        
            typedef boost::python::object ( *getName_function_type )( ::osiris::HtmlMetaTag const & );
            
            HtmlMetaTag_exposer.def( 
                "getName"
                , getName_function_type( &HtmlMetaTag_wrapper::getName ) );
        
        }
        { //::osiris::HtmlMetaTag::getHttpEquiv
        
            typedef boost::python::object ( *getHttpEquiv_function_type )( ::osiris::HtmlMetaTag const & );
            
            HtmlMetaTag_exposer.def( 
                "getHttpEquiv"
                , getHttpEquiv_function_type( &HtmlMetaTag_wrapper::getHttpEquiv ) );
        
        }
        { //::osiris::HtmlMetaTag::getContent
        
            typedef boost::python::object ( *getContent_function_type )( ::osiris::HtmlMetaTag const & );
            
            HtmlMetaTag_exposer.def( 
                "getContent"
                , getContent_function_type( &HtmlMetaTag_wrapper::getContent ) );
        
        }
        { //::osiris::HtmlMetaTag::getLang
        
            typedef boost::python::object ( *getLang_function_type )( ::osiris::HtmlMetaTag const & );
            
            HtmlMetaTag_exposer.def( 
                "getLang"
                , getLang_function_type( &HtmlMetaTag_wrapper::getLang ) );
        
        }
        { //::osiris::HtmlMetaTag::getUrl
        
            typedef boost::python::object ( *getUrl_function_type )( ::osiris::HtmlMetaTag const & );
            
            HtmlMetaTag_exposer.def( 
                "getUrl"
                , getUrl_function_type( &HtmlMetaTag_wrapper::getUrl ) );
        
        }
        { //::osiris::HtmlMetaTag::createByHttpEquiv
        
            typedef boost::python::object ( *createByHttpEquiv_function_type )( ::osiris::String const &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "createByHttpEquiv"
                , createByHttpEquiv_function_type( &HtmlMetaTag_wrapper::createByHttpEquiv )
                , ( ::boost::python::arg("httpEquiv"), ::boost::python::arg("content")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::HtmlMetaTag::createByName
        
            typedef boost::python::object ( *createByName_function_type )( ::osiris::String const &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "createByName"
                , createByName_function_type( &HtmlMetaTag_wrapper::createByName )
                , ( ::boost::python::arg("name"), ::boost::python::arg("content")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::HtmlMetaTag::render
        
            typedef void ( ::osiris::HtmlMetaTag::*render_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlMetaTag_wrapper::*default_render_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlMetaTag_exposer.def( 
                "render"
                , render_function_type(&::osiris::HtmlMetaTag::render)
                , default_render_function_type(&HtmlMetaTag_wrapper::default_render)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlMetaTag::setContent
        
            typedef void ( *setContent_function_type )( ::osiris::HtmlMetaTag &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "setContent"
                , setContent_function_type( &HtmlMetaTag_wrapper::setContent )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("content") ) );
        
        }
        { //::osiris::HtmlMetaTag::setHttpEquiv
        
            typedef void ( *setHttpEquiv_function_type )( ::osiris::HtmlMetaTag &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "setHttpEquiv"
                , setHttpEquiv_function_type( &HtmlMetaTag_wrapper::setHttpEquiv )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("httpEquiv") ) );
        
        }
        { //::osiris::HtmlMetaTag::setLang
        
            typedef void ( *setLang_function_type )( ::osiris::HtmlMetaTag &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "setLang"
                , setLang_function_type( &HtmlMetaTag_wrapper::setLang )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("lang") ) );
        
        }
        { //::osiris::HtmlMetaTag::setName
        
            typedef void ( *setName_function_type )( ::osiris::HtmlMetaTag &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "setName"
                , setName_function_type( &HtmlMetaTag_wrapper::setName )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HtmlMetaTag::setUrl
        
            typedef void ( *setUrl_function_type )( ::osiris::HtmlMetaTag &,::osiris::String const & );
            
            HtmlMetaTag_exposer.def( 
                "setUrl"
                , setUrl_function_type( &HtmlMetaTag_wrapper::setUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        HtmlMetaTag_exposer.staticmethod( "createByHttpEquiv" );
        HtmlMetaTag_exposer.staticmethod( "createByName" );
        { //property "name"[fget=::osiris::HtmlMetaTag::getName, fset=::osiris::HtmlMetaTag::setName]
        
            typedef ::osiris::String const & ( ::osiris::HtmlMetaTag::*fget )(  ) const;
            typedef void ( ::osiris::HtmlMetaTag::*fset )( ::osiris::String const & ) ;
            
            HtmlMetaTag_exposer.add_property( 
                "name"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlMetaTag::getName )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlMetaTag::setName )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlMetaTag::getName() const [member function]\" and \"void osiris::HtmlMetaTag::setName(osiris::String const & name) [member function]\"" );
        
        }
        { //property "httpEquiv"[fget=::osiris::HtmlMetaTag::getHttpEquiv, fset=::osiris::HtmlMetaTag::setHttpEquiv]
        
            typedef ::osiris::String const & ( ::osiris::HtmlMetaTag::*fget )(  ) const;
            typedef void ( ::osiris::HtmlMetaTag::*fset )( ::osiris::String const & ) ;
            
            HtmlMetaTag_exposer.add_property( 
                "httpEquiv"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlMetaTag::getHttpEquiv )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlMetaTag::setHttpEquiv )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlMetaTag::getHttpEquiv() const [member function]\" and \"void osiris::HtmlMetaTag::setHttpEquiv(osiris::String const & httpEquiv) [member function]\"" );
        
        }
        { //property "content"[fget=::osiris::HtmlMetaTag::getContent, fset=::osiris::HtmlMetaTag::setContent]
        
            typedef ::osiris::String const & ( ::osiris::HtmlMetaTag::*fget )(  ) const;
            typedef void ( ::osiris::HtmlMetaTag::*fset )( ::osiris::String const & ) ;
            
            HtmlMetaTag_exposer.add_property( 
                "content"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlMetaTag::getContent )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlMetaTag::setContent )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlMetaTag::getContent() const [member function]\" and \"void osiris::HtmlMetaTag::setContent(osiris::String const & content) [member function]\"" );
        
        }
        { //property "lang"[fget=::osiris::HtmlMetaTag::getLang, fset=::osiris::HtmlMetaTag::setLang]
        
            typedef ::osiris::String const & ( ::osiris::HtmlMetaTag::*fget )(  ) const;
            typedef void ( ::osiris::HtmlMetaTag::*fset )( ::osiris::String const & ) ;
            
            HtmlMetaTag_exposer.add_property( 
                "lang"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlMetaTag::getLang )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlMetaTag::setLang )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlMetaTag::getLang() const [member function]\" and \"void osiris::HtmlMetaTag::setLang(osiris::String const & lang) [member function]\"" );
        
        }
        { //property "url"[fget=::osiris::HtmlMetaTag::getUrl, fset=::osiris::HtmlMetaTag::setUrl]
        
            typedef ::osiris::String const & ( ::osiris::HtmlMetaTag::*fget )(  ) const;
            typedef void ( ::osiris::HtmlMetaTag::*fset )( ::osiris::String const & ) ;
            
            HtmlMetaTag_exposer.add_property( 
                "url"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlMetaTag::getUrl )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlMetaTag::setUrl )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlMetaTag::getUrl() const [member function]\" and \"void osiris::HtmlMetaTag::setUrl(osiris::String const & url) [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HtmlMetaTag > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlMetaTag >, boost::shared_ptr< ::osiris::Object > >();
    }

}
