// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpphysicaldirectory.h"
#include "datetime.h"
#include "httppath.h"
#include "httpsessionstate.h"
#include "httpenumerateddirectorycallback.h"
#include "httpdirectorycallback.h"
#include "httpphysicaldirectory.pypp.hpp"

namespace bp = boost::python;

struct HttpPhysicalDirectory_wrapper : ::osiris::HttpPhysicalDirectory, ::osiris::PythonWrapper< ::osiris::HttpPhysicalDirectory > {

    HttpPhysicalDirectory_wrapper(::osiris::String const & name, ::osiris::String const & physicalPath=osiris::String::EMPTY )
    : ::osiris::HttpPhysicalDirectory( boost::ref(name), boost::ref(physicalPath) )
      , ::osiris::PythonWrapper< ::osiris::HttpPhysicalDirectory >(){
        // constructor
    
    }

    static boost::python::object getDefaultFile( ::osiris::HttpPhysicalDirectory const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getDefaultFile();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getPhysicalPath( ::osiris::HttpPhysicalDirectory const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getPhysicalPath();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    virtual bool handle( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_handle = this->get_override( "handle" ) )
            return func_handle( session, boost::ref(path) );
        else{
            __pystate.leave();
            return this->::osiris::HttpPhysicalDirectory::handle( session, boost::ref(path) );
        }
    }
    
    virtual bool default_handle( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpPhysicalDirectory::handle( session, boost::ref(path) );
    }

    static void setDefaultFile( ::osiris::HttpPhysicalDirectory & inst, ::osiris::String const & defaultFile ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setDefaultFile(defaultFile);
        __pythreadSaver.restore();
    }

    static void setPhysicalPath( ::osiris::HttpPhysicalDirectory & inst, ::osiris::String const & physicalPath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPhysicalPath(physicalPath);
        __pythreadSaver.restore();
    }

    virtual ::boost::shared_ptr< osiris::HttpSessionState > createSessionState( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::TimeDuration const & duration ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createSessionState = this->get_override( "createSessionState" ) )
            return func_createSessionState( session, boost::ref(duration) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectory::createSessionState( session, boost::ref(duration) );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSessionState > default_createSessionState( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::TimeDuration const & duration ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectory::createSessionState( session, boost::ref(duration) );
    }

    virtual ::osiris::String getSessionCookie( ::boost::shared_ptr< osiris::HttpSession > session ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSessionCookie = this->get_override( "getSessionCookie" ) )
            return func_getSessionCookie( session );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectory::getSessionCookie( session );
        }
    }
    
    ::osiris::String default_getSessionCookie( ::boost::shared_ptr< osiris::HttpSession > session ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectory::getSessionCookie( session );
    }

    virtual bool isAccessible( ::boost::shared_ptr< osiris::HttpSession > session ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_isAccessible = this->get_override( "isAccessible" ) )
            return func_isAccessible( session );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectory::isAccessible( session );
        }
    }
    
    bool default_isAccessible( ::boost::shared_ptr< osiris::HttpSession > session ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectory::isAccessible( session );
    }

    virtual bool process( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_process = this->get_override( "process" ) )
            return func_process( session, boost::ref(path) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectory::process( session, boost::ref(path) );
        }
    }
    
    bool default_process( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectory::process( session, boost::ref(path) );
    }

};

void register_HttpPhysicalDirectory_class(){

    { //::osiris::HttpPhysicalDirectory
        typedef ::boost::python::class_< HttpPhysicalDirectory_wrapper, ::boost::python::bases< ::osiris::IHttpDirectory >, ::boost::noncopyable > HttpPhysicalDirectory_exposer_t;
        HttpPhysicalDirectory_exposer_t HttpPhysicalDirectory_exposer = HttpPhysicalDirectory_exposer_t( "HttpPhysicalDirectory", ::boost::python::init< ::osiris::String const &, ::boost::python::optional< ::osiris::String const & > >(( ::boost::python::arg("name"), ::boost::python::arg("physicalPath")=osiris::String::EMPTY )) );
        ::boost::python::scope HttpPhysicalDirectory_scope( HttpPhysicalDirectory_exposer );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::HttpPhysicalDirectory >();
        { //::osiris::HttpPhysicalDirectory::getDefaultFile
        
            typedef boost::python::object ( *getDefaultFile_function_type )( ::osiris::HttpPhysicalDirectory const & );
            
            HttpPhysicalDirectory_exposer.def( 
                "getDefaultFile"
                , getDefaultFile_function_type( &HttpPhysicalDirectory_wrapper::getDefaultFile ) );
        
        }
        { //::osiris::HttpPhysicalDirectory::getPhysicalPath
        
            typedef boost::python::object ( *getPhysicalPath_function_type )( ::osiris::HttpPhysicalDirectory const & );
            
            HttpPhysicalDirectory_exposer.def( 
                "getPhysicalPath"
                , getPhysicalPath_function_type( &HttpPhysicalDirectory_wrapper::getPhysicalPath ) );
        
        }
        { //::osiris::HttpPhysicalDirectory::handle
        
            typedef bool ( HttpPhysicalDirectory_wrapper::*handle_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            
            HttpPhysicalDirectory_exposer.def( 
                "handle"
                , handle_function_type( &HttpPhysicalDirectory_wrapper::default_handle )
                , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::HttpPhysicalDirectory::setDefaultFile
        
            typedef void ( *setDefaultFile_function_type )( ::osiris::HttpPhysicalDirectory &,::osiris::String const & );
            
            HttpPhysicalDirectory_exposer.def( 
                "setDefaultFile"
                , setDefaultFile_function_type( &HttpPhysicalDirectory_wrapper::setDefaultFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("defaultFile") ) );
        
        }
        { //::osiris::HttpPhysicalDirectory::setPhysicalPath
        
            typedef void ( *setPhysicalPath_function_type )( ::osiris::HttpPhysicalDirectory &,::osiris::String const & );
            
            HttpPhysicalDirectory_exposer.def( 
                "setPhysicalPath"
                , setPhysicalPath_function_type( &HttpPhysicalDirectory_wrapper::setPhysicalPath )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("physicalPath") ) );
        
        }
        { //::osiris::IHttpDirectory::createSessionState
        
            typedef ::boost::shared_ptr< osiris::HttpSessionState > ( ::osiris::IHttpDirectory::*createSessionState_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::TimeDuration const & ) const;
            typedef ::boost::shared_ptr< osiris::HttpSessionState > ( HttpPhysicalDirectory_wrapper::*default_createSessionState_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::TimeDuration const & ) const;
            
            HttpPhysicalDirectory_exposer.def( 
                "createSessionState"
                , createSessionState_function_type(&::osiris::IHttpDirectory::createSessionState)
                , default_createSessionState_function_type(&HttpPhysicalDirectory_wrapper::default_createSessionState)
                , ( ::boost::python::arg("session"), ::boost::python::arg("duration") ) );
        
        }
        { //::osiris::IHttpDirectory::getSessionCookie
        
            typedef ::osiris::String ( ::osiris::IHttpDirectory::*getSessionCookie_function_type )( ::boost::shared_ptr< osiris::HttpSession > ) const;
            typedef ::osiris::String ( HttpPhysicalDirectory_wrapper::*default_getSessionCookie_function_type )( ::boost::shared_ptr< osiris::HttpSession > ) const;
            
            HttpPhysicalDirectory_exposer.def( 
                "getSessionCookie"
                , getSessionCookie_function_type(&::osiris::IHttpDirectory::getSessionCookie)
                , default_getSessionCookie_function_type(&HttpPhysicalDirectory_wrapper::default_getSessionCookie)
                , ( ::boost::python::arg("session") ) );
        
        }
        { //::osiris::IHttpDirectory::isAccessible
        
            typedef bool ( ::osiris::IHttpDirectory::*isAccessible_function_type )( ::boost::shared_ptr< osiris::HttpSession > ) ;
            typedef bool ( HttpPhysicalDirectory_wrapper::*default_isAccessible_function_type )( ::boost::shared_ptr< osiris::HttpSession > ) ;
            
            HttpPhysicalDirectory_exposer.def( 
                "isAccessible"
                , isAccessible_function_type(&::osiris::IHttpDirectory::isAccessible)
                , default_isAccessible_function_type(&HttpPhysicalDirectory_wrapper::default_isAccessible)
                , ( ::boost::python::arg("session") ) );
        
        }
        { //::osiris::IHttpDirectory::process
        
            typedef bool ( ::osiris::IHttpDirectory::*process_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            typedef bool ( HttpPhysicalDirectory_wrapper::*default_process_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            
            HttpPhysicalDirectory_exposer.def( 
                "process"
                , process_function_type(&::osiris::IHttpDirectory::process)
                , default_process_function_type(&HttpPhysicalDirectory_wrapper::default_process)
                , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) );
        
        }
        { //property "defaultFile"[fget=::osiris::HttpPhysicalDirectory::getDefaultFile, fset=::osiris::HttpPhysicalDirectory::setDefaultFile]
        
            typedef ::osiris::String const & ( ::osiris::HttpPhysicalDirectory::*fget )(  ) const;
            typedef void ( ::osiris::HttpPhysicalDirectory::*fset )( ::osiris::String const & ) ;
            
            HttpPhysicalDirectory_exposer.add_property( 
                "defaultFile"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpPhysicalDirectory::getDefaultFile )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpPhysicalDirectory::setDefaultFile )
                , "get\\set property, built on top of \"osiris::String const & osiris::HttpPhysicalDirectory::getDefaultFile() const [member function]\" and \"void osiris::HttpPhysicalDirectory::setDefaultFile(osiris::String const & defaultFile) [member function]\"" );
        
        }
        { //property "physicalPath"[fget=::osiris::HttpPhysicalDirectory::getPhysicalPath, fset=::osiris::HttpPhysicalDirectory::setPhysicalPath]
        
            typedef ::osiris::String const & ( ::osiris::HttpPhysicalDirectory::*fget )(  ) const;
            typedef void ( ::osiris::HttpPhysicalDirectory::*fset )( ::osiris::String const & ) ;
            
            HttpPhysicalDirectory_exposer.add_property( 
                "physicalPath"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpPhysicalDirectory::getPhysicalPath )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpPhysicalDirectory::setPhysicalPath )
                , "get\\set property, built on top of \"osiris::String const & osiris::HttpPhysicalDirectory::getPhysicalPath() const [member function]\" and \"void osiris::HttpPhysicalDirectory::setPhysicalPath(osiris::String const & physicalPath) [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HttpPhysicalDirectory > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpPhysicalDirectory >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpPhysicalDirectory >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpPhysicalDirectory >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IHttpDirectory > > >();
    }

}
