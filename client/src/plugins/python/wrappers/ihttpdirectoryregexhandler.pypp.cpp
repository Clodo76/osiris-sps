// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ihttpdirectoryregexhandler.h"
#include "httppath.h"
#include "ihttpdirectoryregexhandler.pypp.hpp"

namespace bp = boost::python;

struct IHttpDirectoryRegexHandler_wrapper : ::osiris::IHttpDirectoryRegexHandler, ::osiris::PythonWrapper< ::osiris::IHttpDirectoryRegexHandler > {

    IHttpDirectoryRegexHandler_wrapper( )
    : ::osiris::IHttpDirectoryRegexHandler( )
      , ::osiris::PythonWrapper< ::osiris::IHttpDirectoryRegexHandler >(){
        // nullptr constructor
    
    }

    virtual bool handleRequest( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_handleRequest = this->get_override( "handleRequest" ) )
            return func_handleRequest( session, boost::ref(path) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectoryRegexHandler::handleRequest( session, boost::ref(path) );
        }
    }
    
    bool default_handleRequest( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectoryRegexHandler::handleRequest( session, boost::ref(path) );
    }

    static boost::python::object addRegex( ::osiris::IHttpDirectoryRegexHandler & inst, ::osiris::String const & regex, bool nocase=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.addRegex(regex, nocase);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object addRegexFile( ::osiris::IHttpDirectoryRegexHandler & inst, ::osiris::String const & fileExtension ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.addRegexFile(fileExtension);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool matchRequest( ::osiris::String const & url ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_matchRequest = this->get_override( "matchRequest" ) )
            return func_matchRequest( boost::ref(url) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpDirectoryRegexHandler::matchRequest( boost::ref(url) );
        }
    }
    
    virtual bool default_matchRequest( ::osiris::String const & url ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpDirectoryRegexHandler::matchRequest( boost::ref(url) );
    }

    virtual bool processRequest( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_processRequest = this->get_override( "processRequest" );
        return func_processRequest( session, boost::ref(path) );
    }

};

void register_IHttpDirectoryRegexHandler_class(){

    ::boost::python::class_< IHttpDirectoryRegexHandler_wrapper, ::boost::python::bases< ::osiris::IHttpDirectoryHandler >, ::boost::noncopyable >( "IHttpDirectoryRegexHandler", ::boost::python::init< >() )    
        .def( 
            "handleRequest"
            , (bool ( ::osiris::IHttpDirectoryRegexHandler::* )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) )(&::osiris::IHttpDirectoryRegexHandler::handleRequest)
            , (bool ( IHttpDirectoryRegexHandler_wrapper::* )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) )(&IHttpDirectoryRegexHandler_wrapper::default_handleRequest)
            , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) )    
        .def( 
            "addRegex"
            , (boost::python::object (*)( ::osiris::IHttpDirectoryRegexHandler &,::osiris::String const &,bool ))( &IHttpDirectoryRegexHandler_wrapper::addRegex )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("regex"), ::boost::python::arg("nocase")=(bool)(true) ) )    
        .def( 
            "addRegexFile"
            , (boost::python::object (*)( ::osiris::IHttpDirectoryRegexHandler &,::osiris::String const & ))( &IHttpDirectoryRegexHandler_wrapper::addRegexFile )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("fileExtension") ) )    
        .def( 
            "matchRequest"
            , (bool ( IHttpDirectoryRegexHandler_wrapper::* )( ::osiris::String const & ) const)(&IHttpDirectoryRegexHandler_wrapper::default_matchRequest)
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "processRequest"
            , (bool ( IHttpDirectoryRegexHandler_wrapper::* )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) )(&IHttpDirectoryRegexHandler_wrapper::processRequest)
            , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) );

}
