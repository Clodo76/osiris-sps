// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "filesystem.h"
#include "filesystem.pypp.hpp"

namespace bp = boost::python;

struct FileSystem_wrapper : ::osiris::FileSystem, ::osiris::PythonWrapper< ::osiris::FileSystem > {

    FileSystem_wrapper( )
    : ::osiris::FileSystem( )
      , ::osiris::PythonWrapper< ::osiris::FileSystem >(){
        // null constructor
    
    }

    static boost::python::object getSpaceInfo_23f361e3568db88061396a5d22b2ec64( ::osiris::FileSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::FileSystem::SpaceInfo result = inst.getSpaceInfo();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getExecutablePath( ::osiris::FileSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getExecutablePath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getExecutableName( ::osiris::FileSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getExecutableName();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object rename( ::osiris::FileSystem & inst, ::osiris::String const & oldName, ::osiris::String const & newName ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.rename(oldName, newName);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object makeFilename( ::osiris::FileSystem & inst, ::osiris::String const & name, ::osiris::String const & extension ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.makeFilename(name, extension);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDirectories( ::osiris::FileSystem & inst, ::osiris::String const & path, ::osiris::StringList & directories, bool fullpath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getDirectories(path, directories, fullpath);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFiles( ::osiris::FileSystem & inst, ::osiris::String const & path, ::osiris::StringList & files, bool fullpath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getFiles(path, files, fullpath);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object copyFile( ::osiris::FileSystem & inst, ::osiris::String const & sourceFile, ::osiris::String const & targetFile ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.copyFile(sourceFile, targetFile);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object moveFile( ::osiris::FileSystem & inst, ::osiris::String const & sourceFile, ::osiris::String const & targetFile ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.moveFile(sourceFile, targetFile);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object comparePaths( ::osiris::FileSystem & inst, ::osiris::String const & first, ::osiris::String const & second ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.comparePaths(first, second);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object createDirectory( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.createDirectory(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object createValidFilename( ::osiris::FileSystem & inst, ::osiris::String const & str ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.createValidFilename(str);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object directoryExists( ::osiris::FileSystem const & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.directoryExists(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object ensureDirectory( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.ensureDirectory(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object exists( ::osiris::FileSystem const & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.exists(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object fileExists( ::osiris::FileSystem const & inst, ::osiris::String const & filename ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.fileExists(filename);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getExtension( ::osiris::FileSystem & inst, ::osiris::String const & path, bool lower=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getExtension(path, lower);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFileName( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getFileName(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFilePath( ::osiris::FileSystem & inst, ::osiris::String const & fullPath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getFilePath(fullPath);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFileSize( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getFileSize(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFileTitle( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getFileTitle(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFullPath( ::osiris::FileSystem const & inst, ::osiris::String const & relativePath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getFullPath(relativePath);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSpaceInfo_e995199c2c7e9ee0a8319f6ccb3467d7( ::osiris::FileSystem const & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::FileSystem::SpaceInfo result = inst.getSpaceInfo(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void initExecutableName( ::osiris::FileSystem & inst, ::osiris::String const & arg0 ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.initExecutableName(arg0);
        __pythreadSaver.restore();
    }

    static boost::python::object isDirectory( ::osiris::FileSystem const & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isDirectory(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static bool isDots( ::osiris::String const & name ){
        return ::osiris::FileSystem::isDots( boost::ref(name) );
    }

    static boost::python::object isRelativePath( ::osiris::FileSystem const & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isRelativePath(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object remove( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.remove(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object removeDirectory( ::osiris::FileSystem & inst, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.removeDirectory(path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_FileSystem_class(){

    { //::osiris::FileSystem
        typedef ::boost::python::class_< FileSystem_wrapper, ::boost::python::bases< ::osiris::StaticSingleton< osiris::FileSystem, true > >, ::boost::noncopyable > FileSystem_exposer_t;
        FileSystem_exposer_t FileSystem_exposer = FileSystem_exposer_t( "FileSystem", ::boost::python::no_init );
        ::boost::python::scope FileSystem_scope( FileSystem_exposer );
        ::boost::python::class_< ::osiris::FileSystem::SpaceInfo >( "SpaceInfo", ::boost::python::init< >() )    
            .def_readwrite( "available", &::osiris::FileSystem::SpaceInfo::available )    
            .def_readwrite( "capacity", &::osiris::FileSystem::SpaceInfo::capacity )    
            .def_readwrite( "free", &::osiris::FileSystem::SpaceInfo::free )    
            .def_readonly( "unknown", ::osiris::FileSystem::SpaceInfo::unknown )    
            .def_readwrite( "used", &::osiris::FileSystem::SpaceInfo::used );
        FileSystem_exposer.def( ::boost::python::init< >() );
        { //::osiris::FileSystem::getSpaceInfo
        
            typedef boost::python::object ( *getSpaceInfo_function_type )( ::osiris::FileSystem const & );
            
            FileSystem_exposer.def( 
                "getSpaceInfo"
                , getSpaceInfo_function_type( &FileSystem_wrapper::getSpaceInfo_23f361e3568db88061396a5d22b2ec64 ) );
        
        }
        { //::osiris::FileSystem::getExecutablePath
        
            typedef boost::python::object ( *getExecutablePath_function_type )( ::osiris::FileSystem & );
            
            FileSystem_exposer.def( 
                "getExecutablePath"
                , getExecutablePath_function_type( &FileSystem_wrapper::getExecutablePath ) );
        
        }
        { //::osiris::FileSystem::getExecutableName
        
            typedef boost::python::object ( *getExecutableName_function_type )( ::osiris::FileSystem & );
            
            FileSystem_exposer.def( 
                "getExecutableName"
                , getExecutableName_function_type( &FileSystem_wrapper::getExecutableName ) );
        
        }
        { //::osiris::FileSystem::rename
        
            typedef boost::python::object ( *rename_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "rename"
                , rename_function_type( &FileSystem_wrapper::rename )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("oldName"), ::boost::python::arg("newName") ) );
        
        }
        { //::osiris::FileSystem::makeFilename
        
            typedef boost::python::object ( *makeFilename_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "makeFilename"
                , makeFilename_function_type( &FileSystem_wrapper::makeFilename )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("extension") ) );
        
        }
        { //::osiris::FileSystem::getDirectories
        
            typedef boost::python::object ( *getDirectories_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::StringList &,bool );
            
            FileSystem_exposer.def( 
                "getDirectories"
                , getDirectories_function_type( &FileSystem_wrapper::getDirectories )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path"), ::boost::python::arg("directories"), ::boost::python::arg("fullpath") ) );
        
        }
        { //::osiris::FileSystem::getFiles
        
            typedef boost::python::object ( *getFiles_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::StringList &,bool );
            
            FileSystem_exposer.def( 
                "getFiles"
                , getFiles_function_type( &FileSystem_wrapper::getFiles )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path"), ::boost::python::arg("files"), ::boost::python::arg("fullpath") ) );
        
        }
        { //::osiris::FileSystem::copyFile
        
            typedef boost::python::object ( *copyFile_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "copyFile"
                , copyFile_function_type( &FileSystem_wrapper::copyFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sourceFile"), ::boost::python::arg("targetFile") ) );
        
        }
        { //::osiris::FileSystem::moveFile
        
            typedef boost::python::object ( *moveFile_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "moveFile"
                , moveFile_function_type( &FileSystem_wrapper::moveFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sourceFile"), ::boost::python::arg("targetFile") ) );
        
        }
        { //::osiris::FileSystem::comparePaths
        
            typedef boost::python::object ( *comparePaths_function_type )( ::osiris::FileSystem &,::osiris::String const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "comparePaths"
                , comparePaths_function_type( &FileSystem_wrapper::comparePaths )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("first"), ::boost::python::arg("second") ) );
        
        }
        { //::osiris::FileSystem::createDirectory
        
            typedef boost::python::object ( *createDirectory_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "createDirectory"
                , createDirectory_function_type( &FileSystem_wrapper::createDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::createValidFilename
        
            typedef boost::python::object ( *createValidFilename_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "createValidFilename"
                , createValidFilename_function_type( &FileSystem_wrapper::createValidFilename )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::FileSystem::directoryExists
        
            typedef boost::python::object ( *directoryExists_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "directoryExists"
                , directoryExists_function_type( &FileSystem_wrapper::directoryExists )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::ensureDirectory
        
            typedef boost::python::object ( *ensureDirectory_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "ensureDirectory"
                , ensureDirectory_function_type( &FileSystem_wrapper::ensureDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::exists
        
            typedef boost::python::object ( *exists_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "exists"
                , exists_function_type( &FileSystem_wrapper::exists )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::fileExists
        
            typedef boost::python::object ( *fileExists_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "fileExists"
                , fileExists_function_type( &FileSystem_wrapper::fileExists )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("filename") ) );
        
        }
        { //::osiris::FileSystem::getExtension
        
            typedef boost::python::object ( *getExtension_function_type )( ::osiris::FileSystem &,::osiris::String const &,bool );
            
            FileSystem_exposer.def( 
                "getExtension"
                , getExtension_function_type( &FileSystem_wrapper::getExtension )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path"), ::boost::python::arg("lower")=(bool)(true) ) );
        
        }
        { //::osiris::FileSystem::getFileName
        
            typedef boost::python::object ( *getFileName_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getFileName"
                , getFileName_function_type( &FileSystem_wrapper::getFileName )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::getFilePath
        
            typedef boost::python::object ( *getFilePath_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getFilePath"
                , getFilePath_function_type( &FileSystem_wrapper::getFilePath )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fullPath") ) );
        
        }
        { //::osiris::FileSystem::getFileSize
        
            typedef boost::python::object ( *getFileSize_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getFileSize"
                , getFileSize_function_type( &FileSystem_wrapper::getFileSize )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::getFileTitle
        
            typedef boost::python::object ( *getFileTitle_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getFileTitle"
                , getFileTitle_function_type( &FileSystem_wrapper::getFileTitle )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::getFullPath
        
            typedef boost::python::object ( *getFullPath_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getFullPath"
                , getFullPath_function_type( &FileSystem_wrapper::getFullPath )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("relativePath") ) );
        
        }
        { //::osiris::FileSystem::getSpaceInfo
        
            typedef boost::python::object ( *getSpaceInfo_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "getSpaceInfo"
                , getSpaceInfo_function_type( &FileSystem_wrapper::getSpaceInfo_e995199c2c7e9ee0a8319f6ccb3467d7 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::initExecutableName
        
            typedef void ( *initExecutableName_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "initExecutableName"
                , initExecutableName_function_type( &FileSystem_wrapper::initExecutableName )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("arg0") ) );
        
        }
        { //::osiris::FileSystem::isDirectory
        
            typedef boost::python::object ( *isDirectory_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "isDirectory"
                , isDirectory_function_type( &FileSystem_wrapper::isDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::isDots
        
            typedef bool ( *isDots_function_type )( ::osiris::String const & );
            
            FileSystem_exposer.def( 
                "isDots"
                , isDots_function_type( &FileSystem_wrapper::isDots )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::FileSystem::isRelativePath
        
            typedef boost::python::object ( *isRelativePath_function_type )( ::osiris::FileSystem const &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "isRelativePath"
                , isRelativePath_function_type( &FileSystem_wrapper::isRelativePath )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::remove
        
            typedef boost::python::object ( *remove_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "remove"
                , remove_function_type( &FileSystem_wrapper::remove )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::FileSystem::removeDirectory
        
            typedef boost::python::object ( *removeDirectory_function_type )( ::osiris::FileSystem &,::osiris::String const & );
            
            FileSystem_exposer.def( 
                "removeDirectory"
                , removeDirectory_function_type( &FileSystem_wrapper::removeDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        FileSystem_exposer.staticmethod( "isDots" );
    }

}
