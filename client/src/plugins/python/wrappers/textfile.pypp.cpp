// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "textfile.h"
#include "textfile.pypp.hpp"

namespace bp = boost::python;

struct TextFile_wrapper : ::osiris::TextFile, ::osiris::PythonWrapper< ::osiris::TextFile > {

    TextFile_wrapper(::osiris::TextFile::Encoding encoding=::osiris::TextFile::feAscii )
    : ::osiris::TextFile( encoding )
      , ::osiris::PythonWrapper< ::osiris::TextFile >(){
        // constructor
    
    }

    TextFile_wrapper(::osiris::String const & filename, ::osiris::uint32 flags, ::osiris::TextFile::Encoding encoding=::osiris::TextFile::feAscii )
    : ::osiris::TextFile( boost::ref(filename), flags, encoding )
      , ::osiris::PythonWrapper< ::osiris::TextFile >(){
        // constructor
    
    }

    static boost::python::object getEncoding( ::osiris::TextFile const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::TextFile::Encoding result = inst.getEncoding();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object readFile_cde1b13fdd053442460d984199a199f3( ::osiris::String const & filename, ::osiris::String & str ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = ::osiris::TextFile::readFile(filename, str);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool open( ::osiris::String const & filename, ::osiris::uint32 flags ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_open = this->get_override( "open" ) )
            return func_open( boost::ref(filename), flags );
        else{
            __pystate.leave();
            return this->::osiris::TextFile::open( boost::ref(filename), flags );
        }
    }
    
    bool default_open( ::osiris::String const & filename, ::osiris::uint32 flags ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::TextFile::open( boost::ref(filename), flags );
    }

    bool readBOM(  ){
        return ::osiris::TextFile::readBOM(  );
    }

    bool writeBOM(  ){
        return ::osiris::TextFile::writeBOM(  );
    }

    bool _readLineAscii( ::osiris::String & line ){
        return ::osiris::TextFile::_readLineAscii( boost::ref(line) );
    }

    bool _readLineUnicode( ::osiris::String & line ){
        return ::osiris::TextFile::_readLineUnicode( boost::ref(line) );
    }

    bool _readLineUtf8( ::osiris::String & line ){
        return ::osiris::TextFile::_readLineUtf8( boost::ref(line) );
    }

    bool _writeLineAscii( ::std::string const & line ){
        return ::osiris::TextFile::_writeLineAscii( line );
    }

    bool _writeLineUnicode( ::osiris::String const & line ){
        return ::osiris::TextFile::_writeLineUnicode( boost::ref(line) );
    }

    bool _writeLineUtf8( ::std::string const & line ){
        return ::osiris::TextFile::_writeLineUtf8( line );
    }

    static boost::python::object readChar_bf33f3f75888b7c17c0621e6c3f8c9f5( ::osiris::TextFile & inst, char & c ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.readChar(c);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object readChar_40c038ecd49ff31870b6f9dbd9c91b35( ::osiris::TextFile & inst, ::osiris::wchar & c ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.readChar(c);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object readFile_272974ef8892a1fdb034c60d1afc761d( ::osiris::String const & filename ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = ::osiris::TextFile::readFile(filename);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object readLine( ::osiris::TextFile & inst, ::osiris::String & line ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.readLine(line);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setEncoding( ::osiris::TextFile & inst, ::osiris::TextFile::Encoding encoding ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setEncoding(encoding);
        __pythreadSaver.restore();
    }

    static boost::python::object writeChar_5275ff4b77471f4b66de0b9ac5f69315( ::osiris::TextFile & inst, char c ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.writeChar(c);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object writeChar_2179246a5e91d4f7502e5d5984449027( ::osiris::TextFile & inst, ::osiris::wchar c ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.writeChar(c);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object writeLine( ::osiris::TextFile & inst, ::osiris::String const & line ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.writeLine(line);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool close(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_close = this->get_override( "close" ) )
            return func_close(  );
        else{
            __pystate.leave();
            return this->::osiris::File::close(  );
        }
    }
    
    bool default_close(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::close( );
    }

    virtual bool eof(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_eof = this->get_override( "eof" ) )
            return func_eof(  );
        else{
            __pystate.leave();
            return this->::osiris::File::eof(  );
        }
    }
    
    bool default_eof(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::eof( );
    }

    virtual bool flush(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_flush = this->get_override( "flush" ) )
            return func_flush(  );
        else{
            __pystate.leave();
            return this->::osiris::File::flush(  );
        }
    }
    
    bool default_flush(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::flush( );
    }

    virtual bool is_open(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_is_open = this->get_override( "is_open" ) )
            return func_is_open(  );
        else{
            __pystate.leave();
            return this->::osiris::File::is_open(  );
        }
    }
    
    bool default_is_open(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::is_open( );
    }

    virtual ::osiris::uint32 peek( void * v, ::osiris::uint32 size ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_peek = this->get_override( "peek" ) )
            return func_peek( v, size );
        else{
            __pystate.leave();
            return this->::osiris::IStream::peek( v, size );
        }
    }
    
    ::osiris::uint32 default_peek( void * v, ::osiris::uint32 size ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IStream::peek( v, size );
    }

    virtual ::osiris::uint64 position(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_position = this->get_override( "position" ) )
            return func_position(  );
        else{
            __pystate.leave();
            return this->::osiris::File::position(  );
        }
    }
    
    ::osiris::uint64 default_position(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::position( );
    }

    virtual ::osiris::uint32 read( void * v, ::osiris::uint32 size ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_read = this->get_override( "read" ) )
            return func_read( v, size );
        else{
            __pystate.leave();
            return this->::osiris::File::read( v, size );
        }
    }
    
    ::osiris::uint32 default_read( void * v, ::osiris::uint32 size ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::read( v, size );
    }

    virtual bool seek( ::osiris::uint64 offset, ::osiris::SeekPosition from ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_seek = this->get_override( "seek" ) )
            return func_seek( offset, from );
        else{
            __pystate.leave();
            return this->::osiris::File::seek( offset, from );
        }
    }
    
    bool default_seek( ::osiris::uint64 offset, ::osiris::SeekPosition from ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::seek( offset, from );
    }

    virtual ::osiris::uint64 size(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_size = this->get_override( "size" ) )
            return func_size(  );
        else{
            __pystate.leave();
            return this->::osiris::File::size(  );
        }
    }
    
    ::osiris::uint64 default_size(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::size( );
    }

    virtual ::osiris::uint32 write( void const * v, ::osiris::uint32 size ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_write = this->get_override( "write" ) )
            return func_write( v, size );
        else{
            __pystate.leave();
            return this->::osiris::File::write( v, size );
        }
    }
    
    ::osiris::uint32 default_write( void const * v, ::osiris::uint32 size ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::File::write( v, size );
    }

};

void register_TextFile_class(){

    { //::osiris::TextFile
        typedef ::boost::python::class_< TextFile_wrapper, ::boost::python::bases< ::osiris::File >, ::boost::noncopyable > TextFile_exposer_t;
        TextFile_exposer_t TextFile_exposer = TextFile_exposer_t( "TextFile", ::boost::python::init< ::boost::python::optional< ::osiris::TextFile::Encoding > >(( ::boost::python::arg("encoding")=(long)(::osiris::TextFile::feAscii) )) );
        ::boost::python::scope TextFile_scope( TextFile_exposer );
        ::boost::python::enum_< ::osiris::TextFile::Encoding>("Encoding")
            .value("feAscii", ::osiris::TextFile::feAscii)
            .value("feUtf8", ::osiris::TextFile::feUtf8)
            .value("feUnicode", ::osiris::TextFile::feUnicode)
            .export_values()
            ;
        ::boost::python::implicitly_convertible< ::osiris::TextFile::Encoding, ::osiris::TextFile >();
        TextFile_exposer.def( ::boost::python::init< ::osiris::String const &, ::osiris::uint32, ::boost::python::optional< ::osiris::TextFile::Encoding > >(( ::boost::python::arg("filename"), ::boost::python::arg("flags"), ::boost::python::arg("encoding")=(long)(::osiris::TextFile::feAscii) )) );
        { //::osiris::TextFile::getEncoding
        
            typedef boost::python::object ( *getEncoding_function_type )( ::osiris::TextFile const & );
            
            TextFile_exposer.def( 
                "getEncoding"
                , getEncoding_function_type( &TextFile_wrapper::getEncoding ) );
        
        }
        { //::osiris::TextFile::readFile
        
            typedef boost::python::object ( *readFile_function_type )( ::osiris::String const &,::osiris::String & );
            
            TextFile_exposer.def( 
                "readFile"
                , readFile_function_type( &TextFile_wrapper::readFile_cde1b13fdd053442460d984199a199f3 )
                , ( ::boost::python::arg("filename"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::TextFile::open
        
            typedef bool ( ::osiris::TextFile::*open_function_type )( ::osiris::String const &,::osiris::uint32 ) ;
            typedef bool ( TextFile_wrapper::*default_open_function_type )( ::osiris::String const &,::osiris::uint32 ) ;
            
            TextFile_exposer.def( 
                "open"
                , open_function_type(&::osiris::TextFile::open)
                , default_open_function_type(&TextFile_wrapper::default_open)
                , ( ::boost::python::arg("filename"), ::boost::python::arg("flags") ) );
        
        }
        { //::osiris::TextFile::readBOM
        
            typedef bool ( TextFile_wrapper::*readBOM_function_type )(  ) ;
            
            TextFile_exposer.def( 
                "readBOM"
                , readBOM_function_type( &TextFile_wrapper::readBOM ) );
        
        }
        { //::osiris::TextFile::writeBOM
        
            typedef bool ( TextFile_wrapper::*writeBOM_function_type )(  ) ;
            
            TextFile_exposer.def( 
                "writeBOM"
                , writeBOM_function_type( &TextFile_wrapper::writeBOM ) );
        
        }
        { //::osiris::TextFile::_readLineAscii
        
            typedef bool ( TextFile_wrapper::*_readLineAscii_function_type )( ::osiris::String & ) ;
            
            TextFile_exposer.def( 
                "_readLineAscii"
                , _readLineAscii_function_type( &TextFile_wrapper::_readLineAscii )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::_readLineUnicode
        
            typedef bool ( TextFile_wrapper::*_readLineUnicode_function_type )( ::osiris::String & ) ;
            
            TextFile_exposer.def( 
                "_readLineUnicode"
                , _readLineUnicode_function_type( &TextFile_wrapper::_readLineUnicode )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::_readLineUtf8
        
            typedef bool ( TextFile_wrapper::*_readLineUtf8_function_type )( ::osiris::String & ) ;
            
            TextFile_exposer.def( 
                "_readLineUtf8"
                , _readLineUtf8_function_type( &TextFile_wrapper::_readLineUtf8 )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::_writeLineAscii
        
            typedef bool ( TextFile_wrapper::*_writeLineAscii_function_type )( ::std::string const & ) ;
            
            TextFile_exposer.def( 
                "_writeLineAscii"
                , _writeLineAscii_function_type( &TextFile_wrapper::_writeLineAscii )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::_writeLineUnicode
        
            typedef bool ( TextFile_wrapper::*_writeLineUnicode_function_type )( ::osiris::String const & ) ;
            
            TextFile_exposer.def( 
                "_writeLineUnicode"
                , _writeLineUnicode_function_type( &TextFile_wrapper::_writeLineUnicode )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::_writeLineUtf8
        
            typedef bool ( TextFile_wrapper::*_writeLineUtf8_function_type )( ::std::string const & ) ;
            
            TextFile_exposer.def( 
                "_writeLineUtf8"
                , _writeLineUtf8_function_type( &TextFile_wrapper::_writeLineUtf8 )
                , ( ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::readChar
        
            typedef boost::python::object ( *readChar_function_type )( ::osiris::TextFile &,char & );
            
            TextFile_exposer.def( 
                "readChar"
                , readChar_function_type( &TextFile_wrapper::readChar_bf33f3f75888b7c17c0621e6c3f8c9f5 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("c") ) );
        
        }
        { //::osiris::TextFile::readChar
        
            typedef boost::python::object ( *readChar_function_type )( ::osiris::TextFile &,::osiris::wchar & );
            
            TextFile_exposer.def( 
                "readChar"
                , readChar_function_type( &TextFile_wrapper::readChar_40c038ecd49ff31870b6f9dbd9c91b35 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("c") ) );
        
        }
        { //::osiris::TextFile::readFile
        
            typedef boost::python::object ( *readFile_function_type )( ::osiris::String const & );
            
            TextFile_exposer.def( 
                "readFile"
                , readFile_function_type( &TextFile_wrapper::readFile_272974ef8892a1fdb034c60d1afc761d )
                , ( ::boost::python::arg("filename") ) );
        
        }
        { //::osiris::TextFile::readLine
        
            typedef boost::python::object ( *readLine_function_type )( ::osiris::TextFile &,::osiris::String & );
            
            TextFile_exposer.def( 
                "readLine"
                , readLine_function_type( &TextFile_wrapper::readLine )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("line") ) );
        
        }
        { //::osiris::TextFile::setEncoding
        
            typedef void ( *setEncoding_function_type )( ::osiris::TextFile &,::osiris::TextFile::Encoding );
            
            TextFile_exposer.def( 
                "setEncoding"
                , setEncoding_function_type( &TextFile_wrapper::setEncoding )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("encoding") ) );
        
        }
        { //::osiris::TextFile::writeChar
        
            typedef boost::python::object ( *writeChar_function_type )( ::osiris::TextFile &,char );
            
            TextFile_exposer.def( 
                "writeChar"
                , writeChar_function_type( &TextFile_wrapper::writeChar_5275ff4b77471f4b66de0b9ac5f69315 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("c") ) );
        
        }
        { //::osiris::TextFile::writeChar
        
            typedef boost::python::object ( *writeChar_function_type )( ::osiris::TextFile &,::osiris::wchar );
            
            TextFile_exposer.def( 
                "writeChar"
                , writeChar_function_type( &TextFile_wrapper::writeChar_2179246a5e91d4f7502e5d5984449027 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("c") ) );
        
        }
        { //::osiris::TextFile::writeLine
        
            typedef boost::python::object ( *writeLine_function_type )( ::osiris::TextFile &,::osiris::String const & );
            
            TextFile_exposer.def( 
                "writeLine"
                , writeLine_function_type( &TextFile_wrapper::writeLine )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("line") ) );
        
        }
        { //::osiris::File::close
        
            typedef bool ( ::osiris::File::*close_function_type )(  ) ;
            typedef bool ( TextFile_wrapper::*default_close_function_type )(  ) ;
            
            TextFile_exposer.def( 
                "close"
                , close_function_type(&::osiris::File::close)
                , default_close_function_type(&TextFile_wrapper::default_close) );
        
        }
        { //::osiris::File::eof
        
            typedef bool ( ::osiris::File::*eof_function_type )(  ) const;
            typedef bool ( TextFile_wrapper::*default_eof_function_type )(  ) const;
            
            TextFile_exposer.def( 
                "eof"
                , eof_function_type(&::osiris::File::eof)
                , default_eof_function_type(&TextFile_wrapper::default_eof) );
        
        }
        { //::osiris::File::flush
        
            typedef bool ( ::osiris::File::*flush_function_type )(  ) ;
            typedef bool ( TextFile_wrapper::*default_flush_function_type )(  ) ;
            
            TextFile_exposer.def( 
                "flush"
                , flush_function_type(&::osiris::File::flush)
                , default_flush_function_type(&TextFile_wrapper::default_flush) );
        
        }
        { //::osiris::File::is_open
        
            typedef bool ( ::osiris::File::*is_open_function_type )(  ) const;
            typedef bool ( TextFile_wrapper::*default_is_open_function_type )(  ) const;
            
            TextFile_exposer.def( 
                "is_open"
                , is_open_function_type(&::osiris::File::is_open)
                , default_is_open_function_type(&TextFile_wrapper::default_is_open) );
        
        }
        { //::osiris::IStream::peek
        
            typedef ::osiris::uint32 ( ::osiris::IStream::*peek_function_type )( void *,::osiris::uint32 ) const;
            typedef ::osiris::uint32 ( TextFile_wrapper::*default_peek_function_type )( void *,::osiris::uint32 ) const;
            
            TextFile_exposer.def( 
                "peek"
                , peek_function_type(&::osiris::IStream::peek)
                , default_peek_function_type(&TextFile_wrapper::default_peek)
                , ( ::boost::python::arg("v"), ::boost::python::arg("size") ) );
        
        }
        { //::osiris::File::position
        
            typedef ::osiris::uint64 ( ::osiris::File::*position_function_type )(  ) const;
            typedef ::osiris::uint64 ( TextFile_wrapper::*default_position_function_type )(  ) const;
            
            TextFile_exposer.def( 
                "position"
                , position_function_type(&::osiris::File::position)
                , default_position_function_type(&TextFile_wrapper::default_position) );
        
        }
        { //::osiris::File::read
        
            typedef ::osiris::uint32 ( ::osiris::File::*read_function_type )( void *,::osiris::uint32 ) const;
            typedef ::osiris::uint32 ( TextFile_wrapper::*default_read_function_type )( void *,::osiris::uint32 ) const;
            
            TextFile_exposer.def( 
                "read"
                , read_function_type(&::osiris::File::read)
                , default_read_function_type(&TextFile_wrapper::default_read)
                , ( ::boost::python::arg("v"), ::boost::python::arg("size") ) );
        
        }
        { //::osiris::File::seek
        
            typedef bool ( ::osiris::File::*seek_function_type )( ::osiris::uint64,::osiris::SeekPosition ) const;
            typedef bool ( TextFile_wrapper::*default_seek_function_type )( ::osiris::uint64,::osiris::SeekPosition ) const;
            
            TextFile_exposer.def( 
                "seek"
                , seek_function_type(&::osiris::File::seek)
                , default_seek_function_type(&TextFile_wrapper::default_seek)
                , ( ::boost::python::arg("offset"), ::boost::python::arg("from") ) );
        
        }
        { //::osiris::File::size
        
            typedef ::osiris::uint64 ( ::osiris::File::*size_function_type )(  ) const;
            typedef ::osiris::uint64 ( TextFile_wrapper::*default_size_function_type )(  ) const;
            
            TextFile_exposer.def( 
                "size"
                , size_function_type(&::osiris::File::size)
                , default_size_function_type(&TextFile_wrapper::default_size) );
        
        }
        { //::osiris::File::write
        
            typedef ::osiris::uint32 ( ::osiris::File::*write_function_type )( void const *,::osiris::uint32 ) ;
            typedef ::osiris::uint32 ( TextFile_wrapper::*default_write_function_type )( void const *,::osiris::uint32 ) ;
            
            TextFile_exposer.def( 
                "write"
                , write_function_type(&::osiris::File::write)
                , default_write_function_type(&TextFile_wrapper::default_write)
                , ( ::boost::python::arg("v"), ::boost::python::arg("size") ) );
        
        }
        TextFile_exposer.staticmethod( "readFile" );
        { //property "encoding"[fget=::osiris::TextFile::getEncoding, fset=::osiris::TextFile::setEncoding]
        
            typedef ::osiris::TextFile::Encoding ( ::osiris::TextFile::*fget )(  ) const;
            typedef void ( ::osiris::TextFile::*fset )( ::osiris::TextFile::Encoding ) ;
            
            TextFile_exposer.add_property( 
                "encoding"
                , fget( &::osiris::TextFile::getEncoding )
                , fset( &::osiris::TextFile::setEncoding )
                , "get\\set property, built on top of \"osiris::TextFile::Encoding osiris::TextFile::getEncoding() const [member function]\" and \"void osiris::TextFile::setEncoding(osiris::TextFile::Encoding encoding) [member function]\"" );
        
        }
    }

}
