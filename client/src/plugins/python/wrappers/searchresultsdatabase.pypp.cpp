// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "searchresultsdatabase.h"
#include "searchresult.h"
#include "searchresultsdatabase.pypp.hpp"

namespace bp = boost::python;

struct SearchResultsDatabase_wrapper : ::osiris::SearchResultsDatabase, ::osiris::PythonWrapper< ::osiris::SearchResultsDatabase > {

    SearchResultsDatabase_wrapper( )
    : ::osiris::SearchResultsDatabase( )
      , ::osiris::PythonWrapper< ::osiris::SearchResultsDatabase >(){
        // nullptr constructor
    
    }

    virtual void clear(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            __pystate.leave();
            this->::osiris::SearchResultsDatabase::clear(  );
        }
    }
    
    void default_clear(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchResultsDatabase::clear( );
    }

    virtual ::boost::shared_ptr< osiris::SearchResult > getResult( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::osiris::uint32 index, bool asGroup=false ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getResult = this->get_override( "getResult" ) )
            return func_getResult( database, index, asGroup );
        else{
            __pystate.leave();
            return this->::osiris::SearchResultsDatabase::getResult( database, index, asGroup );
        }
    }
    
    ::boost::shared_ptr< osiris::SearchResult > default_getResult( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::osiris::uint32 index, bool asGroup=false ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::SearchResultsDatabase::getResult( database, index, asGroup );
    }

    virtual ::osiris::uint32 getResults(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getResults = this->get_override( "getResults" ) )
            return func_getResults(  );
        else{
            __pystate.leave();
            return this->::osiris::SearchResultsDatabase::getResults(  );
        }
    }
    
    ::osiris::uint32 default_getResults(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::SearchResultsDatabase::getResults( );
    }

    virtual ::osiris::uint32 getTotalResults(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTotalResults = this->get_override( "getTotalResults" ) )
            return func_getTotalResults(  );
        else{
            __pystate.leave();
            return this->::osiris::SearchResultsDatabase::getTotalResults(  );
        }
    }
    
    ::osiris::uint32 default_getTotalResults(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::SearchResultsDatabase::getTotalResults( );
    }

    virtual void executeQuery( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_executeQuery = this->get_override( "executeQuery" ) )
            func_executeQuery( database, portal, query, boost::ref(objectsMap) );
        else{
            __pystate.leave();
            this->::osiris::SearchResultsDatabase::executeQuery( database, portal, query, boost::ref(objectsMap) );
        }
    }
    
    virtual void default_executeQuery( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchResultsDatabase::executeQuery( database, portal, query, boost::ref(objectsMap) );
    }

    static void add( ::osiris::SearchResultsDatabase & inst, ::osiris::UniqueID const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.add(id);
        __pythreadSaver.restore();
    }

    virtual void exportXML( ::boost::shared_ptr< osiris::XMLNode > node, ::boost::shared_ptr< osiris::SearchQuery > query, ::boost::shared_ptr< osiris::IPortalPage > page, bool external ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_exportXML = this->get_override( "exportXML" ) )
            func_exportXML( node, query, page, external );
        else{
            __pystate.leave();
            this->::osiris::ISearchResults::exportXML( node, query, page, external );
        }
    }
    
    void default_exportXML( ::boost::shared_ptr< osiris::XMLNode > node, ::boost::shared_ptr< osiris::SearchQuery > query, ::boost::shared_ptr< osiris::IPortalPage > page, bool external ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ISearchResults::exportXML( node, query, page, external );
    }

    virtual void search( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_search = this->get_override( "search" ) )
            func_search( database, portal, query, boost::ref(objectsMap) );
        else{
            __pystate.leave();
            this->::osiris::ISearchResults::search( database, portal, query, boost::ref(objectsMap) );
        }
    }
    
    void default_search( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::SearchQuery > query, ::osiris::StringMap const & objectsMap ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ISearchResults::search( database, portal, query, boost::ref(objectsMap) );
    }

};

void register_SearchResultsDatabase_class(){

    ::boost::python::class_< SearchResultsDatabase_wrapper, ::boost::python::bases< ::osiris::ISearchResults >, ::boost::noncopyable >( "SearchResultsDatabase", ::boost::python::init< >() )    
        .def( 
            "clear"
            , (void ( ::osiris::SearchResultsDatabase::* )(  ) )(&::osiris::SearchResultsDatabase::clear)
            , (void ( SearchResultsDatabase_wrapper::* )(  ) )(&SearchResultsDatabase_wrapper::default_clear) )    
        .def( 
            "getResult"
            , (::boost::shared_ptr< osiris::SearchResult > ( ::osiris::SearchResultsDatabase::* )( ::boost::shared_ptr< osiris::IPortalDatabase >,::osiris::uint32,bool ) )(&::osiris::SearchResultsDatabase::getResult)
            , (::boost::shared_ptr< osiris::SearchResult > ( SearchResultsDatabase_wrapper::* )( ::boost::shared_ptr< osiris::IPortalDatabase >,::osiris::uint32,bool ) )(&SearchResultsDatabase_wrapper::default_getResult)
            , ( ::boost::python::arg("database"), ::boost::python::arg("index"), ::boost::python::arg("asGroup")=(bool)(false) ) )    
        .def( 
            "getResults"
            , (::osiris::uint32 ( ::osiris::SearchResultsDatabase::* )(  ) )(&::osiris::SearchResultsDatabase::getResults)
            , (::osiris::uint32 ( SearchResultsDatabase_wrapper::* )(  ) )(&SearchResultsDatabase_wrapper::default_getResults) )    
        .def( 
            "getTotalResults"
            , (::osiris::uint32 ( ::osiris::SearchResultsDatabase::* )(  ) )(&::osiris::SearchResultsDatabase::getTotalResults)
            , (::osiris::uint32 ( SearchResultsDatabase_wrapper::* )(  ) )(&SearchResultsDatabase_wrapper::default_getTotalResults) )    
        .def( 
            "executeQuery"
            , (void ( SearchResultsDatabase_wrapper::* )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) )(&SearchResultsDatabase_wrapper::default_executeQuery)
            , ( ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("query"), ::boost::python::arg("objectsMap") ) )    
        .def( 
            "add"
            , (void (*)( ::osiris::SearchResultsDatabase &,::osiris::UniqueID const & ))( &SearchResultsDatabase_wrapper::add )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) )    
        .def( 
            "exportXML"
            , (void ( ::osiris::ISearchResults::* )( ::boost::shared_ptr< osiris::XMLNode >,::boost::shared_ptr< osiris::SearchQuery >,::boost::shared_ptr< osiris::IPortalPage >,bool ) )(&::osiris::ISearchResults::exportXML)
            , (void ( SearchResultsDatabase_wrapper::* )( ::boost::shared_ptr< osiris::XMLNode >,::boost::shared_ptr< osiris::SearchQuery >,::boost::shared_ptr< osiris::IPortalPage >,bool ) )(&SearchResultsDatabase_wrapper::default_exportXML)
            , ( ::boost::python::arg("node"), ::boost::python::arg("query"), ::boost::python::arg("page"), ::boost::python::arg("external") ) )    
        .def( 
            "search"
            , (void ( ::osiris::ISearchResults::* )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) )(&::osiris::ISearchResults::search)
            , (void ( SearchResultsDatabase_wrapper::* )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::SearchQuery >,::osiris::StringMap const & ) )(&SearchResultsDatabase_wrapper::default_search)
            , ( ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("query"), ::boost::python::arg("objectsMap") ) );

}
