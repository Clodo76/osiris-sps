// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "languageresult.h"
#include "languageresult.pypp.hpp"

namespace bp = boost::python;

static boost::python::object empty_09118a16244b093bb1797b0e2085670a( ::osiris::LanguageResult const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.empty();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getId_6c11a4755d0223c6da6b1fbd932f5033( ::osiris::LanguageResult const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = inst.getId();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getParams_a68269b787a0c043fe59a0fe05c960fc( ::osiris::LanguageResult const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::StringCollection<osiris::String, osiris::StringCollectionTraits<osiris::String> > const & result = inst.getParams();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::StringCollection<osiris::String, osiris::StringCollectionTraits<osiris::String> > const & >( result ) );
}

static void setParam_7785a0556bad9fd5befa96e65118a968( ::osiris::LanguageResult & inst, ::std::string const & key, ::osiris::DataItem const & val ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setParam(key, val);
    __pythreadSaver.restore();
}

static void clear_f81eb595119ede7206586b0fc69543ec( ::osiris::LanguageResult & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.clear();
    __pythreadSaver.restore();
}

static void setId_28f6d80cfbdd8392257cac4dad3712c4( ::osiris::LanguageResult & inst, ::std::string const & id ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setId(id);
    __pythreadSaver.restore();
}

void register_LanguageResult_class(){

    { //::osiris::LanguageResult
        typedef ::boost::python::class_< ::osiris::LanguageResult > LanguageResult_exposer_t;
        LanguageResult_exposer_t LanguageResult_exposer = LanguageResult_exposer_t( "LanguageResult", ::boost::python::init< >() );
        ::boost::python::scope LanguageResult_scope( LanguageResult_exposer );
        LanguageResult_exposer.def( ::boost::python::init< ::std::string const &, ::osiris::StringCollection< osiris::String, osiris::StringCollectionTraits< osiris::String > > const & >(( ::boost::python::arg("id"), ::boost::python::arg("params") )) );
        LanguageResult_exposer.def( ::boost::python::init< ::std::string const &, ::std::string const &, ::osiris::DataItem const & >(( ::boost::python::arg("id"), ::boost::python::arg("key1"), ::boost::python::arg("val1") )) );
        LanguageResult_exposer.def( ::boost::python::init< ::std::string const &, ::std::string const &, ::osiris::DataItem const &, ::std::string const &, ::osiris::DataItem const & >(( ::boost::python::arg("id"), ::boost::python::arg("key1"), ::boost::python::arg("val1"), ::boost::python::arg("key2"), ::boost::python::arg("val2") )) );
        LanguageResult_exposer.def( ::boost::python::init< ::std::string const &, ::std::string const &, ::osiris::DataItem const &, ::std::string const &, ::osiris::DataItem const &, ::std::string const &, ::osiris::DataItem const & >(( ::boost::python::arg("id"), ::boost::python::arg("key1"), ::boost::python::arg("val1"), ::boost::python::arg("key2"), ::boost::python::arg("val2"), ::boost::python::arg("key3"), ::boost::python::arg("val3") )) );
        LanguageResult_exposer.def( ::boost::python::init< ::std::string const & >(( ::boost::python::arg("id") )) );
        ::boost::python::implicitly_convertible< ::std::string const &, ::osiris::LanguageResult >();
        { //::osiris::LanguageResult::empty
        
            typedef boost::python::object ( *empty_function_type )( ::osiris::LanguageResult const & );
            
            LanguageResult_exposer.def( 
                "empty"
                , empty_function_type( &empty_09118a16244b093bb1797b0e2085670a ) );
        
        }
        { //::osiris::LanguageResult::getId
        
            typedef boost::python::object ( *getId_function_type )( ::osiris::LanguageResult const & );
            
            LanguageResult_exposer.def( 
                "getId"
                , getId_function_type( &getId_6c11a4755d0223c6da6b1fbd932f5033 ) );
        
        }
        { //::osiris::LanguageResult::getParams
        
            typedef boost::python::object ( *getParams_function_type )( ::osiris::LanguageResult const & );
            
            LanguageResult_exposer.def( 
                "getParams"
                , getParams_function_type( &getParams_a68269b787a0c043fe59a0fe05c960fc ) );
        
        }
        { //::osiris::LanguageResult::setParam
        
            typedef void ( *setParam_function_type )( ::osiris::LanguageResult &,::std::string const &,::osiris::DataItem const & );
            
            LanguageResult_exposer.def( 
                "setParam"
                , setParam_function_type( &setParam_7785a0556bad9fd5befa96e65118a968 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("key"), ::boost::python::arg("val") ) );
        
        }
        { //::osiris::LanguageResult::clear
        
            typedef void ( *clear_function_type )( ::osiris::LanguageResult & );
            
            LanguageResult_exposer.def( 
                "clear"
                , clear_function_type( &clear_f81eb595119ede7206586b0fc69543ec ) );
        
        }
        { //::osiris::LanguageResult::setId
        
            typedef void ( *setId_function_type )( ::osiris::LanguageResult &,::std::string const & );
            
            LanguageResult_exposer.def( 
                "setId"
                , setId_function_type( &setId_28f6d80cfbdd8392257cac4dad3712c4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //property "id"[fget=::osiris::LanguageResult::getId, fset=::osiris::LanguageResult::setId]
        
            typedef ::std::string ( ::osiris::LanguageResult::*fget )(  ) const;
            typedef void ( ::osiris::LanguageResult::*fset )( ::std::string const & ) ;
            
            LanguageResult_exposer.add_property( 
                "id"
                , fget( &::osiris::LanguageResult::getId )
                , fset( &::osiris::LanguageResult::setId )
                , "get\\set property, built on top of \"std::string osiris::LanguageResult::getId() const [member function]\" and \"void osiris::LanguageResult::setId(std::string const & id) [member function]\"" );
        
        }
        { //property "params"[fget=::osiris::LanguageResult::getParams]
        
            typedef ::osiris::StringCollection<osiris::String, osiris::StringCollectionTraits<osiris::String> > const & ( ::osiris::LanguageResult::*fget )(  ) const;
            
            LanguageResult_exposer.add_property( 
                "params"
                , ::boost::python::make_function( 
                      fget( &::osiris::LanguageResult::getParams )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::StringCollection<osiris::String, osiris::StringCollectionTraits<osiris::String> > const & osiris::LanguageResult::getParams() const [member function]\"" );
        
        }
    }

}
