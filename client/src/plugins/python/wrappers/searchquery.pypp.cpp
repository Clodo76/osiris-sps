// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "searchquery.h"
#include "isearchoptions.h"
#include "searchquery.pypp.hpp"

namespace bp = boost::python;

struct SearchQuery_wrapper : ::osiris::SearchQuery, ::osiris::PythonWrapper< ::osiris::SearchQuery > {

    SearchQuery_wrapper(::osiris::SearchQuery const & arg )
    : ::osiris::SearchQuery( arg )
      , ::osiris::PythonWrapper< ::osiris::SearchQuery >(){
        // copy constructor
        
    }

    SearchQuery_wrapper( )
    : ::osiris::SearchQuery( )
      , ::osiris::PythonWrapper< ::osiris::SearchQuery >(){
        // null constructor
    
    }

    static boost::python::object getTemplateView( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getTemplateView();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getTemplatePager( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getTemplatePager();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getTemplateCustom( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getTemplateCustom();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getText( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getText();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getTextMode( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchTextMode result = inst.getTextMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTextWhere( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchTextWhere result = inst.getTextWhere();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getByUser( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getByUser();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getShowDeleted( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getShowDeleted();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOptions( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::map<osiris::PortalObjectType, boost::shared_ptr<osiris::ISearchOptions>, std::less<osiris::PortalObjectType>, osiris::StdAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> >, osiris::SysAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> > > > > const & result = inst.getOptions();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::map<osiris::PortalObjectType, boost::shared_ptr<osiris::ISearchOptions>, std::less<osiris::PortalObjectType>, osiris::StdAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> >, osiris::SysAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> > > > > const & >( result ) );
    }

    static boost::python::object getFullTextMode( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getFullTextMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOrderMode( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchOrderMode result = inst.getOrderMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOrderDirection( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchOrderDirection result = inst.getOrderDirection();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFromSubmitDateType( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchDateTime result = inst.getFromSubmitDateType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFromSubmitDateSpecific( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime const & result = inst.getFromSubmitDateSpecific();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::DateTime const & >( result ) );
    }

    static boost::python::object getToSubmitDateType( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchDateTime result = inst.getToSubmitDateType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getToSubmitDateSpecific( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime const & result = inst.getToSubmitDateSpecific();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::DateTime const & >( result ) );
    }

    static boost::python::object getFromInsertDateType( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchDateTime result = inst.getFromInsertDateType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFromInsertDateSpecific( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime const & result = inst.getFromInsertDateSpecific();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::DateTime const & >( result ) );
    }

    static boost::python::object getToInsertDateType( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::SearchDateTime result = inst.getToInsertDateType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getToInsertDateSpecific( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime const & result = inst.getToInsertDateSpecific();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::DateTime const & >( result ) );
    }

    static boost::python::object getParentsList( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::StringVector const & result = inst.getParentsList();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::StringVector const & >( result ) );
    }

    static boost::python::object getParentsRecursive( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getParentsRecursive();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getParentsListString( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getParentsListString();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTreeMode( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getTreeMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getGroupMode( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getGroupMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOffset( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getOffset();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasOffset( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasOffset();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLimit( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getLimit();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasLimit( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasLimit();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMaxResults( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getMaxResults();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasMaxResults( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasMaxResults();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPagerSize( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getPagerSize();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasPagerSize( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasPagerSize();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getShowInfo( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getShowInfo();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getShowFilterAlphabetic( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getShowFilterAlphabetic();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRssUrl( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getRssUrl();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getSpecialQuery( ::osiris::SearchQuery const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getSpecialQuery();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object convertSearchDateTime( ::osiris::SearchQuery & inst, ::osiris::SearchDateTime type, ::osiris::DateTime const & dt ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime result = inst.convertSearchDateTime(type, dt);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object search( ::osiris::SearchQuery & inst, ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::ISearchResults> result = inst.search(database, portal);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void computeParentsList_fe52246006ba2172d61cc82e380560d1( ::osiris::SearchQuery const & inst, ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::osiris::StringList & out ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.computeParentsList(database, portal, out);
        __pythreadSaver.restore();
    }

    static boost::python::object getSections(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::SearchQuery> result = ::osiris::SearchQuery::getSections();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getForums(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::SearchQuery> result = ::osiris::SearchQuery::getForums();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    void computeParentsList( ::boost::shared_ptr< osiris::IPortalDatabase > database, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::EntitiesEntity > const entity, ::osiris::StringList & out ) const {
        ::osiris::SearchQuery::computeParentsList( database, portal, entity, boost::ref(out) );
    }

    static boost::python::object getOption( ::osiris::SearchQuery & inst, ::osiris::PortalObjectType const type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::ISearchOptions> result = inst.getOption(type);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void readXml( ::osiris::SearchQuery & inst, ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.readXml(node);
        __pythreadSaver.restore();
    }

    static void setByUser( ::osiris::SearchQuery & inst, ::osiris::String const & byUser ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setByUser(byUser);
        __pythreadSaver.restore();
    }

    static void setFromInsertDateSpecific( ::osiris::SearchQuery & inst, ::osiris::DateTime const & fromInsertDate ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFromInsertDateSpecific(fromInsertDate);
        __pythreadSaver.restore();
    }

    static void setFromInsertDateType( ::osiris::SearchQuery & inst, ::osiris::SearchDateTime fromDateType ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFromInsertDateType(fromDateType);
        __pythreadSaver.restore();
    }

    static void setFromSubmitDateSpecific( ::osiris::SearchQuery & inst, ::osiris::DateTime const & fromSubmitDate ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFromSubmitDateSpecific(fromSubmitDate);
        __pythreadSaver.restore();
    }

    static void setFromSubmitDateType( ::osiris::SearchQuery & inst, ::osiris::SearchDateTime fromDateType ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFromSubmitDateType(fromDateType);
        __pythreadSaver.restore();
    }

    static void setGroupMode( ::osiris::SearchQuery & inst, bool groupMode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setGroupMode(groupMode);
        __pythreadSaver.restore();
    }

    static void setLimit( ::osiris::SearchQuery & inst, ::osiris::uint32 limit ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLimit(limit);
        __pythreadSaver.restore();
    }

    static void setMaxResults( ::osiris::SearchQuery & inst, ::osiris::uint32 maxResults ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setMaxResults(maxResults);
        __pythreadSaver.restore();
    }

    static void setOffset( ::osiris::SearchQuery & inst, ::osiris::uint32 offset ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOffset(offset);
        __pythreadSaver.restore();
    }

    static void setOrderDirection( ::osiris::SearchQuery & inst, ::osiris::SearchOrderDirection orderDirection ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOrderDirection(orderDirection);
        __pythreadSaver.restore();
    }

    static void setOrderMode( ::osiris::SearchQuery & inst, ::osiris::SearchOrderMode orderMode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOrderMode(orderMode);
        __pythreadSaver.restore();
    }

    static void setPagerSize( ::osiris::SearchQuery & inst, ::osiris::uint32 pagerSize ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPagerSize(pagerSize);
        __pythreadSaver.restore();
    }

    static void setParentsListString( ::osiris::SearchQuery & inst, ::osiris::String const & parentsList ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setParentsListString(parentsList);
        __pythreadSaver.restore();
    }

    static void setParentsRecursive( ::osiris::SearchQuery & inst, bool parentsRecursive ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setParentsRecursive(parentsRecursive);
        __pythreadSaver.restore();
    }

    static void setRssUrl( ::osiris::SearchQuery & inst, ::osiris::String const & rssUrl ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setRssUrl(rssUrl);
        __pythreadSaver.restore();
    }

    static void setShowDeleted( ::osiris::SearchQuery & inst, bool showDeleted ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setShowDeleted(showDeleted);
        __pythreadSaver.restore();
    }

    static void setShowFilterAlphabetic( ::osiris::SearchQuery & inst, bool const showFilterAlphabetic ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setShowFilterAlphabetic(showFilterAlphabetic);
        __pythreadSaver.restore();
    }

    static void setShowInfo( ::osiris::SearchQuery & inst, bool const showInfo ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setShowInfo(showInfo);
        __pythreadSaver.restore();
    }

    static void setSpecialQuery( ::osiris::SearchQuery & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSpecialQuery(name);
        __pythreadSaver.restore();
    }

    static void setTemplateCustom( ::osiris::SearchQuery & inst, ::osiris::String const & templateCustom ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTemplateCustom(templateCustom);
        __pythreadSaver.restore();
    }

    static void setTemplatePager( ::osiris::SearchQuery & inst, ::osiris::String const & templateName ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTemplatePager(templateName);
        __pythreadSaver.restore();
    }

    static void setTemplateView( ::osiris::SearchQuery & inst, ::osiris::String const & templateName ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTemplateView(templateName);
        __pythreadSaver.restore();
    }

    static void setText( ::osiris::SearchQuery & inst, ::osiris::String const & text ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setText(text);
        __pythreadSaver.restore();
    }

    static void setTextMode( ::osiris::SearchQuery & inst, ::osiris::SearchTextMode textMode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTextMode(textMode);
        __pythreadSaver.restore();
    }

    static void setTextWhere( ::osiris::SearchQuery & inst, ::osiris::SearchTextWhere textWhere ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTextWhere(textWhere);
        __pythreadSaver.restore();
    }

    static void setToInsertDateSpecific( ::osiris::SearchQuery & inst, ::osiris::DateTime const & toInsertDate ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setToInsertDateSpecific(toInsertDate);
        __pythreadSaver.restore();
    }

    static void setToInsertDateType( ::osiris::SearchQuery & inst, ::osiris::SearchDateTime toDateType ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setToInsertDateType(toDateType);
        __pythreadSaver.restore();
    }

    static void setToSubmitDateSpecific( ::osiris::SearchQuery & inst, ::osiris::DateTime const & toSubmitDate ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setToSubmitDateSpecific(toSubmitDate);
        __pythreadSaver.restore();
    }

    static void setToSubmitDateType( ::osiris::SearchQuery & inst, ::osiris::SearchDateTime toDateType ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setToSubmitDateType(toDateType);
        __pythreadSaver.restore();
    }

    static void setTreeMode( ::osiris::SearchQuery & inst, bool treeMode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTreeMode(treeMode);
        __pythreadSaver.restore();
    }

    static void writeXml( ::osiris::SearchQuery & inst, ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.writeXml(node);
        __pythreadSaver.restore();
    }

};

void register_SearchQuery_class(){

    { //::osiris::SearchQuery
        typedef ::boost::python::class_< SearchQuery_wrapper, ::boost::noncopyable > SearchQuery_exposer_t;
        SearchQuery_exposer_t SearchQuery_exposer = SearchQuery_exposer_t( "SearchQuery", ::boost::python::no_init );
        ::boost::python::scope SearchQuery_scope( SearchQuery_exposer );
        SearchQuery_exposer.def( ::boost::python::init< >() );
        { //::osiris::SearchQuery::getTemplateView
        
            typedef boost::python::object ( *getTemplateView_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTemplateView"
                , getTemplateView_function_type( &SearchQuery_wrapper::getTemplateView ) );
        
        }
        { //::osiris::SearchQuery::getTemplatePager
        
            typedef boost::python::object ( *getTemplatePager_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTemplatePager"
                , getTemplatePager_function_type( &SearchQuery_wrapper::getTemplatePager ) );
        
        }
        { //::osiris::SearchQuery::getTemplateCustom
        
            typedef boost::python::object ( *getTemplateCustom_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTemplateCustom"
                , getTemplateCustom_function_type( &SearchQuery_wrapper::getTemplateCustom ) );
        
        }
        { //::osiris::SearchQuery::getText
        
            typedef boost::python::object ( *getText_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getText"
                , getText_function_type( &SearchQuery_wrapper::getText ) );
        
        }
        { //::osiris::SearchQuery::getTextMode
        
            typedef boost::python::object ( *getTextMode_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTextMode"
                , getTextMode_function_type( &SearchQuery_wrapper::getTextMode ) );
        
        }
        { //::osiris::SearchQuery::getTextWhere
        
            typedef boost::python::object ( *getTextWhere_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTextWhere"
                , getTextWhere_function_type( &SearchQuery_wrapper::getTextWhere ) );
        
        }
        { //::osiris::SearchQuery::getByUser
        
            typedef boost::python::object ( *getByUser_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getByUser"
                , getByUser_function_type( &SearchQuery_wrapper::getByUser ) );
        
        }
        { //::osiris::SearchQuery::getShowDeleted
        
            typedef boost::python::object ( *getShowDeleted_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getShowDeleted"
                , getShowDeleted_function_type( &SearchQuery_wrapper::getShowDeleted ) );
        
        }
        { //::osiris::SearchQuery::getOptions
        
            typedef boost::python::object ( *getOptions_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getOptions"
                , getOptions_function_type( &SearchQuery_wrapper::getOptions ) );
        
        }
        { //::osiris::SearchQuery::getFullTextMode
        
            typedef boost::python::object ( *getFullTextMode_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getFullTextMode"
                , getFullTextMode_function_type( &SearchQuery_wrapper::getFullTextMode ) );
        
        }
        { //::osiris::SearchQuery::getOrderMode
        
            typedef boost::python::object ( *getOrderMode_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getOrderMode"
                , getOrderMode_function_type( &SearchQuery_wrapper::getOrderMode ) );
        
        }
        { //::osiris::SearchQuery::getOrderDirection
        
            typedef boost::python::object ( *getOrderDirection_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getOrderDirection"
                , getOrderDirection_function_type( &SearchQuery_wrapper::getOrderDirection ) );
        
        }
        { //::osiris::SearchQuery::getFromSubmitDateType
        
            typedef boost::python::object ( *getFromSubmitDateType_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getFromSubmitDateType"
                , getFromSubmitDateType_function_type( &SearchQuery_wrapper::getFromSubmitDateType ) );
        
        }
        { //::osiris::SearchQuery::getFromSubmitDateSpecific
        
            typedef boost::python::object ( *getFromSubmitDateSpecific_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getFromSubmitDateSpecific"
                , getFromSubmitDateSpecific_function_type( &SearchQuery_wrapper::getFromSubmitDateSpecific ) );
        
        }
        { //::osiris::SearchQuery::getToSubmitDateType
        
            typedef boost::python::object ( *getToSubmitDateType_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getToSubmitDateType"
                , getToSubmitDateType_function_type( &SearchQuery_wrapper::getToSubmitDateType ) );
        
        }
        { //::osiris::SearchQuery::getToSubmitDateSpecific
        
            typedef boost::python::object ( *getToSubmitDateSpecific_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getToSubmitDateSpecific"
                , getToSubmitDateSpecific_function_type( &SearchQuery_wrapper::getToSubmitDateSpecific ) );
        
        }
        { //::osiris::SearchQuery::getFromInsertDateType
        
            typedef boost::python::object ( *getFromInsertDateType_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getFromInsertDateType"
                , getFromInsertDateType_function_type( &SearchQuery_wrapper::getFromInsertDateType ) );
        
        }
        { //::osiris::SearchQuery::getFromInsertDateSpecific
        
            typedef boost::python::object ( *getFromInsertDateSpecific_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getFromInsertDateSpecific"
                , getFromInsertDateSpecific_function_type( &SearchQuery_wrapper::getFromInsertDateSpecific ) );
        
        }
        { //::osiris::SearchQuery::getToInsertDateType
        
            typedef boost::python::object ( *getToInsertDateType_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getToInsertDateType"
                , getToInsertDateType_function_type( &SearchQuery_wrapper::getToInsertDateType ) );
        
        }
        { //::osiris::SearchQuery::getToInsertDateSpecific
        
            typedef boost::python::object ( *getToInsertDateSpecific_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getToInsertDateSpecific"
                , getToInsertDateSpecific_function_type( &SearchQuery_wrapper::getToInsertDateSpecific ) );
        
        }
        { //::osiris::SearchQuery::getParentsList
        
            typedef boost::python::object ( *getParentsList_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getParentsList"
                , getParentsList_function_type( &SearchQuery_wrapper::getParentsList ) );
        
        }
        { //::osiris::SearchQuery::getParentsRecursive
        
            typedef boost::python::object ( *getParentsRecursive_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getParentsRecursive"
                , getParentsRecursive_function_type( &SearchQuery_wrapper::getParentsRecursive ) );
        
        }
        { //::osiris::SearchQuery::getParentsListString
        
            typedef boost::python::object ( *getParentsListString_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getParentsListString"
                , getParentsListString_function_type( &SearchQuery_wrapper::getParentsListString ) );
        
        }
        { //::osiris::SearchQuery::getTreeMode
        
            typedef boost::python::object ( *getTreeMode_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getTreeMode"
                , getTreeMode_function_type( &SearchQuery_wrapper::getTreeMode ) );
        
        }
        { //::osiris::SearchQuery::getGroupMode
        
            typedef boost::python::object ( *getGroupMode_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getGroupMode"
                , getGroupMode_function_type( &SearchQuery_wrapper::getGroupMode ) );
        
        }
        { //::osiris::SearchQuery::getOffset
        
            typedef boost::python::object ( *getOffset_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getOffset"
                , getOffset_function_type( &SearchQuery_wrapper::getOffset ) );
        
        }
        { //::osiris::SearchQuery::hasOffset
        
            typedef boost::python::object ( *hasOffset_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "hasOffset"
                , hasOffset_function_type( &SearchQuery_wrapper::hasOffset ) );
        
        }
        { //::osiris::SearchQuery::getLimit
        
            typedef boost::python::object ( *getLimit_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getLimit"
                , getLimit_function_type( &SearchQuery_wrapper::getLimit ) );
        
        }
        { //::osiris::SearchQuery::hasLimit
        
            typedef boost::python::object ( *hasLimit_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "hasLimit"
                , hasLimit_function_type( &SearchQuery_wrapper::hasLimit ) );
        
        }
        { //::osiris::SearchQuery::getMaxResults
        
            typedef boost::python::object ( *getMaxResults_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getMaxResults"
                , getMaxResults_function_type( &SearchQuery_wrapper::getMaxResults ) );
        
        }
        { //::osiris::SearchQuery::hasMaxResults
        
            typedef boost::python::object ( *hasMaxResults_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "hasMaxResults"
                , hasMaxResults_function_type( &SearchQuery_wrapper::hasMaxResults ) );
        
        }
        { //::osiris::SearchQuery::getPagerSize
        
            typedef boost::python::object ( *getPagerSize_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getPagerSize"
                , getPagerSize_function_type( &SearchQuery_wrapper::getPagerSize ) );
        
        }
        { //::osiris::SearchQuery::hasPagerSize
        
            typedef boost::python::object ( *hasPagerSize_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "hasPagerSize"
                , hasPagerSize_function_type( &SearchQuery_wrapper::hasPagerSize ) );
        
        }
        { //::osiris::SearchQuery::getShowInfo
        
            typedef boost::python::object ( *getShowInfo_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getShowInfo"
                , getShowInfo_function_type( &SearchQuery_wrapper::getShowInfo ) );
        
        }
        { //::osiris::SearchQuery::getShowFilterAlphabetic
        
            typedef boost::python::object ( *getShowFilterAlphabetic_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getShowFilterAlphabetic"
                , getShowFilterAlphabetic_function_type( &SearchQuery_wrapper::getShowFilterAlphabetic ) );
        
        }
        { //::osiris::SearchQuery::getRssUrl
        
            typedef boost::python::object ( *getRssUrl_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getRssUrl"
                , getRssUrl_function_type( &SearchQuery_wrapper::getRssUrl ) );
        
        }
        { //::osiris::SearchQuery::getSpecialQuery
        
            typedef boost::python::object ( *getSpecialQuery_function_type )( ::osiris::SearchQuery const & );
            
            SearchQuery_exposer.def( 
                "getSpecialQuery"
                , getSpecialQuery_function_type( &SearchQuery_wrapper::getSpecialQuery ) );
        
        }
        { //::osiris::SearchQuery::convertSearchDateTime
        
            typedef boost::python::object ( *convertSearchDateTime_function_type )( ::osiris::SearchQuery &,::osiris::SearchDateTime,::osiris::DateTime const & );
            
            SearchQuery_exposer.def( 
                "convertSearchDateTime"
                , convertSearchDateTime_function_type( &SearchQuery_wrapper::convertSearchDateTime )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::SearchQuery::search
        
            typedef boost::python::object ( *search_function_type )( ::osiris::SearchQuery &,::boost::shared_ptr<osiris::IPortalDatabase>,::boost::shared_ptr<osiris::Portal> );
            
            SearchQuery_exposer.def( 
                "search"
                , search_function_type( &SearchQuery_wrapper::search )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("database"), ::boost::python::arg("portal") ) );
        
        }
        { //::osiris::SearchQuery::computeParentsList
        
            typedef void ( *computeParentsList_function_type )( ::osiris::SearchQuery const &,::boost::shared_ptr<osiris::IPortalDatabase>,::boost::shared_ptr<osiris::Portal>,::osiris::StringList & );
            
            SearchQuery_exposer.def( 
                "computeParentsList"
                , computeParentsList_function_type( &SearchQuery_wrapper::computeParentsList_fe52246006ba2172d61cc82e380560d1 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("out") ) );
        
        }
        { //::osiris::SearchQuery::getSections
        
            typedef boost::python::object ( *getSections_function_type )(  );
            
            SearchQuery_exposer.def( 
                "getSections"
                , getSections_function_type( &SearchQuery_wrapper::getSections ) );
        
        }
        { //::osiris::SearchQuery::getForums
        
            typedef boost::python::object ( *getForums_function_type )(  );
            
            SearchQuery_exposer.def( 
                "getForums"
                , getForums_function_type( &SearchQuery_wrapper::getForums ) );
        
        }
        { //::osiris::SearchQuery::computeParentsList
        
            typedef void ( SearchQuery_wrapper::*computeParentsList_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase >,::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::EntitiesEntity > const,::osiris::StringList & ) const;
            
            SearchQuery_exposer.def( 
                "computeParentsList"
                , computeParentsList_function_type( &SearchQuery_wrapper::computeParentsList )
                , ( ::boost::python::arg("database"), ::boost::python::arg("portal"), ::boost::python::arg("entity"), ::boost::python::arg("out") ) );
        
        }
        { //::osiris::SearchQuery::getOption
        
            typedef boost::python::object ( *getOption_function_type )( ::osiris::SearchQuery &,::osiris::PortalObjectType const );
            
            SearchQuery_exposer.def( 
                "getOption"
                , getOption_function_type( &SearchQuery_wrapper::getOption )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type") ) );
        
        }
        { //::osiris::SearchQuery::readXml
        
            typedef void ( *readXml_function_type )( ::osiris::SearchQuery &,::boost::shared_ptr<osiris::XMLNode> );
            
            SearchQuery_exposer.def( 
                "readXml"
                , readXml_function_type( &SearchQuery_wrapper::readXml )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("node") ) );
        
        }
        { //::osiris::SearchQuery::setByUser
        
            typedef void ( *setByUser_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setByUser"
                , setByUser_function_type( &SearchQuery_wrapper::setByUser )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("byUser") ) );
        
        }
        { //::osiris::SearchQuery::setFromInsertDateSpecific
        
            typedef void ( *setFromInsertDateSpecific_function_type )( ::osiris::SearchQuery &,::osiris::DateTime const & );
            
            SearchQuery_exposer.def( 
                "setFromInsertDateSpecific"
                , setFromInsertDateSpecific_function_type( &SearchQuery_wrapper::setFromInsertDateSpecific )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fromInsertDate") ) );
        
        }
        { //::osiris::SearchQuery::setFromInsertDateType
        
            typedef void ( *setFromInsertDateType_function_type )( ::osiris::SearchQuery &,::osiris::SearchDateTime );
            
            SearchQuery_exposer.def( 
                "setFromInsertDateType"
                , setFromInsertDateType_function_type( &SearchQuery_wrapper::setFromInsertDateType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fromDateType") ) );
        
        }
        { //::osiris::SearchQuery::setFromSubmitDateSpecific
        
            typedef void ( *setFromSubmitDateSpecific_function_type )( ::osiris::SearchQuery &,::osiris::DateTime const & );
            
            SearchQuery_exposer.def( 
                "setFromSubmitDateSpecific"
                , setFromSubmitDateSpecific_function_type( &SearchQuery_wrapper::setFromSubmitDateSpecific )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fromSubmitDate") ) );
        
        }
        { //::osiris::SearchQuery::setFromSubmitDateType
        
            typedef void ( *setFromSubmitDateType_function_type )( ::osiris::SearchQuery &,::osiris::SearchDateTime );
            
            SearchQuery_exposer.def( 
                "setFromSubmitDateType"
                , setFromSubmitDateType_function_type( &SearchQuery_wrapper::setFromSubmitDateType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("fromDateType") ) );
        
        }
        { //::osiris::SearchQuery::setGroupMode
        
            typedef void ( *setGroupMode_function_type )( ::osiris::SearchQuery &,bool );
            
            SearchQuery_exposer.def( 
                "setGroupMode"
                , setGroupMode_function_type( &SearchQuery_wrapper::setGroupMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("groupMode") ) );
        
        }
        { //::osiris::SearchQuery::setLimit
        
            typedef void ( *setLimit_function_type )( ::osiris::SearchQuery &,::osiris::uint32 );
            
            SearchQuery_exposer.def( 
                "setLimit"
                , setLimit_function_type( &SearchQuery_wrapper::setLimit )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("limit") ) );
        
        }
        { //::osiris::SearchQuery::setMaxResults
        
            typedef void ( *setMaxResults_function_type )( ::osiris::SearchQuery &,::osiris::uint32 );
            
            SearchQuery_exposer.def( 
                "setMaxResults"
                , setMaxResults_function_type( &SearchQuery_wrapper::setMaxResults )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("maxResults") ) );
        
        }
        { //::osiris::SearchQuery::setOffset
        
            typedef void ( *setOffset_function_type )( ::osiris::SearchQuery &,::osiris::uint32 );
            
            SearchQuery_exposer.def( 
                "setOffset"
                , setOffset_function_type( &SearchQuery_wrapper::setOffset )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("offset") ) );
        
        }
        { //::osiris::SearchQuery::setOrderDirection
        
            typedef void ( *setOrderDirection_function_type )( ::osiris::SearchQuery &,::osiris::SearchOrderDirection );
            
            SearchQuery_exposer.def( 
                "setOrderDirection"
                , setOrderDirection_function_type( &SearchQuery_wrapper::setOrderDirection )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("orderDirection") ) );
        
        }
        { //::osiris::SearchQuery::setOrderMode
        
            typedef void ( *setOrderMode_function_type )( ::osiris::SearchQuery &,::osiris::SearchOrderMode );
            
            SearchQuery_exposer.def( 
                "setOrderMode"
                , setOrderMode_function_type( &SearchQuery_wrapper::setOrderMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("orderMode") ) );
        
        }
        { //::osiris::SearchQuery::setPagerSize
        
            typedef void ( *setPagerSize_function_type )( ::osiris::SearchQuery &,::osiris::uint32 );
            
            SearchQuery_exposer.def( 
                "setPagerSize"
                , setPagerSize_function_type( &SearchQuery_wrapper::setPagerSize )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("pagerSize") ) );
        
        }
        { //::osiris::SearchQuery::setParentsListString
        
            typedef void ( *setParentsListString_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setParentsListString"
                , setParentsListString_function_type( &SearchQuery_wrapper::setParentsListString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("parentsList") ) );
        
        }
        { //::osiris::SearchQuery::setParentsRecursive
        
            typedef void ( *setParentsRecursive_function_type )( ::osiris::SearchQuery &,bool );
            
            SearchQuery_exposer.def( 
                "setParentsRecursive"
                , setParentsRecursive_function_type( &SearchQuery_wrapper::setParentsRecursive )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("parentsRecursive") ) );
        
        }
        { //::osiris::SearchQuery::setRssUrl
        
            typedef void ( *setRssUrl_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setRssUrl"
                , setRssUrl_function_type( &SearchQuery_wrapper::setRssUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("rssUrl") ) );
        
        }
        { //::osiris::SearchQuery::setShowDeleted
        
            typedef void ( *setShowDeleted_function_type )( ::osiris::SearchQuery &,bool );
            
            SearchQuery_exposer.def( 
                "setShowDeleted"
                , setShowDeleted_function_type( &SearchQuery_wrapper::setShowDeleted )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("showDeleted") ) );
        
        }
        { //::osiris::SearchQuery::setShowFilterAlphabetic
        
            typedef void ( *setShowFilterAlphabetic_function_type )( ::osiris::SearchQuery &,bool const );
            
            SearchQuery_exposer.def( 
                "setShowFilterAlphabetic"
                , setShowFilterAlphabetic_function_type( &SearchQuery_wrapper::setShowFilterAlphabetic )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("showFilterAlphabetic") ) );
        
        }
        { //::osiris::SearchQuery::setShowInfo
        
            typedef void ( *setShowInfo_function_type )( ::osiris::SearchQuery &,bool const );
            
            SearchQuery_exposer.def( 
                "setShowInfo"
                , setShowInfo_function_type( &SearchQuery_wrapper::setShowInfo )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("showInfo") ) );
        
        }
        { //::osiris::SearchQuery::setSpecialQuery
        
            typedef void ( *setSpecialQuery_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setSpecialQuery"
                , setSpecialQuery_function_type( &SearchQuery_wrapper::setSpecialQuery )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::SearchQuery::setTemplateCustom
        
            typedef void ( *setTemplateCustom_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setTemplateCustom"
                , setTemplateCustom_function_type( &SearchQuery_wrapper::setTemplateCustom )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("templateCustom") ) );
        
        }
        { //::osiris::SearchQuery::setTemplatePager
        
            typedef void ( *setTemplatePager_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setTemplatePager"
                , setTemplatePager_function_type( &SearchQuery_wrapper::setTemplatePager )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("templateName") ) );
        
        }
        { //::osiris::SearchQuery::setTemplateView
        
            typedef void ( *setTemplateView_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setTemplateView"
                , setTemplateView_function_type( &SearchQuery_wrapper::setTemplateView )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("templateName") ) );
        
        }
        { //::osiris::SearchQuery::setText
        
            typedef void ( *setText_function_type )( ::osiris::SearchQuery &,::osiris::String const & );
            
            SearchQuery_exposer.def( 
                "setText"
                , setText_function_type( &SearchQuery_wrapper::setText )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("text") ) );
        
        }
        { //::osiris::SearchQuery::setTextMode
        
            typedef void ( *setTextMode_function_type )( ::osiris::SearchQuery &,::osiris::SearchTextMode );
            
            SearchQuery_exposer.def( 
                "setTextMode"
                , setTextMode_function_type( &SearchQuery_wrapper::setTextMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("textMode") ) );
        
        }
        { //::osiris::SearchQuery::setTextWhere
        
            typedef void ( *setTextWhere_function_type )( ::osiris::SearchQuery &,::osiris::SearchTextWhere );
            
            SearchQuery_exposer.def( 
                "setTextWhere"
                , setTextWhere_function_type( &SearchQuery_wrapper::setTextWhere )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("textWhere") ) );
        
        }
        { //::osiris::SearchQuery::setToInsertDateSpecific
        
            typedef void ( *setToInsertDateSpecific_function_type )( ::osiris::SearchQuery &,::osiris::DateTime const & );
            
            SearchQuery_exposer.def( 
                "setToInsertDateSpecific"
                , setToInsertDateSpecific_function_type( &SearchQuery_wrapper::setToInsertDateSpecific )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("toInsertDate") ) );
        
        }
        { //::osiris::SearchQuery::setToInsertDateType
        
            typedef void ( *setToInsertDateType_function_type )( ::osiris::SearchQuery &,::osiris::SearchDateTime );
            
            SearchQuery_exposer.def( 
                "setToInsertDateType"
                , setToInsertDateType_function_type( &SearchQuery_wrapper::setToInsertDateType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("toDateType") ) );
        
        }
        { //::osiris::SearchQuery::setToSubmitDateSpecific
        
            typedef void ( *setToSubmitDateSpecific_function_type )( ::osiris::SearchQuery &,::osiris::DateTime const & );
            
            SearchQuery_exposer.def( 
                "setToSubmitDateSpecific"
                , setToSubmitDateSpecific_function_type( &SearchQuery_wrapper::setToSubmitDateSpecific )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("toSubmitDate") ) );
        
        }
        { //::osiris::SearchQuery::setToSubmitDateType
        
            typedef void ( *setToSubmitDateType_function_type )( ::osiris::SearchQuery &,::osiris::SearchDateTime );
            
            SearchQuery_exposer.def( 
                "setToSubmitDateType"
                , setToSubmitDateType_function_type( &SearchQuery_wrapper::setToSubmitDateType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("toDateType") ) );
        
        }
        { //::osiris::SearchQuery::setTreeMode
        
            typedef void ( *setTreeMode_function_type )( ::osiris::SearchQuery &,bool );
            
            SearchQuery_exposer.def( 
                "setTreeMode"
                , setTreeMode_function_type( &SearchQuery_wrapper::setTreeMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("treeMode") ) );
        
        }
        { //::osiris::SearchQuery::writeXml
        
            typedef void ( *writeXml_function_type )( ::osiris::SearchQuery &,::boost::shared_ptr<osiris::XMLNode> );
            
            SearchQuery_exposer.def( 
                "writeXml"
                , writeXml_function_type( &SearchQuery_wrapper::writeXml )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("node") ) );
        
        }
        SearchQuery_exposer.staticmethod( "getSections" );
        SearchQuery_exposer.staticmethod( "getForums" );
        { //property "templateView"[fget=::osiris::SearchQuery::getTemplateView, fset=::osiris::SearchQuery::setTemplateView]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "templateView"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getTemplateView )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setTemplateView )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getTemplateView() const [member function]\" and \"void osiris::SearchQuery::setTemplateView(osiris::String const & templateName) [member function]\"" );
        
        }
        { //property "templatePager"[fget=::osiris::SearchQuery::getTemplatePager, fset=::osiris::SearchQuery::setTemplatePager]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "templatePager"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getTemplatePager )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setTemplatePager )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getTemplatePager() const [member function]\" and \"void osiris::SearchQuery::setTemplatePager(osiris::String const & templateName) [member function]\"" );
        
        }
        { //property "templateCustom"[fget=::osiris::SearchQuery::getTemplateCustom, fset=::osiris::SearchQuery::setTemplateCustom]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "templateCustom"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getTemplateCustom )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setTemplateCustom )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getTemplateCustom() const [member function]\" and \"void osiris::SearchQuery::setTemplateCustom(osiris::String const & templateCustom) [member function]\"" );
        
        }
        { //property "text"[fget=::osiris::SearchQuery::getText, fset=::osiris::SearchQuery::setText]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "text"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getText )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setText )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getText() const [member function]\" and \"void osiris::SearchQuery::setText(osiris::String const & text) [member function]\"" );
        
        }
        { //property "textMode"[fget=::osiris::SearchQuery::getTextMode, fset=::osiris::SearchQuery::setTextMode]
        
            typedef ::osiris::SearchTextMode ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchTextMode ) ;
            
            SearchQuery_exposer.add_property( 
                "textMode"
                , fget( &::osiris::SearchQuery::getTextMode )
                , fset( &::osiris::SearchQuery::setTextMode )
                , "get\\set property, built on top of \"osiris::SearchTextMode osiris::SearchQuery::getTextMode() const [member function]\" and \"void osiris::SearchQuery::setTextMode(osiris::SearchTextMode textMode) [member function]\"" );
        
        }
        { //property "textWhere"[fget=::osiris::SearchQuery::getTextWhere, fset=::osiris::SearchQuery::setTextWhere]
        
            typedef ::osiris::SearchTextWhere ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchTextWhere ) ;
            
            SearchQuery_exposer.add_property( 
                "textWhere"
                , fget( &::osiris::SearchQuery::getTextWhere )
                , fset( &::osiris::SearchQuery::setTextWhere )
                , "get\\set property, built on top of \"osiris::SearchTextWhere osiris::SearchQuery::getTextWhere() const [member function]\" and \"void osiris::SearchQuery::setTextWhere(osiris::SearchTextWhere textWhere) [member function]\"" );
        
        }
        { //property "byUser"[fget=::osiris::SearchQuery::getByUser, fset=::osiris::SearchQuery::setByUser]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "byUser"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getByUser )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setByUser )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getByUser() const [member function]\" and \"void osiris::SearchQuery::setByUser(osiris::String const & byUser) [member function]\"" );
        
        }
        { //property "showDeleted"[fget=::osiris::SearchQuery::getShowDeleted, fset=::osiris::SearchQuery::setShowDeleted]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( bool ) ;
            
            SearchQuery_exposer.add_property( 
                "showDeleted"
                , fget( &::osiris::SearchQuery::getShowDeleted )
                , fset( &::osiris::SearchQuery::setShowDeleted )
                , "get\\set property, built on top of \"bool osiris::SearchQuery::getShowDeleted() const [member function]\" and \"void osiris::SearchQuery::setShowDeleted(bool showDeleted) [member function]\"" );
        
        }
        { //property "orderMode"[fget=::osiris::SearchQuery::getOrderMode, fset=::osiris::SearchQuery::setOrderMode]
        
            typedef ::osiris::SearchOrderMode ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchOrderMode ) ;
            
            SearchQuery_exposer.add_property( 
                "orderMode"
                , fget( &::osiris::SearchQuery::getOrderMode )
                , fset( &::osiris::SearchQuery::setOrderMode )
                , "get\\set property, built on top of \"osiris::SearchOrderMode osiris::SearchQuery::getOrderMode() const [member function]\" and \"void osiris::SearchQuery::setOrderMode(osiris::SearchOrderMode orderMode) [member function]\"" );
        
        }
        { //property "orderDirection"[fget=::osiris::SearchQuery::getOrderDirection, fset=::osiris::SearchQuery::setOrderDirection]
        
            typedef ::osiris::SearchOrderDirection ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchOrderDirection ) ;
            
            SearchQuery_exposer.add_property( 
                "orderDirection"
                , fget( &::osiris::SearchQuery::getOrderDirection )
                , fset( &::osiris::SearchQuery::setOrderDirection )
                , "get\\set property, built on top of \"osiris::SearchOrderDirection osiris::SearchQuery::getOrderDirection() const [member function]\" and \"void osiris::SearchQuery::setOrderDirection(osiris::SearchOrderDirection orderDirection) [member function]\"" );
        
        }
        { //property "fromSubmitDateType"[fget=::osiris::SearchQuery::getFromSubmitDateType, fset=::osiris::SearchQuery::setFromSubmitDateType]
        
            typedef ::osiris::SearchDateTime ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchDateTime ) ;
            
            SearchQuery_exposer.add_property( 
                "fromSubmitDateType"
                , fget( &::osiris::SearchQuery::getFromSubmitDateType )
                , fset( &::osiris::SearchQuery::setFromSubmitDateType )
                , "get\\set property, built on top of \"osiris::SearchDateTime osiris::SearchQuery::getFromSubmitDateType() const [member function]\" and \"void osiris::SearchQuery::setFromSubmitDateType(osiris::SearchDateTime fromDateType) [member function]\"" );
        
        }
        { //property "fromSubmitDateSpecific"[fget=::osiris::SearchQuery::getFromSubmitDateSpecific, fset=::osiris::SearchQuery::setFromSubmitDateSpecific]
        
            typedef ::osiris::DateTime const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::DateTime const & ) ;
            
            SearchQuery_exposer.add_property( 
                "fromSubmitDateSpecific"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getFromSubmitDateSpecific )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setFromSubmitDateSpecific )
                , "get\\set property, built on top of \"osiris::DateTime const & osiris::SearchQuery::getFromSubmitDateSpecific() const [member function]\" and \"void osiris::SearchQuery::setFromSubmitDateSpecific(osiris::DateTime const & fromSubmitDate) [member function]\"" );
        
        }
        { //property "toSubmitDateType"[fget=::osiris::SearchQuery::getToSubmitDateType, fset=::osiris::SearchQuery::setToSubmitDateType]
        
            typedef ::osiris::SearchDateTime ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchDateTime ) ;
            
            SearchQuery_exposer.add_property( 
                "toSubmitDateType"
                , fget( &::osiris::SearchQuery::getToSubmitDateType )
                , fset( &::osiris::SearchQuery::setToSubmitDateType )
                , "get\\set property, built on top of \"osiris::SearchDateTime osiris::SearchQuery::getToSubmitDateType() const [member function]\" and \"void osiris::SearchQuery::setToSubmitDateType(osiris::SearchDateTime toDateType) [member function]\"" );
        
        }
        { //property "toSubmitDateSpecific"[fget=::osiris::SearchQuery::getToSubmitDateSpecific, fset=::osiris::SearchQuery::setToSubmitDateSpecific]
        
            typedef ::osiris::DateTime const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::DateTime const & ) ;
            
            SearchQuery_exposer.add_property( 
                "toSubmitDateSpecific"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getToSubmitDateSpecific )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setToSubmitDateSpecific )
                , "get\\set property, built on top of \"osiris::DateTime const & osiris::SearchQuery::getToSubmitDateSpecific() const [member function]\" and \"void osiris::SearchQuery::setToSubmitDateSpecific(osiris::DateTime const & toSubmitDate) [member function]\"" );
        
        }
        { //property "fromInsertDateType"[fget=::osiris::SearchQuery::getFromInsertDateType, fset=::osiris::SearchQuery::setFromInsertDateType]
        
            typedef ::osiris::SearchDateTime ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchDateTime ) ;
            
            SearchQuery_exposer.add_property( 
                "fromInsertDateType"
                , fget( &::osiris::SearchQuery::getFromInsertDateType )
                , fset( &::osiris::SearchQuery::setFromInsertDateType )
                , "get\\set property, built on top of \"osiris::SearchDateTime osiris::SearchQuery::getFromInsertDateType() const [member function]\" and \"void osiris::SearchQuery::setFromInsertDateType(osiris::SearchDateTime fromDateType) [member function]\"" );
        
        }
        { //property "fromInsertDateSpecific"[fget=::osiris::SearchQuery::getFromInsertDateSpecific, fset=::osiris::SearchQuery::setFromInsertDateSpecific]
        
            typedef ::osiris::DateTime const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::DateTime const & ) ;
            
            SearchQuery_exposer.add_property( 
                "fromInsertDateSpecific"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getFromInsertDateSpecific )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setFromInsertDateSpecific )
                , "get\\set property, built on top of \"osiris::DateTime const & osiris::SearchQuery::getFromInsertDateSpecific() const [member function]\" and \"void osiris::SearchQuery::setFromInsertDateSpecific(osiris::DateTime const & fromInsertDate) [member function]\"" );
        
        }
        { //property "toInsertDateType"[fget=::osiris::SearchQuery::getToInsertDateType, fset=::osiris::SearchQuery::setToInsertDateType]
        
            typedef ::osiris::SearchDateTime ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::SearchDateTime ) ;
            
            SearchQuery_exposer.add_property( 
                "toInsertDateType"
                , fget( &::osiris::SearchQuery::getToInsertDateType )
                , fset( &::osiris::SearchQuery::setToInsertDateType )
                , "get\\set property, built on top of \"osiris::SearchDateTime osiris::SearchQuery::getToInsertDateType() const [member function]\" and \"void osiris::SearchQuery::setToInsertDateType(osiris::SearchDateTime toDateType) [member function]\"" );
        
        }
        { //property "toInsertDateSpecific"[fget=::osiris::SearchQuery::getToInsertDateSpecific, fset=::osiris::SearchQuery::setToInsertDateSpecific]
        
            typedef ::osiris::DateTime const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::DateTime const & ) ;
            
            SearchQuery_exposer.add_property( 
                "toInsertDateSpecific"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getToInsertDateSpecific )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setToInsertDateSpecific )
                , "get\\set property, built on top of \"osiris::DateTime const & osiris::SearchQuery::getToInsertDateSpecific() const [member function]\" and \"void osiris::SearchQuery::setToInsertDateSpecific(osiris::DateTime const & toInsertDate) [member function]\"" );
        
        }
        { //property "parentsRecursive"[fget=::osiris::SearchQuery::getParentsRecursive, fset=::osiris::SearchQuery::setParentsRecursive]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( bool ) ;
            
            SearchQuery_exposer.add_property( 
                "parentsRecursive"
                , fget( &::osiris::SearchQuery::getParentsRecursive )
                , fset( &::osiris::SearchQuery::setParentsRecursive )
                , "get\\set property, built on top of \"bool osiris::SearchQuery::getParentsRecursive() const [member function]\" and \"void osiris::SearchQuery::setParentsRecursive(bool parentsRecursive) [member function]\"" );
        
        }
        { //property "parentsListString"[fget=::osiris::SearchQuery::getParentsListString, fset=::osiris::SearchQuery::setParentsListString]
        
            typedef ::osiris::String ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "parentsListString"
                , fget( &::osiris::SearchQuery::getParentsListString )
                , fset( &::osiris::SearchQuery::setParentsListString )
                , "get\\set property, built on top of \"osiris::String osiris::SearchQuery::getParentsListString() const [member function]\" and \"void osiris::SearchQuery::setParentsListString(osiris::String const & parentsList) [member function]\"" );
        
        }
        { //property "treeMode"[fget=::osiris::SearchQuery::getTreeMode, fset=::osiris::SearchQuery::setTreeMode]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( bool ) ;
            
            SearchQuery_exposer.add_property( 
                "treeMode"
                , fget( &::osiris::SearchQuery::getTreeMode )
                , fset( &::osiris::SearchQuery::setTreeMode )
                , "get\\set property, built on top of \"bool osiris::SearchQuery::getTreeMode() const [member function]\" and \"void osiris::SearchQuery::setTreeMode(bool treeMode) [member function]\"" );
        
        }
        { //property "groupMode"[fget=::osiris::SearchQuery::getGroupMode, fset=::osiris::SearchQuery::setGroupMode]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( bool ) ;
            
            SearchQuery_exposer.add_property( 
                "groupMode"
                , fget( &::osiris::SearchQuery::getGroupMode )
                , fset( &::osiris::SearchQuery::setGroupMode )
                , "get\\set property, built on top of \"bool osiris::SearchQuery::getGroupMode() const [member function]\" and \"void osiris::SearchQuery::setGroupMode(bool groupMode) [member function]\"" );
        
        }
        { //property "offset"[fget=::osiris::SearchQuery::getOffset, fset=::osiris::SearchQuery::setOffset]
        
            typedef ::osiris::uint32 ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::uint32 ) ;
            
            SearchQuery_exposer.add_property( 
                "offset"
                , fget( &::osiris::SearchQuery::getOffset )
                , fset( &::osiris::SearchQuery::setOffset )
                , "get\\set property, built on top of \"osiris::uint32 osiris::SearchQuery::getOffset() const [member function]\" and \"void osiris::SearchQuery::setOffset(osiris::uint32 offset) [member function]\"" );
        
        }
        { //property "limit"[fget=::osiris::SearchQuery::getLimit, fset=::osiris::SearchQuery::setLimit]
        
            typedef ::osiris::uint32 ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::uint32 ) ;
            
            SearchQuery_exposer.add_property( 
                "limit"
                , fget( &::osiris::SearchQuery::getLimit )
                , fset( &::osiris::SearchQuery::setLimit )
                , "get\\set property, built on top of \"osiris::uint32 osiris::SearchQuery::getLimit() const [member function]\" and \"void osiris::SearchQuery::setLimit(osiris::uint32 limit) [member function]\"" );
        
        }
        { //property "maxResults"[fget=::osiris::SearchQuery::getMaxResults, fset=::osiris::SearchQuery::setMaxResults]
        
            typedef ::osiris::uint32 ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::uint32 ) ;
            
            SearchQuery_exposer.add_property( 
                "maxResults"
                , fget( &::osiris::SearchQuery::getMaxResults )
                , fset( &::osiris::SearchQuery::setMaxResults )
                , "get\\set property, built on top of \"osiris::uint32 osiris::SearchQuery::getMaxResults() const [member function]\" and \"void osiris::SearchQuery::setMaxResults(osiris::uint32 maxResults) [member function]\"" );
        
        }
        { //property "pagerSize"[fget=::osiris::SearchQuery::getPagerSize, fset=::osiris::SearchQuery::setPagerSize]
        
            typedef ::osiris::uint32 ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::uint32 ) ;
            
            SearchQuery_exposer.add_property( 
                "pagerSize"
                , fget( &::osiris::SearchQuery::getPagerSize )
                , fset( &::osiris::SearchQuery::setPagerSize )
                , "get\\set property, built on top of \"osiris::uint32 osiris::SearchQuery::getPagerSize() const [member function]\" and \"void osiris::SearchQuery::setPagerSize(osiris::uint32 pagerSize) [member function]\"" );
        
        }
        { //property "rssUrl"[fget=::osiris::SearchQuery::getRssUrl, fset=::osiris::SearchQuery::setRssUrl]
        
            typedef ::osiris::String const & ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "rssUrl"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getRssUrl )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::SearchQuery::setRssUrl )
                , "get\\set property, built on top of \"osiris::String const & osiris::SearchQuery::getRssUrl() const [member function]\" and \"void osiris::SearchQuery::setRssUrl(osiris::String const & rssUrl) [member function]\"" );
        
        }
        { //property "specialQuery"[fget=::osiris::SearchQuery::getSpecialQuery, fset=::osiris::SearchQuery::setSpecialQuery]
        
            typedef ::osiris::String ( ::osiris::SearchQuery::*fget )(  ) const;
            typedef void ( ::osiris::SearchQuery::*fset )( ::osiris::String const & ) ;
            
            SearchQuery_exposer.add_property( 
                "specialQuery"
                , fget( &::osiris::SearchQuery::getSpecialQuery )
                , fset( &::osiris::SearchQuery::setSpecialQuery )
                , "get\\set property, built on top of \"osiris::String osiris::SearchQuery::getSpecialQuery() const [member function]\" and \"void osiris::SearchQuery::setSpecialQuery(osiris::String const & name) [member function]\"" );
        
        }
        { //property "options"[fget=::osiris::SearchQuery::getOptions]
        
            typedef ::std::map<osiris::PortalObjectType, boost::shared_ptr<osiris::ISearchOptions>, std::less<osiris::PortalObjectType>, osiris::StdAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> >, osiris::SysAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> > > > > const & ( ::osiris::SearchQuery::*fget )(  ) const;
            
            SearchQuery_exposer.add_property( 
                "options"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getOptions )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::map<osiris::PortalObjectType, boost::shared_ptr<osiris::ISearchOptions>, std::less<osiris::PortalObjectType>, osiris::StdAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> >, osiris::SysAllocator<std::pair<osiris::PortalObjectType const, boost::shared_ptr<osiris::ISearchOptions> > > > > const & osiris::SearchQuery::getOptions() const [member function]\"" );
        
        }
        { //property "fullTextMode"[fget=::osiris::SearchQuery::getFullTextMode]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            
            SearchQuery_exposer.add_property( 
                "fullTextMode"
                , fget( &::osiris::SearchQuery::getFullTextMode )
                , "get property, built on top of \"bool osiris::SearchQuery::getFullTextMode() const [member function]\"" );
        
        }
        { //property "parentsList"[fget=::osiris::SearchQuery::getParentsList]
        
            typedef ::osiris::StringVector const & ( ::osiris::SearchQuery::*fget )(  ) const;
            
            SearchQuery_exposer.add_property( 
                "parentsList"
                , ::boost::python::make_function( 
                      fget( &::osiris::SearchQuery::getParentsList )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::StringVector const & osiris::SearchQuery::getParentsList() const [member function]\"" );
        
        }
        { //property "showInfo"[fget=::osiris::SearchQuery::getShowInfo]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            
            SearchQuery_exposer.add_property( 
                "showInfo"
                , fget( &::osiris::SearchQuery::getShowInfo )
                , "get property, built on top of \"bool osiris::SearchQuery::getShowInfo() const [member function]\"" );
        
        }
        { //property "showFilterAlphabetic"[fget=::osiris::SearchQuery::getShowFilterAlphabetic]
        
            typedef bool ( ::osiris::SearchQuery::*fget )(  ) const;
            
            SearchQuery_exposer.add_property( 
                "showFilterAlphabetic"
                , fget( &::osiris::SearchQuery::getShowFilterAlphabetic )
                , "get property, built on top of \"bool osiris::SearchQuery::getShowFilterAlphabetic() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::SearchQuery > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::SearchQuery >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::SearchQuery > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::SearchQuery >, boost::shared_ptr< ::osiris::Object > >();
    }

}
