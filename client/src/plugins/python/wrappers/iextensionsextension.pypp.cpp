// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "iextensionsextension.h"
#include "uniqueid.h"
#include "version.h"
#include "extensionsextension.h"
#include "iextensionsextension.pypp.hpp"

namespace bp = boost::python;

struct IExtensionsExtension_wrapper : ::osiris::IExtensionsExtension, ::osiris::PythonWrapper< ::osiris::IExtensionsExtension > {

    IExtensionsExtension_wrapper( )
    : ::osiris::IExtensionsExtension( )
      , ::osiris::PythonWrapper< ::osiris::IExtensionsExtension >(){
        // null constructor
    
    }

    static boost::python::object getDataPath( ::osiris::IExtensionsExtension const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getDataPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object isExtensionRegistered( ::osiris::IExtensionsExtension const & inst, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > db, ::osiris::Version & version ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isExtensionRegistered(portal, db, version);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object registerExtension( ::osiris::IExtensionsExtension & inst, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > db, ::osiris::Version const & version ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.registerExtension(portal, db, version);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object updateExtension( ::osiris::IExtensionsExtension & inst, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > db, ::osiris::Version const & version ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.updateExtension(portal, db, version);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void firePortalLoaded( ::osiris::IExtensionsExtension & inst, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.firePortalLoaded(portal, database);
        __pythreadSaver.restore();
    }

    virtual ::osiris::UniqueID getID(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getID = this->get_override( "getID" );
        return func_getID(  );
    }

    virtual ::osiris::String getName(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getName = this->get_override( "getName" );
        return func_getName(  );
    }

    virtual ::osiris::String getDescription(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getDescription = this->get_override( "getDescription" );
        return func_getDescription(  );
    }

    virtual ::osiris::String getAuthor(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getAuthor = this->get_override( "getAuthor" );
        return func_getAuthor(  );
    }

    virtual ::osiris::String getPath(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getPath = this->get_override( "getPath" );
        return func_getPath(  );
    }

    virtual bool getInternal(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_getInternal = this->get_override( "getInternal" );
        return func_getInternal(  );
    }

    virtual void load(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_load = this->get_override( "load" );
        func_load(  );
    }

    virtual void unload(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_unload = this->get_override( "unload" );
        func_unload(  );
    }

    virtual void onPortalLoaded( ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPortalLoaded = this->get_override( "onPortalLoaded" ) )
            func_onPortalLoaded( portal, database );
        else{
            __pystate.leave();
            this->::osiris::IExtensionsExtension::onPortalLoaded( portal, database );
        }
    }
    
    virtual void default_onPortalLoaded( ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IExtensionsExtension::onPortalLoaded( portal, database );
    }

};

void register_IExtensionsExtension_class(){

    { //::osiris::IExtensionsExtension
        typedef ::boost::python::class_< IExtensionsExtension_wrapper, ::boost::noncopyable > IExtensionsExtension_exposer_t;
        IExtensionsExtension_exposer_t IExtensionsExtension_exposer = IExtensionsExtension_exposer_t( "IExtensionsExtension", ::boost::python::init< >() );
        ::boost::python::scope IExtensionsExtension_scope( IExtensionsExtension_exposer );
        { //::osiris::IExtensionsExtension::getDataPath
        
            typedef boost::python::object ( *getDataPath_function_type )( ::osiris::IExtensionsExtension const & );
            
            IExtensionsExtension_exposer.def( 
                "getDataPath"
                , getDataPath_function_type( &IExtensionsExtension_wrapper::getDataPath ) );
        
        }
        { //::osiris::IExtensionsExtension::isExtensionRegistered
        
            typedef boost::python::object ( *isExtensionRegistered_function_type )( ::osiris::IExtensionsExtension const &,::boost::shared_ptr<osiris::Portal>,::boost::shared_ptr<osiris::IPortalDatabase>,::osiris::Version & );
            
            IExtensionsExtension_exposer.def( 
                "isExtensionRegistered"
                , isExtensionRegistered_function_type( &IExtensionsExtension_wrapper::isExtensionRegistered )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("db"), ::boost::python::arg("version") ) );
        
        }
        { //::osiris::IExtensionsExtension::registerExtension
        
            typedef boost::python::object ( *registerExtension_function_type )( ::osiris::IExtensionsExtension &,::boost::shared_ptr<osiris::Portal>,::boost::shared_ptr<osiris::IPortalDatabase>,::osiris::Version const & );
            
            IExtensionsExtension_exposer.def( 
                "registerExtension"
                , registerExtension_function_type( &IExtensionsExtension_wrapper::registerExtension )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("db"), ::boost::python::arg("version") ) );
        
        }
        { //::osiris::IExtensionsExtension::updateExtension
        
            typedef boost::python::object ( *updateExtension_function_type )( ::osiris::IExtensionsExtension &,::boost::shared_ptr<osiris::Portal>,::boost::shared_ptr<osiris::IPortalDatabase>,::osiris::Version const & );
            
            IExtensionsExtension_exposer.def( 
                "updateExtension"
                , updateExtension_function_type( &IExtensionsExtension_wrapper::updateExtension )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("db"), ::boost::python::arg("version") ) );
        
        }
        { //::osiris::IExtensionsExtension::firePortalLoaded
        
            typedef void ( *firePortalLoaded_function_type )( ::osiris::IExtensionsExtension &,::boost::shared_ptr<osiris::Portal>,::boost::shared_ptr<osiris::IPortalDatabase> );
            
            IExtensionsExtension_exposer.def( 
                "firePortalLoaded"
                , firePortalLoaded_function_type( &IExtensionsExtension_wrapper::firePortalLoaded )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("database") ) );
        
        }
        { //::osiris::IExtensionsExtension::getID
        
            typedef ::osiris::UniqueID ( ::osiris::IExtensionsExtension::*getID_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getID"
                , ( getID_function_type(&::osiris::IExtensionsExtension::getID) ) );
        
        }
        { //::osiris::IExtensionsExtension::getName
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*getName_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getName"
                , ( getName_function_type(&::osiris::IExtensionsExtension::getName) ) );
        
        }
        { //::osiris::IExtensionsExtension::getDescription
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*getDescription_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getDescription"
                , ( getDescription_function_type(&::osiris::IExtensionsExtension::getDescription) ) );
        
        }
        { //::osiris::IExtensionsExtension::getAuthor
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*getAuthor_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getAuthor"
                , ( getAuthor_function_type(&::osiris::IExtensionsExtension::getAuthor) ) );
        
        }
        { //::osiris::IExtensionsExtension::getPath
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*getPath_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getPath"
                , ( getPath_function_type(&::osiris::IExtensionsExtension::getPath) ) );
        
        }
        { //::osiris::IExtensionsExtension::getInternal
        
            typedef bool ( ::osiris::IExtensionsExtension::*getInternal_function_type )(  ) const;
            
            IExtensionsExtension_exposer.def( 
                "getInternal"
                , ( getInternal_function_type(&::osiris::IExtensionsExtension::getInternal) ) );
        
        }
        { //::osiris::IExtensionsExtension::load
        
            typedef void ( ::osiris::IExtensionsExtension::*load_function_type )(  ) ;
            
            IExtensionsExtension_exposer.def( 
                "load"
                , ( load_function_type(&::osiris::IExtensionsExtension::load) ) );
        
        }
        { //::osiris::IExtensionsExtension::unload
        
            typedef void ( ::osiris::IExtensionsExtension::*unload_function_type )(  ) ;
            
            IExtensionsExtension_exposer.def( 
                "unload"
                , ( unload_function_type(&::osiris::IExtensionsExtension::unload) ) );
        
        }
        { //::osiris::IExtensionsExtension::onPortalLoaded
        
            typedef void ( IExtensionsExtension_wrapper::*onPortalLoaded_function_type )( ::boost::shared_ptr< osiris::Portal >,::boost::shared_ptr< osiris::IPortalDatabase > ) ;
            
            IExtensionsExtension_exposer.def( 
                "onPortalLoaded"
                , onPortalLoaded_function_type( &IExtensionsExtension_wrapper::default_onPortalLoaded )
                , ( ::boost::python::arg("portal"), ::boost::python::arg("database") ) );
        
        }
        { //property "dataPath"[fget=::osiris::IExtensionsExtension::getDataPath]
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "dataPath"
                , fget( &::osiris::IExtensionsExtension::getDataPath )
                , "get property, built on top of \"osiris::String osiris::IExtensionsExtension::getDataPath() const [member function]\"" );
        
        }
        { //property "id"[fget=::osiris::IExtensionsExtension::getID]
        
            typedef ::osiris::UniqueID ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "id"
                , fget( &::osiris::IExtensionsExtension::getID )
                , "get property, built on top of \"osiris::UniqueID osiris::IExtensionsExtension::getID() const [member function]\"" );
        
        }
        { //property "name"[fget=::osiris::IExtensionsExtension::getName]
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "name"
                , fget( &::osiris::IExtensionsExtension::getName )
                , "get property, built on top of \"osiris::String osiris::IExtensionsExtension::getName() const [member function]\"" );
        
        }
        { //property "description"[fget=::osiris::IExtensionsExtension::getDescription]
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "description"
                , fget( &::osiris::IExtensionsExtension::getDescription )
                , "get property, built on top of \"osiris::String osiris::IExtensionsExtension::getDescription() const [member function]\"" );
        
        }
        { //property "author"[fget=::osiris::IExtensionsExtension::getAuthor]
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "author"
                , fget( &::osiris::IExtensionsExtension::getAuthor )
                , "get property, built on top of \"osiris::String osiris::IExtensionsExtension::getAuthor() const [member function]\"" );
        
        }
        { //property "path"[fget=::osiris::IExtensionsExtension::getPath]
        
            typedef ::osiris::String ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "path"
                , fget( &::osiris::IExtensionsExtension::getPath )
                , "get property, built on top of \"osiris::String osiris::IExtensionsExtension::getPath() const [member function]\"" );
        
        }
        { //property "internal"[fget=::osiris::IExtensionsExtension::getInternal]
        
            typedef bool ( ::osiris::IExtensionsExtension::*fget )(  ) const;
            
            IExtensionsExtension_exposer.add_property( 
                "internal"
                , fget( &::osiris::IExtensionsExtension::getInternal )
                , "get property, built on top of \"bool osiris::IExtensionsExtension::getInternal() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IExtensionsExtension > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IExtensionsExtension >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IExtensionsExtension > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IExtensionsExtension >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::ExtensionsExtension >, boost::shared_ptr< ::osiris::IExtensionsExtension > >();
    }

}
