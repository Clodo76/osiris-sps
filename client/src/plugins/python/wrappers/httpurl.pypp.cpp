// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpurl.h"
#include "httpurl.pypp.hpp"

namespace bp = boost::python;

static void clear_326815dc312abbe578fa09743470f838( ::osiris::HttpUrl & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.clear();
    __pythreadSaver.restore();
}

static boost::python::object empty_9feb8ca18044a1b601c399760e592cf9( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.empty();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getHost_14d9166616f65af9feb0ccabcb57be17( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getHost();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object getParams_c97e8973dd27bdab9c92ff8f9b66bf20( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getParams();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object getPassword_4454258c32cdd89f5b5e542ba8ca862e( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getPassword();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object getPath_609c899074d3a1ac6ec98db0312bf335( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getPath();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object getPort_201886c79d4e5fb735638f1fb0f7cccf( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::uint16 result = inst.getPort();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getSSL_7a7c2ea5c9b6c49238bee48825fbc38a( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.getSSL();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getUserName_7cd3bea6c107197f18f495058b5f9d96( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getUserName();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object toString_097daaab8988d907c2bd8caf6b249069( ::osiris::HttpUrl const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = inst.toString();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parse_33fac82b3a3aa3bbfe44a459a7927ed8( ::osiris::HttpUrl & inst, ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.parse(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void setHost_df16ef0055af67163279da2418028ea7( ::osiris::HttpUrl & inst, ::std::string const & host ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setHost(host);
    __pythreadSaver.restore();
}

static void setParams_8983f2579012d4e8b0e6b7e3433c0ce1( ::osiris::HttpUrl & inst, ::std::string const & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setParams(params);
    __pythreadSaver.restore();
}

static void setPassword_53b50e05c9a0d77f9e6011308ef44f4b( ::osiris::HttpUrl & inst, ::std::string const & password ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setPassword(password);
    __pythreadSaver.restore();
}

static void setPath_5b8b1ea055ae9a87a3c12f554297d2cd( ::osiris::HttpUrl & inst, ::std::string const & path ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setPath(path);
    __pythreadSaver.restore();
}

static void setPort_d88ddd7223bef931449e72f52a495426( ::osiris::HttpUrl & inst, ::osiris::uint16 port ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setPort(port);
    __pythreadSaver.restore();
}

static void setSSL_11d3c66198b18ea86929603c50a8cff1( ::osiris::HttpUrl & inst, bool ssl ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setSSL(ssl);
    __pythreadSaver.restore();
}

static void setUserName_4beb2758ddd2574a35884a7d0608fdde( ::osiris::HttpUrl & inst, ::std::string const & username ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.setUserName(username);
    __pythreadSaver.restore();
}

void register_HttpUrl_class(){

    { //::osiris::HttpUrl
        typedef ::boost::python::class_< ::osiris::HttpUrl > HttpUrl_exposer_t;
        HttpUrl_exposer_t HttpUrl_exposer = HttpUrl_exposer_t( "HttpUrl", ::boost::python::init< >() );
        ::boost::python::scope HttpUrl_scope( HttpUrl_exposer );
        HttpUrl_exposer.def( ::boost::python::init< ::std::string const & >(( ::boost::python::arg("url") )) );
        ::boost::python::implicitly_convertible< ::std::string const &, ::osiris::HttpUrl >();
        HttpUrl_exposer.def( ::boost::python::init< ::osiris::HttpUrl const & >(( ::boost::python::arg("second") )) );
        { //::osiris::HttpUrl::clear
        
            typedef void ( *clear_function_type )( ::osiris::HttpUrl & );
            
            HttpUrl_exposer.def( 
                "clear"
                , clear_function_type( &clear_326815dc312abbe578fa09743470f838 ) );
        
        }
        { //::osiris::HttpUrl::empty
        
            typedef boost::python::object ( *empty_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "empty"
                , empty_function_type( &empty_9feb8ca18044a1b601c399760e592cf9 ) );
        
        }
        { //::osiris::HttpUrl::getHost
        
            typedef boost::python::object ( *getHost_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getHost"
                , getHost_function_type( &getHost_14d9166616f65af9feb0ccabcb57be17 ) );
        
        }
        { //::osiris::HttpUrl::getParams
        
            typedef boost::python::object ( *getParams_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getParams"
                , getParams_function_type( &getParams_c97e8973dd27bdab9c92ff8f9b66bf20 ) );
        
        }
        { //::osiris::HttpUrl::getPassword
        
            typedef boost::python::object ( *getPassword_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getPassword"
                , getPassword_function_type( &getPassword_4454258c32cdd89f5b5e542ba8ca862e ) );
        
        }
        { //::osiris::HttpUrl::getPath
        
            typedef boost::python::object ( *getPath_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getPath"
                , getPath_function_type( &getPath_609c899074d3a1ac6ec98db0312bf335 ) );
        
        }
        { //::osiris::HttpUrl::getPort
        
            typedef boost::python::object ( *getPort_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getPort"
                , getPort_function_type( &getPort_201886c79d4e5fb735638f1fb0f7cccf ) );
        
        }
        { //::osiris::HttpUrl::getSSL
        
            typedef boost::python::object ( *getSSL_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getSSL"
                , getSSL_function_type( &getSSL_7a7c2ea5c9b6c49238bee48825fbc38a ) );
        
        }
        { //::osiris::HttpUrl::getUserName
        
            typedef boost::python::object ( *getUserName_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "getUserName"
                , getUserName_function_type( &getUserName_7cd3bea6c107197f18f495058b5f9d96 ) );
        
        }
        { //::osiris::HttpUrl::toString
        
            typedef boost::python::object ( *toString_function_type )( ::osiris::HttpUrl const & );
            
            HttpUrl_exposer.def( 
                "toString"
                , toString_function_type( &toString_097daaab8988d907c2bd8caf6b249069 ) );
        
        }
        { //::osiris::HttpUrl::operator=
        
            typedef ::osiris::HttpUrl & ( ::osiris::HttpUrl::*assign_function_type )( ::osiris::HttpUrl const & ) ;
            
            HttpUrl_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::HttpUrl::operator= )
                , ( ::boost::python::arg("second") )
                , bp::return_self< >() );
        
        }
        HttpUrl_exposer.def( ::boost::python::self == ::boost::python::self );
        { //::osiris::HttpUrl::parse
        
            typedef boost::python::object ( *parse_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "parse"
                , parse_function_type( &parse_33fac82b3a3aa3bbfe44a459a7927ed8 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HttpUrl::setHost
        
            typedef void ( *setHost_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "setHost"
                , setHost_function_type( &setHost_df16ef0055af67163279da2418028ea7 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("host") ) );
        
        }
        { //::osiris::HttpUrl::setParams
        
            typedef void ( *setParams_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "setParams"
                , setParams_function_type( &setParams_8983f2579012d4e8b0e6b7e3433c0ce1 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("params") ) );
        
        }
        { //::osiris::HttpUrl::setPassword
        
            typedef void ( *setPassword_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "setPassword"
                , setPassword_function_type( &setPassword_53b50e05c9a0d77f9e6011308ef44f4b )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password") ) );
        
        }
        { //::osiris::HttpUrl::setPath
        
            typedef void ( *setPath_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "setPath"
                , setPath_function_type( &setPath_5b8b1ea055ae9a87a3c12f554297d2cd )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::HttpUrl::setPort
        
            typedef void ( *setPort_function_type )( ::osiris::HttpUrl &,::osiris::uint16 );
            
            HttpUrl_exposer.def( 
                "setPort"
                , setPort_function_type( &setPort_d88ddd7223bef931449e72f52a495426 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("port") ) );
        
        }
        { //::osiris::HttpUrl::setSSL
        
            typedef void ( *setSSL_function_type )( ::osiris::HttpUrl &,bool );
            
            HttpUrl_exposer.def( 
                "setSSL"
                , setSSL_function_type( &setSSL_11d3c66198b18ea86929603c50a8cff1 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("ssl") ) );
        
        }
        { //::osiris::HttpUrl::setUserName
        
            typedef void ( *setUserName_function_type )( ::osiris::HttpUrl &,::std::string const & );
            
            HttpUrl_exposer.def( 
                "setUserName"
                , setUserName_function_type( &setUserName_4beb2758ddd2574a35884a7d0608fdde )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("username") ) );
        
        }
        HttpUrl_exposer.def_readonly( "EMPTY", ::osiris::HttpUrl::EMPTY );
        { //property "userName"[fget=::osiris::HttpUrl::getUserName, fset=::osiris::HttpUrl::setUserName]
        
            typedef ::std::string const & ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::std::string const & ) ;
            
            HttpUrl_exposer.add_property( 
                "userName"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpUrl::getUserName )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpUrl::setUserName )
                , "get\\set property, built on top of \"std::string const & osiris::HttpUrl::getUserName() const [member function]\" and \"void osiris::HttpUrl::setUserName(std::string const & username) [member function]\"" );
        
        }
        { //property "password"[fget=::osiris::HttpUrl::getPassword, fset=::osiris::HttpUrl::setPassword]
        
            typedef ::std::string const & ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::std::string const & ) ;
            
            HttpUrl_exposer.add_property( 
                "password"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpUrl::getPassword )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpUrl::setPassword )
                , "get\\set property, built on top of \"std::string const & osiris::HttpUrl::getPassword() const [member function]\" and \"void osiris::HttpUrl::setPassword(std::string const & password) [member function]\"" );
        
        }
        { //property "host"[fget=::osiris::HttpUrl::getHost, fset=::osiris::HttpUrl::setHost]
        
            typedef ::std::string const & ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::std::string const & ) ;
            
            HttpUrl_exposer.add_property( 
                "host"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpUrl::getHost )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpUrl::setHost )
                , "get\\set property, built on top of \"std::string const & osiris::HttpUrl::getHost() const [member function]\" and \"void osiris::HttpUrl::setHost(std::string const & host) [member function]\"" );
        
        }
        { //property "port"[fget=::osiris::HttpUrl::getPort, fset=::osiris::HttpUrl::setPort]
        
            typedef ::osiris::uint16 ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::osiris::uint16 ) ;
            
            HttpUrl_exposer.add_property( 
                "port"
                , fget( &::osiris::HttpUrl::getPort )
                , fset( &::osiris::HttpUrl::setPort )
                , "get\\set property, built on top of \"osiris::uint16 osiris::HttpUrl::getPort() const [member function]\" and \"void osiris::HttpUrl::setPort(osiris::uint16 port) [member function]\"" );
        
        }
        { //property "path"[fget=::osiris::HttpUrl::getPath, fset=::osiris::HttpUrl::setPath]
        
            typedef ::std::string const & ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::std::string const & ) ;
            
            HttpUrl_exposer.add_property( 
                "path"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpUrl::getPath )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpUrl::setPath )
                , "get\\set property, built on top of \"std::string const & osiris::HttpUrl::getPath() const [member function]\" and \"void osiris::HttpUrl::setPath(std::string const & path) [member function]\"" );
        
        }
        { //property "params"[fget=::osiris::HttpUrl::getParams, fset=::osiris::HttpUrl::setParams]
        
            typedef ::std::string const & ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( ::std::string const & ) ;
            
            HttpUrl_exposer.add_property( 
                "params"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpUrl::getParams )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpUrl::setParams )
                , "get\\set property, built on top of \"std::string const & osiris::HttpUrl::getParams() const [member function]\" and \"void osiris::HttpUrl::setParams(std::string const & params) [member function]\"" );
        
        }
        { //property "ssl"[fget=::osiris::HttpUrl::getSSL, fset=::osiris::HttpUrl::setSSL]
        
            typedef bool ( ::osiris::HttpUrl::*fget )(  ) const;
            typedef void ( ::osiris::HttpUrl::*fset )( bool ) ;
            
            HttpUrl_exposer.add_property( 
                "ssl"
                , fget( &::osiris::HttpUrl::getSSL )
                , fset( &::osiris::HttpUrl::setSSL )
                , "get\\set property, built on top of \"bool osiris::HttpUrl::getSSL() const [member function]\" and \"void osiris::HttpUrl::setSSL(bool ssl) [member function]\"" );
        
        }
    }

}
