// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "dbdatabasessystem.h"
#include "version.h"
#include "databasessystem.pypp.hpp"

namespace bp = boost::python;

struct DatabasesSystem_wrapper : ::osiris::DatabasesSystem, ::osiris::PythonWrapper< ::osiris::DatabasesSystem > {

    DatabasesSystem_wrapper( )
    : ::osiris::DatabasesSystem( )
      , ::osiris::PythonWrapper< ::osiris::DatabasesSystem >(){
        // null constructor
    
    }

    static boost::python::object getDrivers( ::osiris::DatabasesSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::list<boost::shared_ptr<osiris::IDbDriver>, osiris::StdAllocator<boost::shared_ptr<osiris::IDbDriver>, osiris::SysAllocator<boost::shared_ptr<osiris::IDbDriver> > > > const & result = inst.getDrivers();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::list<boost::shared_ptr<osiris::IDbDriver>, osiris::StdAllocator<boost::shared_ptr<osiris::IDbDriver>, osiris::SysAllocator<boost::shared_ptr<osiris::IDbDriver> > > > const & >( result ) );
    }

    static boost::python::object getDefaultDriver( ::osiris::DatabasesSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbDriver> result = inst.getDefaultDriver();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDatabasePath( ::osiris::DatabasesSystem const & inst, ::osiris::String const & type, ::osiris::Version const & version, bool allowDownload ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getDatabasePath(type, version, allowDownload);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object createDatabase( ::osiris::DatabasesSystem & inst, ::boost::shared_ptr< osiris::IDbDriver > driver, ::osiris::String const & database, ::boost::shared_ptr< osiris::IDbOptions > options, ::boost::shared_ptr< osiris::DbSchemaSchema > schema ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.createDatabase(driver, database, options, schema);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object loadSchema( ::osiris::DatabasesSystem & inst, ::boost::shared_ptr< osiris::IDbConnection > connection, ::boost::shared_ptr< osiris::DbSchemaSchema > schema ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.loadSchema(connection, schema);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String getName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            __pystate.leave();
            return this->::osiris::DatabasesSystem::getName(  );
        }
    }
    
    ::osiris::String default_getName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DatabasesSystem::getName( );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::DatabasesSystem::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DatabasesSystem::stop( );
    }

    static boost::python::object addDriver( ::osiris::DatabasesSystem & inst, ::boost::shared_ptr< osiris::IDbDriver > driver ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.addDriver(driver);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDriver( ::osiris::DatabasesSystem const & inst, ::std::string const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbDriver> result = inst.getDriver(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasDriver( ::osiris::DatabasesSystem const & inst, ::std::string const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasDriver(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool start( bool recovery ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_start = this->get_override( "start" ) )
            return func_start( recovery );
        else{
            __pystate.leave();
            return this->::osiris::DatabasesSystem::start( recovery );
        }
    }
    
    bool default_start( bool recovery ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DatabasesSystem::start( recovery );
    }

};

void register_DatabasesSystem_class(){

    { //::osiris::DatabasesSystem
        typedef ::boost::python::class_< DatabasesSystem_wrapper, ::boost::python::bases< ::osiris::DynamicSingleton< osiris::DatabasesSystem > >, ::boost::noncopyable > DatabasesSystem_exposer_t;
        DatabasesSystem_exposer_t DatabasesSystem_exposer = DatabasesSystem_exposer_t( "DatabasesSystem", ::boost::python::init< >() );
        ::boost::python::scope DatabasesSystem_scope( DatabasesSystem_exposer );
        { //::osiris::DatabasesSystem::getDrivers
        
            typedef boost::python::object ( *getDrivers_function_type )( ::osiris::DatabasesSystem const & );
            
            DatabasesSystem_exposer.def( 
                "getDrivers"
                , getDrivers_function_type( &DatabasesSystem_wrapper::getDrivers ) );
        
        }
        { //::osiris::DatabasesSystem::getDefaultDriver
        
            typedef boost::python::object ( *getDefaultDriver_function_type )( ::osiris::DatabasesSystem const & );
            
            DatabasesSystem_exposer.def( 
                "getDefaultDriver"
                , getDefaultDriver_function_type( &DatabasesSystem_wrapper::getDefaultDriver ) );
        
        }
        { //::osiris::DatabasesSystem::getDatabasePath
        
            typedef boost::python::object ( *getDatabasePath_function_type )( ::osiris::DatabasesSystem const &,::osiris::String const &,::osiris::Version const &,bool );
            
            DatabasesSystem_exposer.def( 
                "getDatabasePath"
                , getDatabasePath_function_type( &DatabasesSystem_wrapper::getDatabasePath )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type"), ::boost::python::arg("version"), ::boost::python::arg("allowDownload") ) );
        
        }
        { //::osiris::DatabasesSystem::createDatabase
        
            typedef boost::python::object ( *createDatabase_function_type )( ::osiris::DatabasesSystem &,::boost::shared_ptr<osiris::IDbDriver>,::osiris::String const &,::boost::shared_ptr<osiris::IDbOptions>,::boost::shared_ptr<osiris::DbSchemaSchema> );
            
            DatabasesSystem_exposer.def( 
                "createDatabase"
                , createDatabase_function_type( &DatabasesSystem_wrapper::createDatabase )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("driver"), ::boost::python::arg("database"), ::boost::python::arg("options"), ::boost::python::arg("schema") ) );
        
        }
        { //::osiris::DatabasesSystem::loadSchema
        
            typedef boost::python::object ( *loadSchema_function_type )( ::osiris::DatabasesSystem &,::boost::shared_ptr<osiris::IDbConnection>,::boost::shared_ptr<osiris::DbSchemaSchema> );
            
            DatabasesSystem_exposer.def( 
                "loadSchema"
                , loadSchema_function_type( &DatabasesSystem_wrapper::loadSchema )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("connection"), ::boost::python::arg("schema") ) );
        
        }
        { //::osiris::DatabasesSystem::getName
        
            typedef ::osiris::String ( ::osiris::DatabasesSystem::*getName_function_type )(  ) const;
            typedef ::osiris::String ( DatabasesSystem_wrapper::*default_getName_function_type )(  ) const;
            
            DatabasesSystem_exposer.def( 
                "getName"
                , getName_function_type(&::osiris::DatabasesSystem::getName)
                , default_getName_function_type(&DatabasesSystem_wrapper::default_getName) );
        
        }
        { //::osiris::DatabasesSystem::stop
        
            typedef void ( ::osiris::DatabasesSystem::*stop_function_type )(  ) ;
            typedef void ( DatabasesSystem_wrapper::*default_stop_function_type )(  ) ;
            
            DatabasesSystem_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::DatabasesSystem::stop)
                , default_stop_function_type(&DatabasesSystem_wrapper::default_stop) );
        
        }
        { //::osiris::DatabasesSystem::addDriver
        
            typedef boost::python::object ( *addDriver_function_type )( ::osiris::DatabasesSystem &,::boost::shared_ptr<osiris::IDbDriver> );
            
            DatabasesSystem_exposer.def( 
                "addDriver"
                , addDriver_function_type( &DatabasesSystem_wrapper::addDriver )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("driver") ) );
        
        }
        { //::osiris::DatabasesSystem::getDriver
        
            typedef boost::python::object ( *getDriver_function_type )( ::osiris::DatabasesSystem const &,::std::string const & );
            
            DatabasesSystem_exposer.def( 
                "getDriver"
                , getDriver_function_type( &DatabasesSystem_wrapper::getDriver )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::DatabasesSystem::hasDriver
        
            typedef boost::python::object ( *hasDriver_function_type )( ::osiris::DatabasesSystem const &,::std::string const & );
            
            DatabasesSystem_exposer.def( 
                "hasDriver"
                , hasDriver_function_type( &DatabasesSystem_wrapper::hasDriver )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::DatabasesSystem::start
        
            typedef bool ( ::osiris::DatabasesSystem::*start_function_type )( bool ) ;
            typedef bool ( DatabasesSystem_wrapper::*default_start_function_type )( bool ) ;
            
            DatabasesSystem_exposer.def( 
                "start"
                , start_function_type(&::osiris::DatabasesSystem::start)
                , default_start_function_type(&DatabasesSystem_wrapper::default_start)
                , ( ::boost::python::arg("recovery") ) );
        
        }
        { //property "drivers"[fget=::osiris::DatabasesSystem::getDrivers]
        
            typedef ::std::list<boost::shared_ptr<osiris::IDbDriver>, osiris::StdAllocator<boost::shared_ptr<osiris::IDbDriver>, osiris::SysAllocator<boost::shared_ptr<osiris::IDbDriver> > > > const & ( ::osiris::DatabasesSystem::*fget )(  ) const;
            
            DatabasesSystem_exposer.add_property( 
                "drivers"
                , ::boost::python::make_function( 
                      fget( &::osiris::DatabasesSystem::getDrivers )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::list<boost::shared_ptr<osiris::IDbDriver>, osiris::StdAllocator<boost::shared_ptr<osiris::IDbDriver>, osiris::SysAllocator<boost::shared_ptr<osiris::IDbDriver> > > > const & osiris::DatabasesSystem::getDrivers() const [member function]\"" );
        
        }
        { //property "defaultDriver"[fget=::osiris::DatabasesSystem::getDefaultDriver]
        
            typedef ::boost::shared_ptr<osiris::IDbDriver> ( ::osiris::DatabasesSystem::*fget )(  ) const;
            
            DatabasesSystem_exposer.add_property( 
                "defaultDriver"
                , fget( &::osiris::DatabasesSystem::getDefaultDriver )
                , "get property, built on top of \"boost::shared_ptr<osiris::IDbDriver> osiris::DatabasesSystem::getDefaultDriver() const [member function]\"" );
        
        }
        { //property "name"[fget=::osiris::DatabasesSystem::getName]
        
            typedef ::osiris::String ( ::osiris::DatabasesSystem::*fget )(  ) const;
            
            DatabasesSystem_exposer.add_property( 
                "name"
                , fget( &::osiris::DatabasesSystem::getName )
                , "get property, built on top of \"osiris::String osiris::DatabasesSystem::getName() const [member function]\"" );
        
        }
    }

}
