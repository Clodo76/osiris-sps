// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "portalsportalssystem.h"
#include "datetime.h"
#include "httpenumerateddirectorycallback.h"
#include "httpvirtualdirectory.h"
#include "isisservice.h"
#include "ids.h"
#include "portalssystem.pypp.hpp"

namespace bp = boost::python;

struct PortalsSystem_wrapper : ::osiris::PortalsSystem, ::osiris::PythonWrapper< ::osiris::PortalsSystem > {

    PortalsSystem_wrapper( )
    : ::osiris::PortalsSystem( )
      , ::osiris::PythonWrapper< ::osiris::PortalsSystem >(){
        // nullptr constructor
    
    }

    static boost::python::object getPortalsDirectory( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpVirtualDirectory> result = inst.getPortalsDirectory();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMainDirectory( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpVirtualDirectory> result = inst.getMainDirectory();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTempDirectory( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpEnumeratedDirectoryCallback> result = inst.getTempDirectory();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasPortal( ::osiris::PortalsSystem const & inst, ::osiris::UniqueID const & id, ::osiris::UniqueID const & pov ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasPortal(id, pov);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIsisService( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IsisService> result = inst.getIsisService();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCacheSize( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getCacheSize();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPeersCacheSize( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getPeersCacheSize();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDatabasesCacheSize( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getDatabasesCacheSize();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortals( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::list<boost::shared_ptr<osiris::Portal>, osiris::StdAllocator<boost::shared_ptr<osiris::Portal>, osiris::SysAllocator<boost::shared_ptr<osiris::Portal> > > > result = inst.getPortals();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortalsCount( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getPortalsCount();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortal( ::osiris::PortalsSystem const & inst, ::osiris::UniqueID const & id, ::osiris::UniqueID const & pov ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.getPortal(id, pov);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPath( ::osiris::PortalsSystem const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortalLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::std::string const & page, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getPortalLink(portal, page, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getExternalLink( ::osiris::PortalsSystem & inst, ::std::string const & url, bool confirm ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getExternalLink(url, confirm);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getAvatarLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id, ::osiris::DateTime const & dt ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getAvatarLink(portal, id, dt);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFileLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getFileLink(portal, id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getViewObjectLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getViewObjectLink(portal, id, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getEditObjectLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getEditObjectLink(portal, id, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUserLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getUserLink(portal, id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSendMessageLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::String const & id, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getSendMessageLink(portal, id, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object deletePortal( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::PortalOptions > options, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.deletePortal(options, path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object removePortal( ::osiris::PortalsSystem & inst, ::osiris::UniqueID const & id, ::osiris::UniqueID const & pov ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.removePortal(id, pov);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void notifyPortalLoaded( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > portal, ::boost::shared_ptr< osiris::IPortalDatabase > database ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.notifyPortalLoaded(portal, database);
        __pythreadSaver.restore();
    }

    virtual ::osiris::String getName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            __pystate.leave();
            return this->::osiris::PortalsSystem::getName(  );
        }
    }
    
    ::osiris::String default_getName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::PortalsSystem::getName( );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::PortalsSystem::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::PortalsSystem::stop( );
    }

    static void addPortalsListener( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::IPortalsListener > listener ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addPortalsListener(listener);
        __pythreadSaver.restore();
    }

    static boost::python::object ensurePortal( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::OsirisLink > link, ::osiris::String const & password=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.ensurePortal(link, password);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getAccountsLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getAccountsLink(portal, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getErrorLink( ::osiris::PortalsSystem & inst, ::osiris::String const & message ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getErrorLink(message);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFirstPortal( ::osiris::PortalsSystem const & inst, ::osiris::UniqueID const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.getFirstPortal(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLoginLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getLoginLink(portal, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMainLink( ::osiris::PortalsSystem & inst, ::std::string const & page, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getMainLink(page, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMainPage( ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ide::main::MainPage result = ::osiris::PortalsSystem::getMainPage(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortalByFullPov( ::osiris::PortalsSystem const & inst, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.getPortalByFullPov(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortalByIndex( ::osiris::PortalsSystem const & inst, ::osiris::uint32 index ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.getPortalByIndex(index);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPortalPage( ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ide::portal::PortalPage result = ::osiris::PortalsSystem::getPortalPage(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRedirectLink( ::osiris::PortalsSystem & inst, ::std::string const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getRedirectLink(url);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRegisterLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getRegisterLink(portal, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSettingsLink( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::Portal > const & portal, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getSettingsLink(portal, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasPortalByFullPov( ::osiris::PortalsSystem const & inst, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasPortalByFullPov(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool start( bool recovery ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_start = this->get_override( "start" ) )
            return func_start( recovery );
        else{
            __pystate.leave();
            return this->::osiris::PortalsSystem::start( recovery );
        }
    }
    
    bool default_start( bool recovery ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::PortalsSystem::start( recovery );
    }

    static boost::python::object subscribePortal( ::osiris::PortalsSystem & inst, ::boost::shared_ptr< osiris::PortalOptions > options ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::Portal> result = inst.subscribePortal(options);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_PortalsSystem_class(){

    { //::osiris::PortalsSystem
        typedef ::boost::python::class_< PortalsSystem_wrapper, ::boost::python::bases< ::osiris::DynamicSingleton< osiris::PortalsSystem > >, ::boost::noncopyable > PortalsSystem_exposer_t;
        PortalsSystem_exposer_t PortalsSystem_exposer = PortalsSystem_exposer_t( "PortalsSystem", ::boost::python::no_init );
        ::boost::python::scope PortalsSystem_scope( PortalsSystem_exposer );
        PortalsSystem_exposer.def( ::boost::python::init< >() );
        { //::osiris::PortalsSystem::getPortalsDirectory
        
            typedef boost::python::object ( *getPortalsDirectory_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getPortalsDirectory"
                , getPortalsDirectory_function_type( &PortalsSystem_wrapper::getPortalsDirectory ) );
        
        }
        { //::osiris::PortalsSystem::getMainDirectory
        
            typedef boost::python::object ( *getMainDirectory_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getMainDirectory"
                , getMainDirectory_function_type( &PortalsSystem_wrapper::getMainDirectory ) );
        
        }
        { //::osiris::PortalsSystem::getTempDirectory
        
            typedef boost::python::object ( *getTempDirectory_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getTempDirectory"
                , getTempDirectory_function_type( &PortalsSystem_wrapper::getTempDirectory ) );
        
        }
        { //::osiris::PortalsSystem::hasPortal
        
            typedef boost::python::object ( *hasPortal_function_type )( ::osiris::PortalsSystem const &,::osiris::UniqueID const &,::osiris::UniqueID const & );
            
            PortalsSystem_exposer.def( 
                "hasPortal"
                , hasPortal_function_type( &PortalsSystem_wrapper::hasPortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id"), ::boost::python::arg("pov") ) );
        
        }
        { //::osiris::PortalsSystem::getIsisService
        
            typedef boost::python::object ( *getIsisService_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getIsisService"
                , getIsisService_function_type( &PortalsSystem_wrapper::getIsisService ) );
        
        }
        { //::osiris::PortalsSystem::getCacheSize
        
            typedef boost::python::object ( *getCacheSize_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getCacheSize"
                , getCacheSize_function_type( &PortalsSystem_wrapper::getCacheSize ) );
        
        }
        { //::osiris::PortalsSystem::getPeersCacheSize
        
            typedef boost::python::object ( *getPeersCacheSize_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getPeersCacheSize"
                , getPeersCacheSize_function_type( &PortalsSystem_wrapper::getPeersCacheSize ) );
        
        }
        { //::osiris::PortalsSystem::getDatabasesCacheSize
        
            typedef boost::python::object ( *getDatabasesCacheSize_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getDatabasesCacheSize"
                , getDatabasesCacheSize_function_type( &PortalsSystem_wrapper::getDatabasesCacheSize ) );
        
        }
        { //::osiris::PortalsSystem::getPortals
        
            typedef boost::python::object ( *getPortals_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getPortals"
                , getPortals_function_type( &PortalsSystem_wrapper::getPortals ) );
        
        }
        { //::osiris::PortalsSystem::getPortalsCount
        
            typedef boost::python::object ( *getPortalsCount_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getPortalsCount"
                , getPortalsCount_function_type( &PortalsSystem_wrapper::getPortalsCount ) );
        
        }
        { //::osiris::PortalsSystem::getPortal
        
            typedef boost::python::object ( *getPortal_function_type )( ::osiris::PortalsSystem const &,::osiris::UniqueID const &,::osiris::UniqueID const & );
            
            PortalsSystem_exposer.def( 
                "getPortal"
                , getPortal_function_type( &PortalsSystem_wrapper::getPortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id"), ::boost::python::arg("pov") ) );
        
        }
        { //::osiris::PortalsSystem::getPath
        
            typedef boost::python::object ( *getPath_function_type )( ::osiris::PortalsSystem const & );
            
            PortalsSystem_exposer.def( 
                "getPath"
                , getPath_function_type( &PortalsSystem_wrapper::getPath ) );
        
        }
        { //::osiris::PortalsSystem::getPortalLink
        
            typedef boost::python::object ( *getPortalLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getPortalLink"
                , getPortalLink_function_type( &PortalsSystem_wrapper::getPortalLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("page"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getExternalLink
        
            typedef boost::python::object ( *getExternalLink_function_type )( ::osiris::PortalsSystem &,::std::string const &,bool );
            
            PortalsSystem_exposer.def( 
                "getExternalLink"
                , getExternalLink_function_type( &PortalsSystem_wrapper::getExternalLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("confirm") ) );
        
        }
        { //::osiris::PortalsSystem::getAvatarLink
        
            typedef boost::python::object ( *getAvatarLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const &,::osiris::DateTime const & );
            
            PortalsSystem_exposer.def( 
                "getAvatarLink"
                , getAvatarLink_function_type( &PortalsSystem_wrapper::getAvatarLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::PortalsSystem::getFileLink
        
            typedef boost::python::object ( *getFileLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getFileLink"
                , getFileLink_function_type( &PortalsSystem_wrapper::getFileLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsSystem::getViewObjectLink
        
            typedef boost::python::object ( *getViewObjectLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getViewObjectLink"
                , getViewObjectLink_function_type( &PortalsSystem_wrapper::getViewObjectLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getEditObjectLink
        
            typedef boost::python::object ( *getEditObjectLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getEditObjectLink"
                , getEditObjectLink_function_type( &PortalsSystem_wrapper::getEditObjectLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getUserLink
        
            typedef boost::python::object ( *getUserLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getUserLink"
                , getUserLink_function_type( &PortalsSystem_wrapper::getUserLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsSystem::getSendMessageLink
        
            typedef boost::python::object ( *getSendMessageLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::String const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getSendMessageLink"
                , getSendMessageLink_function_type( &PortalsSystem_wrapper::getSendMessageLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("id"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::deletePortal
        
            typedef boost::python::object ( *deletePortal_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::PortalOptions>,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "deletePortal"
                , deletePortal_function_type( &PortalsSystem_wrapper::deletePortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("options"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::PortalsSystem::removePortal
        
            typedef boost::python::object ( *removePortal_function_type )( ::osiris::PortalsSystem &,::osiris::UniqueID const &,::osiris::UniqueID const & );
            
            PortalsSystem_exposer.def( 
                "removePortal"
                , removePortal_function_type( &PortalsSystem_wrapper::removePortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id"), ::boost::python::arg("pov") ) );
        
        }
        { //::osiris::PortalsSystem::notifyPortalLoaded
        
            typedef void ( *notifyPortalLoaded_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal>,::boost::shared_ptr<osiris::IPortalDatabase> );
            
            PortalsSystem_exposer.def( 
                "notifyPortalLoaded"
                , notifyPortalLoaded_function_type( &PortalsSystem_wrapper::notifyPortalLoaded )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("database") ) );
        
        }
        { //::osiris::PortalsSystem::getName
        
            typedef ::osiris::String ( ::osiris::PortalsSystem::*getName_function_type )(  ) const;
            typedef ::osiris::String ( PortalsSystem_wrapper::*default_getName_function_type )(  ) const;
            
            PortalsSystem_exposer.def( 
                "getName"
                , getName_function_type(&::osiris::PortalsSystem::getName)
                , default_getName_function_type(&PortalsSystem_wrapper::default_getName) );
        
        }
        { //::osiris::PortalsSystem::stop
        
            typedef void ( ::osiris::PortalsSystem::*stop_function_type )(  ) ;
            typedef void ( PortalsSystem_wrapper::*default_stop_function_type )(  ) ;
            
            PortalsSystem_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::PortalsSystem::stop)
                , default_stop_function_type(&PortalsSystem_wrapper::default_stop) );
        
        }
        { //::osiris::PortalsSystem::addPortalsListener
        
            typedef void ( *addPortalsListener_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::IPortalsListener> );
            
            PortalsSystem_exposer.def( 
                "addPortalsListener"
                , addPortalsListener_function_type( &PortalsSystem_wrapper::addPortalsListener )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("listener") ) );
        
        }
        { //::osiris::PortalsSystem::ensurePortal
        
            typedef boost::python::object ( *ensurePortal_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::OsirisLink>,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "ensurePortal"
                , ensurePortal_function_type( &PortalsSystem_wrapper::ensurePortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("link"), ::boost::python::arg("password")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::PortalsSystem::getAccountsLink
        
            typedef boost::python::object ( *getAccountsLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getAccountsLink"
                , getAccountsLink_function_type( &PortalsSystem_wrapper::getAccountsLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getErrorLink
        
            typedef boost::python::object ( *getErrorLink_function_type )( ::osiris::PortalsSystem &,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getErrorLink"
                , getErrorLink_function_type( &PortalsSystem_wrapper::getErrorLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("message") ) );
        
        }
        { //::osiris::PortalsSystem::getFirstPortal
        
            typedef boost::python::object ( *getFirstPortal_function_type )( ::osiris::PortalsSystem const &,::osiris::UniqueID const & );
            
            PortalsSystem_exposer.def( 
                "getFirstPortal"
                , getFirstPortal_function_type( &PortalsSystem_wrapper::getFirstPortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsSystem::getLoginLink
        
            typedef boost::python::object ( *getLoginLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getLoginLink"
                , getLoginLink_function_type( &PortalsSystem_wrapper::getLoginLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getMainLink
        
            typedef boost::python::object ( *getMainLink_function_type )( ::osiris::PortalsSystem &,::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getMainLink"
                , getMainLink_function_type( &PortalsSystem_wrapper::getMainLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("page"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getMainPage
        
            typedef boost::python::object ( *getMainPage_function_type )( ::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getMainPage"
                , getMainPage_function_type( &PortalsSystem_wrapper::getMainPage )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::PortalsSystem::getPortalByFullPov
        
            typedef boost::python::object ( *getPortalByFullPov_function_type )( ::osiris::PortalsSystem const &,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getPortalByFullPov"
                , getPortalByFullPov_function_type( &PortalsSystem_wrapper::getPortalByFullPov )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsSystem::getPortalByIndex
        
            typedef boost::python::object ( *getPortalByIndex_function_type )( ::osiris::PortalsSystem const &,::osiris::uint32 );
            
            PortalsSystem_exposer.def( 
                "getPortalByIndex"
                , getPortalByIndex_function_type( &PortalsSystem_wrapper::getPortalByIndex )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("index") ) );
        
        }
        { //::osiris::PortalsSystem::getPortalPage
        
            typedef boost::python::object ( *getPortalPage_function_type )( ::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "getPortalPage"
                , getPortalPage_function_type( &PortalsSystem_wrapper::getPortalPage )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::PortalsSystem::getRedirectLink
        
            typedef boost::python::object ( *getRedirectLink_function_type )( ::osiris::PortalsSystem &,::std::string const & );
            
            PortalsSystem_exposer.def( 
                "getRedirectLink"
                , getRedirectLink_function_type( &PortalsSystem_wrapper::getRedirectLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::PortalsSystem::getRegisterLink
        
            typedef boost::python::object ( *getRegisterLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getRegisterLink"
                , getRegisterLink_function_type( &PortalsSystem_wrapper::getRegisterLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::getSettingsLink
        
            typedef boost::python::object ( *getSettingsLink_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::Portal> const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            PortalsSystem_exposer.def( 
                "getSettingsLink"
                , getSettingsLink_function_type( &PortalsSystem_wrapper::getSettingsLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("portal"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) );
        
        }
        { //::osiris::PortalsSystem::hasPortalByFullPov
        
            typedef boost::python::object ( *hasPortalByFullPov_function_type )( ::osiris::PortalsSystem const &,::osiris::String const & );
            
            PortalsSystem_exposer.def( 
                "hasPortalByFullPov"
                , hasPortalByFullPov_function_type( &PortalsSystem_wrapper::hasPortalByFullPov )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::PortalsSystem::start
        
            typedef bool ( ::osiris::PortalsSystem::*start_function_type )( bool ) ;
            typedef bool ( PortalsSystem_wrapper::*default_start_function_type )( bool ) ;
            
            PortalsSystem_exposer.def( 
                "start"
                , start_function_type(&::osiris::PortalsSystem::start)
                , default_start_function_type(&PortalsSystem_wrapper::default_start)
                , ( ::boost::python::arg("recovery") ) );
        
        }
        { //::osiris::PortalsSystem::subscribePortal
        
            typedef boost::python::object ( *subscribePortal_function_type )( ::osiris::PortalsSystem &,::boost::shared_ptr<osiris::PortalOptions> );
            
            PortalsSystem_exposer.def( 
                "subscribePortal"
                , subscribePortal_function_type( &PortalsSystem_wrapper::subscribePortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("options") ) );
        
        }
        PortalsSystem_exposer.def_readonly( "MAIN_DIRECTORY", ::osiris::PortalsSystem::MAIN_DIRECTORY );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_ACCOUNTS", ::osiris::PortalsSystem::MAIN_PAGE_ACCOUNTS );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_EXPORT", ::osiris::PortalsSystem::MAIN_PAGE_EXPORT );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_IMPORT", ::osiris::PortalsSystem::MAIN_PAGE_IMPORT );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_ISIS", ::osiris::PortalsSystem::MAIN_PAGE_ISIS );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_JOBDETAIL", ::osiris::PortalsSystem::MAIN_PAGE_JOBDETAIL );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_JOBS", ::osiris::PortalsSystem::MAIN_PAGE_JOBS );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_MAINTENANCE", ::osiris::PortalsSystem::MAIN_PAGE_MAINTENANCE );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_OPTIONS", ::osiris::PortalsSystem::MAIN_PAGE_OPTIONS );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_RESOURCES", ::osiris::PortalsSystem::MAIN_PAGE_RESOURCES );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_SETTINGS", ::osiris::PortalsSystem::MAIN_PAGE_SETTINGS );
        PortalsSystem_exposer.def_readonly( "MAIN_PAGE_SUBSCRIBE", ::osiris::PortalsSystem::MAIN_PAGE_SUBSCRIBE );
        PortalsSystem_exposer.def_readonly( "PORTALS_DIRECTORY", ::osiris::PortalsSystem::PORTALS_DIRECTORY );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_ACCOUNT", ::osiris::PortalsSystem::PORTAL_PAGE_ACCOUNT );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_ASSISTANT", ::osiris::PortalsSystem::PORTAL_PAGE_ASSISTANT );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_EDIT", ::osiris::PortalsSystem::PORTAL_PAGE_EDIT );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_MESSENGER", ::osiris::PortalsSystem::PORTAL_PAGE_MESSENGER );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_OBJECTDETAIL", ::osiris::PortalsSystem::PORTAL_PAGE_OBJECTDETAIL );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_SEARCH", ::osiris::PortalsSystem::PORTAL_PAGE_SEARCH );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_USER", ::osiris::PortalsSystem::PORTAL_PAGE_USER );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_USERS", ::osiris::PortalsSystem::PORTAL_PAGE_USERS );
        PortalsSystem_exposer.def_readonly( "PORTAL_PAGE_VIEW", ::osiris::PortalsSystem::PORTAL_PAGE_VIEW );
        PortalsSystem_exposer.def_readonly( "TEMP_DIRECTORY", ::osiris::PortalsSystem::TEMP_DIRECTORY );
        PortalsSystem_exposer.staticmethod( "getMainPage" );
        PortalsSystem_exposer.staticmethod( "getPortalPage" );
        { //property "portalsDirectory"[fget=::osiris::PortalsSystem::getPortalsDirectory]
        
            typedef ::boost::shared_ptr<osiris::HttpVirtualDirectory> ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "portalsDirectory"
                , fget( &::osiris::PortalsSystem::getPortalsDirectory )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpVirtualDirectory> osiris::PortalsSystem::getPortalsDirectory() const [member function]\"" );
        
        }
        { //property "mainDirectory"[fget=::osiris::PortalsSystem::getMainDirectory]
        
            typedef ::boost::shared_ptr<osiris::HttpVirtualDirectory> ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "mainDirectory"
                , fget( &::osiris::PortalsSystem::getMainDirectory )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpVirtualDirectory> osiris::PortalsSystem::getMainDirectory() const [member function]\"" );
        
        }
        { //property "tempDirectory"[fget=::osiris::PortalsSystem::getTempDirectory]
        
            typedef ::boost::shared_ptr<osiris::HttpEnumeratedDirectoryCallback> ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "tempDirectory"
                , fget( &::osiris::PortalsSystem::getTempDirectory )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpEnumeratedDirectoryCallback> osiris::PortalsSystem::getTempDirectory() const [member function]\"" );
        
        }
        { //property "isisService"[fget=::osiris::PortalsSystem::getIsisService]
        
            typedef ::boost::shared_ptr<osiris::IsisService> ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "isisService"
                , fget( &::osiris::PortalsSystem::getIsisService )
                , "get property, built on top of \"boost::shared_ptr<osiris::IsisService> osiris::PortalsSystem::getIsisService() const [member function]\"" );
        
        }
        { //property "cacheSize"[fget=::osiris::PortalsSystem::getCacheSize]
        
            typedef ::osiris::uint32 ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "cacheSize"
                , fget( &::osiris::PortalsSystem::getCacheSize )
                , "get property, built on top of \"osiris::uint32 osiris::PortalsSystem::getCacheSize() const [member function]\"" );
        
        }
        { //property "peersCacheSize"[fget=::osiris::PortalsSystem::getPeersCacheSize]
        
            typedef ::osiris::uint32 ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "peersCacheSize"
                , fget( &::osiris::PortalsSystem::getPeersCacheSize )
                , "get property, built on top of \"osiris::uint32 osiris::PortalsSystem::getPeersCacheSize() const [member function]\"" );
        
        }
        { //property "databasesCacheSize"[fget=::osiris::PortalsSystem::getDatabasesCacheSize]
        
            typedef ::osiris::uint32 ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "databasesCacheSize"
                , fget( &::osiris::PortalsSystem::getDatabasesCacheSize )
                , "get property, built on top of \"osiris::uint32 osiris::PortalsSystem::getDatabasesCacheSize() const [member function]\"" );
        
        }
        { //property "portals"[fget=::osiris::PortalsSystem::getPortals]
        
            typedef ::std::list<boost::shared_ptr<osiris::Portal>, osiris::StdAllocator<boost::shared_ptr<osiris::Portal>, osiris::SysAllocator<boost::shared_ptr<osiris::Portal> > > > ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "portals"
                , fget( &::osiris::PortalsSystem::getPortals )
                , "get property, built on top of \"std::list<boost::shared_ptr<osiris::Portal>, osiris::StdAllocator<boost::shared_ptr<osiris::Portal>, osiris::SysAllocator<boost::shared_ptr<osiris::Portal> > > > osiris::PortalsSystem::getPortals() const [member function]\"" );
        
        }
        { //property "portalsCount"[fget=::osiris::PortalsSystem::getPortalsCount]
        
            typedef ::osiris::uint32 ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "portalsCount"
                , fget( &::osiris::PortalsSystem::getPortalsCount )
                , "get property, built on top of \"osiris::uint32 osiris::PortalsSystem::getPortalsCount() const [member function]\"" );
        
        }
        { //property "path"[fget=::osiris::PortalsSystem::getPath]
        
            typedef ::osiris::String ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "path"
                , fget( &::osiris::PortalsSystem::getPath )
                , "get property, built on top of \"osiris::String osiris::PortalsSystem::getPath() const [member function]\"" );
        
        }
        { //property "name"[fget=::osiris::PortalsSystem::getName]
        
            typedef ::osiris::String ( ::osiris::PortalsSystem::*fget )(  ) const;
            
            PortalsSystem_exposer.add_property( 
                "name"
                , fget( &::osiris::PortalsSystem::getName )
                , "get property, built on top of \"osiris::String osiris::PortalsSystem::getName() const [member function]\"" );
        
        }
    }

}
