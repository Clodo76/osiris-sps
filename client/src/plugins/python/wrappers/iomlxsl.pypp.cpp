// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "iomlxsl.h"
#include "omluser.h"
#include "omlview.h"
#include "iomlxsl.pypp.hpp"

namespace bp = boost::python;

struct IOMLXsl_wrapper : ::osiris::IOMLXsl, ::osiris::PythonWrapper< ::osiris::IOMLXsl > {

    IOMLXsl_wrapper(::osiris::IOMLXsl const & arg )
    : ::osiris::IOMLXsl( arg )
      , ::osiris::PythonWrapper< ::osiris::IOMLXsl >(){
        // copy constructor
        
    }

    IOMLXsl_wrapper(::osiris::String const & tag )
    : ::osiris::IOMLXsl( boost::ref(tag) )
      , ::osiris::PythonWrapper< ::osiris::IOMLXsl >(){
        // constructor
    
    }

    static boost::python::object initDocument( ::osiris::IOMLXsl const & inst, ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::XMLDocument> result = inst.initDocument(i, context);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object processDocument( ::osiris::IOMLXsl const & inst, ::boost::shared_ptr< osiris::XMLDocument > document, ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.processDocument(document, i, context);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processHtml = this->get_override( "processHtml" ) )
            return func_processHtml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::IOMLXsl::processHtml( i, context );
        }
    }
    
    ::osiris::String default_processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLXsl::processHtml( i, context );
    }

    virtual bool allowRowMode(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_allowRowMode = this->get_override( "allowRowMode" ) )
            return func_allowRowMode(  );
        else{
            __pystate.leave();
            return this->::osiris::IOMLCode::allowRowMode(  );
        }
    }
    
    bool default_allowRowMode(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLCode::allowRowMode( );
    }

    virtual ::osiris::String processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processOsml = this->get_override( "processOsml" ) )
            return func_processOsml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::IOMLCode::processOsml( i, context );
        }
    }
    
    ::osiris::String default_processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLCode::processOsml( i, context );
    }

};

void register_IOMLXsl_class(){

    { //::osiris::IOMLXsl
        typedef ::boost::python::class_< IOMLXsl_wrapper, ::boost::python::bases< ::osiris::IOMLCode > > IOMLXsl_exposer_t;
        IOMLXsl_exposer_t IOMLXsl_exposer = IOMLXsl_exposer_t( "IOMLXsl", ::boost::python::init< ::osiris::String const & >(( ::boost::python::arg("tag") )) );
        ::boost::python::scope IOMLXsl_scope( IOMLXsl_exposer );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::IOMLXsl >();
        { //::osiris::IOMLXsl::initDocument
        
            typedef boost::python::object ( *initDocument_function_type )( ::osiris::IOMLXsl const &,::boost::shared_ptr<osiris::OMLItem>,::boost::shared_ptr<osiris::OMLContext> );
            
            IOMLXsl_exposer.def( 
                "initDocument"
                , initDocument_function_type( &IOMLXsl_wrapper::initDocument )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
        { //::osiris::IOMLXsl::processDocument
        
            typedef boost::python::object ( *processDocument_function_type )( ::osiris::IOMLXsl const &,::boost::shared_ptr<osiris::XMLDocument>,::boost::shared_ptr<osiris::OMLItem>,::boost::shared_ptr<osiris::OMLContext> );
            
            IOMLXsl_exposer.def( 
                "processDocument"
                , processDocument_function_type( &IOMLXsl_wrapper::processDocument )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("document"), ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
        { //::osiris::IOMLXsl::processHtml
        
            typedef ::osiris::String ( ::osiris::IOMLXsl::*processHtml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            typedef ::osiris::String ( IOMLXsl_wrapper::*default_processHtml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            
            IOMLXsl_exposer.def( 
                "processHtml"
                , processHtml_function_type(&::osiris::IOMLXsl::processHtml)
                , default_processHtml_function_type(&IOMLXsl_wrapper::default_processHtml)
                , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
        { //::osiris::IOMLCode::allowRowMode
        
            typedef bool ( ::osiris::IOMLCode::*allowRowMode_function_type )(  ) const;
            typedef bool ( IOMLXsl_wrapper::*default_allowRowMode_function_type )(  ) const;
            
            IOMLXsl_exposer.def( 
                "allowRowMode"
                , allowRowMode_function_type(&::osiris::IOMLCode::allowRowMode)
                , default_allowRowMode_function_type(&IOMLXsl_wrapper::default_allowRowMode) );
        
        }
        { //::osiris::IOMLCode::processOsml
        
            typedef ::osiris::String ( ::osiris::IOMLCode::*processOsml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            typedef ::osiris::String ( IOMLXsl_wrapper::*default_processOsml_function_type )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const;
            
            IOMLXsl_exposer.def( 
                "processOsml"
                , processOsml_function_type(&::osiris::IOMLCode::processOsml)
                , default_processOsml_function_type(&IOMLXsl_wrapper::default_processOsml)
                , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );
        
        }
    }

}
