// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ijob.h"
#include "ibackgroundjob.h"
#include "mainaddonsjob.h"
#include "iportalbackgroundjob.h"
#include "portalsimporterjob.h"
#include "portalsstabilityjob.h"
#include "ijob.pypp.hpp"

namespace bp = boost::python;

struct IJob_wrapper : ::osiris::IJob, ::osiris::PythonWrapper< ::osiris::IJob > {

    IJob_wrapper(::osiris::uint32 id, ::osiris::TaskPriority priority=::osiris::taskPriorityNormal )
    : ::osiris::IJob( id, priority )
      , ::osiris::PythonWrapper< ::osiris::IJob >(){
        // constructor
    
    }

    static boost::python::object getID( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getID();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPriority( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::TaskPriority result = inst.getPriority();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRunnable( ::osiris::IJob const & inst, ::osiris::uint32 * timeout=(nullptr) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getRunnable(timeout);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDelay( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::posix_time::ptime result = inst.getDelay();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getStatus( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IJob::JobStatus result = inst.getStatus();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object ready( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.ready();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object running( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.running();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object stopped( ::osiris::IJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.stopped();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void resetDelay( ::osiris::IJob & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.resetDelay();
        __pythreadSaver.restore();
    }

    static boost::python::object clock(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::posix_time::ptime result = ::osiris::IJob::clock();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::IJob::JobStatus start(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_start = this->get_override( "start" ) )
            return func_start(  );
        else{
            __pystate.leave();
            return this->::osiris::IJob::start(  );
        }
    }
    
    ::osiris::IJob::JobStatus default_start(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IJob::start( );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::IJob::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IJob::stop( );
    }

    virtual ::osiris::IJob::JobStatus run(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_run = this->get_override( "run" );
        return func_run(  );
    }

    static void applyDelay( ::osiris::IJob & inst, ::osiris::uint32 delay ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.applyDelay(delay);
        __pythreadSaver.restore();
    }

    static void setPriority( ::osiris::IJob & inst, ::osiris::TaskPriority priority ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPriority(priority);
        __pythreadSaver.restore();
    }

};

void register_IJob_class(){

    { //::osiris::IJob
        typedef ::boost::python::class_< IJob_wrapper, ::boost::noncopyable > IJob_exposer_t;
        IJob_exposer_t IJob_exposer = IJob_exposer_t( "IJob", ::boost::python::init< ::osiris::uint32, ::boost::python::optional< ::osiris::TaskPriority > >(( ::boost::python::arg("id"), ::boost::python::arg("priority")=::osiris::taskPriorityNormal )) );
        ::boost::python::scope IJob_scope( IJob_exposer );
        ::boost::python::enum_< ::osiris::IJob::JobStatus>("JobStatus")
            .value("jobIncomplete", ::osiris::IJob::jobIncomplete)
            .value("jobComplete", ::osiris::IJob::jobComplete)
            .export_values()
            ;
        { //::osiris::IJob::getID
        
            typedef boost::python::object ( *getID_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "getID"
                , getID_function_type( &IJob_wrapper::getID ) );
        
        }
        { //::osiris::IJob::getPriority
        
            typedef boost::python::object ( *getPriority_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "getPriority"
                , getPriority_function_type( &IJob_wrapper::getPriority ) );
        
        }
        { //::osiris::IJob::getRunnable
        
            typedef boost::python::object ( *getRunnable_function_type )( ::osiris::IJob const &,::osiris::uint32 * );
            
            IJob_exposer.def( 
                "getRunnable"
                , getRunnable_function_type( &IJob_wrapper::getRunnable )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("timeout")=(nullptr) ) );
        
        }
        { //::osiris::IJob::getDelay
        
            typedef boost::python::object ( *getDelay_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "getDelay"
                , getDelay_function_type( &IJob_wrapper::getDelay ) );
        
        }
        { //::osiris::IJob::getStatus
        
            typedef boost::python::object ( *getStatus_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "getStatus"
                , getStatus_function_type( &IJob_wrapper::getStatus ) );
        
        }
        { //::osiris::IJob::ready
        
            typedef boost::python::object ( *ready_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "ready"
                , ready_function_type( &IJob_wrapper::ready ) );
        
        }
        { //::osiris::IJob::running
        
            typedef boost::python::object ( *running_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "running"
                , running_function_type( &IJob_wrapper::running ) );
        
        }
        { //::osiris::IJob::stopped
        
            typedef boost::python::object ( *stopped_function_type )( ::osiris::IJob const & );
            
            IJob_exposer.def( 
                "stopped"
                , stopped_function_type( &IJob_wrapper::stopped ) );
        
        }
        { //::osiris::IJob::resetDelay
        
            typedef void ( *resetDelay_function_type )( ::osiris::IJob & );
            
            IJob_exposer.def( 
                "resetDelay"
                , resetDelay_function_type( &IJob_wrapper::resetDelay ) );
        
        }
        { //::osiris::IJob::clock
        
            typedef boost::python::object ( *clock_function_type )(  );
            
            IJob_exposer.def( 
                "clock"
                , clock_function_type( &IJob_wrapper::clock ) );
        
        }
        { //::osiris::IJob::start
        
            typedef ::osiris::IJob::JobStatus ( ::osiris::IJob::*start_function_type )(  ) ;
            typedef ::osiris::IJob::JobStatus ( IJob_wrapper::*default_start_function_type )(  ) ;
            
            IJob_exposer.def( 
                "start"
                , start_function_type(&::osiris::IJob::start)
                , default_start_function_type(&IJob_wrapper::default_start) );
        
        }
        { //::osiris::IJob::stop
        
            typedef void ( ::osiris::IJob::*stop_function_type )(  ) ;
            typedef void ( IJob_wrapper::*default_stop_function_type )(  ) ;
            
            IJob_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::IJob::stop)
                , default_stop_function_type(&IJob_wrapper::default_stop) );
        
        }
        { //::osiris::IJob::run
        
            typedef ::osiris::IJob::JobStatus ( IJob_wrapper::*run_function_type )(  ) ;
            
            IJob_exposer.def( 
                "run"
                , run_function_type( &IJob_wrapper::run ) );
        
        }
        { //::osiris::IJob::applyDelay
        
            typedef void ( *applyDelay_function_type )( ::osiris::IJob &,::osiris::uint32 );
            
            IJob_exposer.def( 
                "applyDelay"
                , applyDelay_function_type( &IJob_wrapper::applyDelay )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("delay") ) );
        
        }
        { //::osiris::IJob::setPriority
        
            typedef void ( *setPriority_function_type )( ::osiris::IJob &,::osiris::TaskPriority );
            
            IJob_exposer.def( 
                "setPriority"
                , setPriority_function_type( &IJob_wrapper::setPriority )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("priority") ) );
        
        }
        IJob_exposer.staticmethod( "clock" );
        { //property "priority"[fget=::osiris::IJob::getPriority, fset=::osiris::IJob::setPriority]
        
            typedef ::osiris::TaskPriority ( ::osiris::IJob::*fget )(  ) const;
            typedef void ( ::osiris::IJob::*fset )( ::osiris::TaskPriority ) ;
            
            IJob_exposer.add_property( 
                "priority"
                , fget( &::osiris::IJob::getPriority )
                , fset( &::osiris::IJob::setPriority )
                , "get\\set property, built on top of \"osiris::TaskPriority osiris::IJob::getPriority() const [member function]\" and \"void osiris::IJob::setPriority(osiris::TaskPriority priority) [member function]\"" );
        
        }
        { //property "id"[fget=::osiris::IJob::getID]
        
            typedef ::osiris::uint32 ( ::osiris::IJob::*fget )(  ) const;
            
            IJob_exposer.add_property( 
                "id"
                , fget( &::osiris::IJob::getID )
                , "get property, built on top of \"osiris::uint32 osiris::IJob::getID() const [member function]\"" );
        
        }
        { //property "delay"[fget=::osiris::IJob::getDelay]
        
            typedef ::boost::posix_time::ptime ( ::osiris::IJob::*fget )(  ) const;
            
            IJob_exposer.add_property( 
                "delay"
                , fget( &::osiris::IJob::getDelay )
                , "get property, built on top of \"boost::posix_time::ptime osiris::IJob::getDelay() const [member function]\"" );
        
        }
        { //property "status"[fget=::osiris::IJob::getStatus]
        
            typedef ::osiris::IJob::JobStatus ( ::osiris::IJob::*fget )(  ) const;
            
            IJob_exposer.add_property( 
                "status"
                , fget( &::osiris::IJob::getStatus )
                , "get property, built on top of \"osiris::IJob::JobStatus osiris::IJob::getStatus() const [member function]\"" );
        
        }
    }

}
