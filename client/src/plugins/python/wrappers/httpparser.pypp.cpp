// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpparser.h"
#include "version.h"
#include "httpparser.pypp.hpp"

namespace bp = boost::python;

static boost::python::object parseAuthorization_4f0e2fde36cbf40d8480739387efbe9b( ::std::string const & value, ::std::string & username, ::std::string & password ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseAuthorization(value, username, password);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parseContentType_1dc9aa678dfc32acabd4ece55dca0e5a( ::std::string const & value, ::std::string & contentType, ::std::string & boundary, ::std::string & boundaryTerminator ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseContentType(value, contentType, boundary, boundaryTerminator);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parseDate_6fcd0dbc53adcbccbbd0f3224e2531e3( ::std::string const & value, ::boost::posix_time::ptime & time ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseDate(value, time);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parseParam_6f0180e94fd12df0df8889018220d725( ::std::string const & line, ::std::string & param, ::std::string & value ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseParam(line, param, value);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parseParamValue_6ab0e0b346fda6d79135bb7c8e6a6d9a( ::std::string const & str, ::std::string & value, ::osiris::StringCollection< std::string, osiris::StringCollectionTraits< std::string > > & attributes ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseParamValue(str, value, attributes);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static void loadUrlParams_ca9328fc22a4a0c34e8beb83faa04742( ::std::string const & source, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::HttpParser::loadUrlParams(source, params);
    __pythreadSaver.restore();
}

static void saveUrlParams_7ec4d6d5e01682afd47c681722df08f5( ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & source, ::std::string & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::HttpParser::saveUrlParams(source, params);
    __pythreadSaver.restore();
}

static boost::python::object generateLink_4dfc2d84fad1a3ae33704a4fcd1628b6( ::std::string const & url, ::std::wstring const & paramName, ::std::wstring const & paramValue ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::generateLink(url, paramName, paramValue);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object createAnchor_0d72b920c2afb3ab90fbf642a5c45a5f( ::std::string const & url, ::std::string const & anchor ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::createAnchor(url, anchor);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object parseHttpVersion_3177e0d1c211f92c478e1bc5d531a1af( ::std::string const & str, ::osiris::Version & version ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::parseHttpVersion(str, version);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object decodePlainPostParams_bf32a18bde4db2f5790e49ea8dbc0f80( ::std::string const & content, ::osiris::Collections< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, osiris::HttpPostParam >::basic_collection< osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared > & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::decodePlainPostParams(content, params);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object decodeUrlEncodedPostParams_a543221da99684f10b892b884389034f( ::std::string const & content, ::osiris::Collections< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, osiris::HttpPostParam >::basic_collection< osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared > & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::decodeUrlEncodedPostParams(content, params);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object decodeMultiPartDataPostParams_09cc365c22c1e601e7ac50a2f55f8067( ::std::string const & content, ::std::string const & boundary, ::osiris::Collections< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, osiris::HttpPostParam >::basic_collection< osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared > & params ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::decodeMultiPartDataPostParams(content, boundary, params);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object contentFromString_847d8ac31061bd2dbe2a47d32f56c828( ::std::string const & str ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::HttpContentType result = ::osiris::HttpParser::contentFromString(str);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object contentFromType_4e99a366d776ef4ccb1716aa7172d872( ::osiris::HttpContentType type ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::contentFromType(type);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object generateLink_c457a34f267de86b5ed283875beff2e5( ::std::string const & url, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::generateLink(url, params);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isSafeURL_a47b2daf7cdcb8ea8a90c26ea95f4dee( ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = ::osiris::HttpParser::isSafeURL(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toString_001a03600fbc7530c0d12c1214a4f086( ::boost::posix_time::ptime const & time ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::toString(time);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlDecodeA_868f4cdce58ab0797d5cd30bddc555e4( ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::urlDecodeA(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlDecodeUtf8_575f86731535c6e4a73e781d4adf8eb8( ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::urlDecodeUtf8(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlDecodeW_14b9bbfe67f2f85d3df38264e7d68357( ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::wstring result = ::osiris::HttpParser::urlDecodeW(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlEncodeA_6b7541d210a79ba2951a035b5ff46011( ::std::string const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::urlEncodeA(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlEncodeUtf8_bb425faacb46ced4557ec55d271a243f( ::std::string const & url, bool escapeOnly=false ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::urlEncodeUtf8(url, escapeOnly);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object urlEncodeW_654f02e9e153df7ffdba7171c3fa77aa( ::std::wstring const & url ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string result = ::osiris::HttpParser::urlEncodeW(url);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

void register_HttpParser_class(){

    ::boost::python::class_< ::osiris::HttpParser >( "HttpParser" )    
        .def( 
            "parseAuthorization"
            , (boost::python::object (*)( ::std::string const &,::std::string &,::std::string & ))( &parseAuthorization_4f0e2fde36cbf40d8480739387efbe9b )
            , ( ::boost::python::arg("value"), ::boost::python::arg("username"), ::boost::python::arg("password") ) )    
        .def( 
            "parseContentType"
            , (boost::python::object (*)( ::std::string const &,::std::string &,::std::string &,::std::string & ))( &parseContentType_1dc9aa678dfc32acabd4ece55dca0e5a )
            , ( ::boost::python::arg("value"), ::boost::python::arg("contentType"), ::boost::python::arg("boundary"), ::boost::python::arg("boundaryTerminator") ) )    
        .def( 
            "parseDate"
            , (boost::python::object (*)( ::std::string const &,::boost::posix_time::ptime & ))( &parseDate_6fcd0dbc53adcbccbbd0f3224e2531e3 )
            , ( ::boost::python::arg("value"), ::boost::python::arg("time") ) )    
        .def( 
            "parseParam"
            , (boost::python::object (*)( ::std::string const &,::std::string &,::std::string & ))( &parseParam_6f0180e94fd12df0df8889018220d725 )
            , ( ::boost::python::arg("line"), ::boost::python::arg("param"), ::boost::python::arg("value") ) )    
        .def( 
            "parseParamValue"
            , (boost::python::object (*)( ::std::string const &,::std::string &,::osiris::StringCollection<std::string, osiris::StringCollectionTraits<std::string> > & ))( &parseParamValue_6ab0e0b346fda6d79135bb7c8e6a6d9a )
            , ( ::boost::python::arg("str"), ::boost::python::arg("value"), ::boost::python::arg("attributes") ) )    
        .def( 
            "loadUrlParams"
            , (void (*)( ::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > & ))( &loadUrlParams_ca9328fc22a4a0c34e8beb83faa04742 )
            , ( ::boost::python::arg("source"), ::boost::python::arg("params") ) )    
        .def( 
            "saveUrlParams"
            , (void (*)( ::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const &,::std::string & ))( &saveUrlParams_7ec4d6d5e01682afd47c681722df08f5 )
            , ( ::boost::python::arg("source"), ::boost::python::arg("params") ) )    
        .def( 
            "generateLink"
            , (boost::python::object (*)( ::std::string const &,::std::wstring const &,::std::wstring const & ))( &generateLink_4dfc2d84fad1a3ae33704a4fcd1628b6 )
            , ( ::boost::python::arg("url"), ::boost::python::arg("paramName"), ::boost::python::arg("paramValue") ) )    
        .def( 
            "createAnchor"
            , (boost::python::object (*)( ::std::string const &,::std::string const & ))( &createAnchor_0d72b920c2afb3ab90fbf642a5c45a5f )
            , ( ::boost::python::arg("url"), ::boost::python::arg("anchor") ) )    
        .def( 
            "parseHttpVersion"
            , (boost::python::object (*)( ::std::string const &,::osiris::Version & ))( &parseHttpVersion_3177e0d1c211f92c478e1bc5d531a1af )
            , ( ::boost::python::arg("str"), ::boost::python::arg("version") ) )    
        .def( 
            "decodePlainPostParams"
            , (boost::python::object (*)( ::std::string const &,::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> & ))( &decodePlainPostParams_bf32a18bde4db2f5790e49ea8dbc0f80 )
            , ( ::boost::python::arg("content"), ::boost::python::arg("params") ) )    
        .def( 
            "decodeUrlEncodedPostParams"
            , (boost::python::object (*)( ::std::string const &,::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> & ))( &decodeUrlEncodedPostParams_a543221da99684f10b892b884389034f )
            , ( ::boost::python::arg("content"), ::boost::python::arg("params") ) )    
        .def( 
            "decodeMultiPartDataPostParams"
            , (boost::python::object (*)( ::std::string const &,::std::string const &,::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> & ))( &decodeMultiPartDataPostParams_09cc365c22c1e601e7ac50a2f55f8067 )
            , ( ::boost::python::arg("content"), ::boost::python::arg("boundary"), ::boost::python::arg("params") ) )    
        .def( 
            "contentFromString"
            , (boost::python::object (*)( ::std::string const & ))( &contentFromString_847d8ac31061bd2dbe2a47d32f56c828 )
            , ( ::boost::python::arg("str") ) )    
        .def( 
            "contentFromType"
            , (boost::python::object (*)( ::osiris::HttpContentType ))( &contentFromType_4e99a366d776ef4ccb1716aa7172d872 )
            , ( ::boost::python::arg("type") ) )    
        .def( 
            "generateLink"
            , (boost::python::object (*)( ::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & ))( &generateLink_c457a34f267de86b5ed283875beff2e5 )
            , ( ::boost::python::arg("url"), ::boost::python::arg("params")=(osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > >()) ) )    
        .def( 
            "isSafeURL"
            , (boost::python::object (*)( ::std::string const & ))( &isSafeURL_a47b2daf7cdcb8ea8a90c26ea95f4dee )
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "toString"
            , (boost::python::object (*)( ::boost::posix_time::ptime const & ))( &toString_001a03600fbc7530c0d12c1214a4f086 )
            , ( ::boost::python::arg("time") ) )    
        .def( 
            "urlDecodeA"
            , (boost::python::object (*)( ::std::string const & ))( &urlDecodeA_868f4cdce58ab0797d5cd30bddc555e4 )
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "urlDecodeUtf8"
            , (boost::python::object (*)( ::std::string const & ))( &urlDecodeUtf8_575f86731535c6e4a73e781d4adf8eb8 )
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "urlDecodeW"
            , (boost::python::object (*)( ::std::string const & ))( &urlDecodeW_14b9bbfe67f2f85d3df38264e7d68357 )
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "urlEncodeA"
            , (boost::python::object (*)( ::std::string const & ))( &urlEncodeA_6b7541d210a79ba2951a035b5ff46011 )
            , ( ::boost::python::arg("url") ) )    
        .def( 
            "urlEncodeUtf8"
            , (boost::python::object (*)( ::std::string const &,bool ))( &urlEncodeUtf8_bb425faacb46ced4557ec55d271a243f )
            , ( ::boost::python::arg("url"), ::boost::python::arg("escapeOnly")=(bool)(false) ) )    
        .def( 
            "urlEncodeW"
            , (boost::python::object (*)( ::std::wstring const & ))( &urlEncodeW_654f02e9e153df7ffdba7171c3fa77aa )
            , ( ::boost::python::arg("url") ) )    
        .staticmethod( "parseAuthorization" )    
        .staticmethod( "parseContentType" )    
        .staticmethod( "parseDate" )    
        .staticmethod( "parseParam" )    
        .staticmethod( "parseParamValue" )    
        .staticmethod( "loadUrlParams" )    
        .staticmethod( "saveUrlParams" )    
        .staticmethod( "generateLink" )    
        .staticmethod( "createAnchor" )    
        .staticmethod( "parseHttpVersion" )    
        .staticmethod( "decodePlainPostParams" )    
        .staticmethod( "decodeUrlEncodedPostParams" )    
        .staticmethod( "decodeMultiPartDataPostParams" )    
        .staticmethod( "contentFromString" )    
        .staticmethod( "contentFromType" )    
        .staticmethod( "isSafeURL" )    
        .staticmethod( "toString" )    
        .staticmethod( "urlDecodeA" )    
        .staticmethod( "urlDecodeUtf8" )    
        .staticmethod( "urlDecodeW" )    
        .staticmethod( "urlEncodeA" )    
        .staticmethod( "urlEncodeUtf8" )    
        .staticmethod( "urlEncodeW" );

}
