// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmlparser.h"
#include "htmlparser.pypp.hpp"

namespace bp = boost::python;

struct HtmlParser_wrapper : ::osiris::HtmlParser, ::osiris::PythonWrapper< ::osiris::HtmlParser > {

    HtmlParser_wrapper( )
    : ::osiris::HtmlParser( )
      , ::osiris::PythonWrapper< ::osiris::HtmlParser >(){
        // nullptr constructor
    
    }

    static boost::python::object decode( ::osiris::HtmlParser & inst, ::osiris::String const & html ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.decode(html);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object encode( ::osiris::HtmlParser & inst, ::osiris::String const & text ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.encode(text);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object encodeEx( ::osiris::HtmlParser & inst, ::osiris::String const & text ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.encodeEx(text);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_HtmlParser_class(){

    ::boost::python::class_< HtmlParser_wrapper, ::boost::python::bases< ::osiris::StaticSingleton< osiris::HtmlParser, true > >, ::boost::noncopyable >( "HtmlParser", ::boost::python::no_init )    
        .def( ::boost::python::init< >() )    
        .def( 
            "decode"
            , (boost::python::object (*)( ::osiris::HtmlParser &,::osiris::String const & ))( &HtmlParser_wrapper::decode )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) )    
        .def( 
            "encode"
            , (boost::python::object (*)( ::osiris::HtmlParser &,::osiris::String const & ))( &HtmlParser_wrapper::encode )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("text") ) )    
        .def( 
            "encodeEx"
            , (boost::python::object (*)( ::osiris::HtmlParser &,::osiris::String const & ))( &HtmlParser_wrapper::encodeEx )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("text") ) );

}
