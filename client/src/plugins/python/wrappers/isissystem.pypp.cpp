// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "isissystem.h"
#include "isissystem.pypp.hpp"

namespace bp = boost::python;

struct IsisSystem_wrapper : ::osiris::IsisSystem, ::osiris::PythonWrapper< ::osiris::IsisSystem > {

    struct IsisSystemThread_wrapper : ::osiris::IsisSystem::IsisSystemThread, ::osiris::PythonWrapper< ::osiris::IsisSystem::IsisSystemThread > {
    
        IsisSystemThread_wrapper( )
        : ::osiris::IsisSystem::IsisSystemThread( )
          , ::osiris::PythonWrapper< ::osiris::IsisSystem::IsisSystemThread >(){
            // nullptr constructor
        
        }
    
        virtual bool executeTask(  ) {
            ::osiris::PythonState __pystate(getPythonThreadState());
            if( ::osiris::PythonOverride func_executeTask = this->get_override( "executeTask" ) )
                return func_executeTask(  );
            else{
                __pystate.leave();
                return this->::osiris::IsisSystem::IsisSystemThread::executeTask(  );
            }
        }
        
        bool default_executeTask(  ) {
            ::osiris::PythonThreadSaver __pythreadSaver;
            return ::osiris::IsisSystem::IsisSystemThread::executeTask( );
        }
    
    };

    IsisSystem_wrapper( )
    : ::osiris::IsisSystem( )
      , ::osiris::PythonWrapper< ::osiris::IsisSystem >(){
        // nullptr constructor
    
    }

    static boost::python::object getStatus( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        int result = inst.getStatus();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOnline( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getOnline();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLastError( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getLastError();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLastRequest( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime result = inst.getLastRequest();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLatestOsirisVersion( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getLatestOsirisVersion();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLatestOsirisNotes( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getLatestOsirisNotes();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIp( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getIp();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCountryCode( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getCountryCode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCountryName( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getCountryName();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getReachable( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getReachable();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTor( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::int32 result = inst.getTor();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLastValidationDate( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime result = inst.getLastValidationDate();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLastCheckDate( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime result = inst.getLastCheckDate();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getInternetDateTimeSyncMethod( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getInternetDateTimeSyncMethod();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object isInternetDateTimeAvailable( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isInternetDateTimeAvailable();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getInternetDateTime( ::osiris::IsisSystem & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DateTime result = inst.getInternetDateTime();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String getName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getName = this->get_override( "getName" ) )
            return func_getName(  );
        else{
            __pystate.leave();
            return this->::osiris::IsisSystem::getName(  );
        }
    }
    
    ::osiris::String default_getName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IsisSystem::getName( );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::IsisSystem::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IsisSystem::stop( );
    }

    static boost::python::object doTask( ::osiris::IsisSystem & inst, bool force ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.doTask(force);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUrl( ::osiris::IsisSystem const & inst, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > & params ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getUrl(params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object resolveItemLink( ::osiris::IsisSystem & inst, ::std::string const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.resolveItemLink(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool start( bool recovery ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_start = this->get_override( "start" ) )
            return func_start( recovery );
        else{
            __pystate.leave();
            return this->::osiris::IsisSystem::start( recovery );
        }
    }
    
    bool default_start( bool recovery ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IsisSystem::start( recovery );
    }

};

void register_IsisSystem_class(){

    { //::osiris::IsisSystem
        typedef ::boost::python::class_< IsisSystem_wrapper, ::boost::python::bases< ::osiris::DynamicSingleton< osiris::IsisSystem > >, ::boost::noncopyable > IsisSystem_exposer_t;
        IsisSystem_exposer_t IsisSystem_exposer = IsisSystem_exposer_t( "IsisSystem", ::boost::python::no_init );
        ::boost::python::scope IsisSystem_scope( IsisSystem_exposer );
        ::boost::python::class_< IsisSystem_wrapper::IsisSystemThread_wrapper, ::boost::noncopyable >( "IsisSystemThread", ::boost::python::init< >() )    
            .def( 
                "executeTask"
                , (bool ( ::osiris::IsisSystem::IsisSystemThread::* )(  ) )(&::osiris::IsisSystem::IsisSystemThread::executeTask)
                , (bool ( IsisSystem_wrapper::IsisSystemThread_wrapper::* )(  ) )(&IsisSystem_wrapper::IsisSystemThread_wrapper::default_executeTask) );
        IsisSystem_exposer.def( ::boost::python::init< >() );
        { //::osiris::IsisSystem::getStatus
        
            typedef boost::python::object ( *getStatus_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getStatus"
                , getStatus_function_type( &IsisSystem_wrapper::getStatus ) );
        
        }
        { //::osiris::IsisSystem::getOnline
        
            typedef boost::python::object ( *getOnline_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getOnline"
                , getOnline_function_type( &IsisSystem_wrapper::getOnline ) );
        
        }
        { //::osiris::IsisSystem::getLastError
        
            typedef boost::python::object ( *getLastError_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLastError"
                , getLastError_function_type( &IsisSystem_wrapper::getLastError ) );
        
        }
        { //::osiris::IsisSystem::getLastRequest
        
            typedef boost::python::object ( *getLastRequest_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLastRequest"
                , getLastRequest_function_type( &IsisSystem_wrapper::getLastRequest ) );
        
        }
        { //::osiris::IsisSystem::getLatestOsirisVersion
        
            typedef boost::python::object ( *getLatestOsirisVersion_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLatestOsirisVersion"
                , getLatestOsirisVersion_function_type( &IsisSystem_wrapper::getLatestOsirisVersion ) );
        
        }
        { //::osiris::IsisSystem::getLatestOsirisNotes
        
            typedef boost::python::object ( *getLatestOsirisNotes_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLatestOsirisNotes"
                , getLatestOsirisNotes_function_type( &IsisSystem_wrapper::getLatestOsirisNotes ) );
        
        }
        { //::osiris::IsisSystem::getIp
        
            typedef boost::python::object ( *getIp_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getIp"
                , getIp_function_type( &IsisSystem_wrapper::getIp ) );
        
        }
        { //::osiris::IsisSystem::getCountryCode
        
            typedef boost::python::object ( *getCountryCode_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getCountryCode"
                , getCountryCode_function_type( &IsisSystem_wrapper::getCountryCode ) );
        
        }
        { //::osiris::IsisSystem::getCountryName
        
            typedef boost::python::object ( *getCountryName_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getCountryName"
                , getCountryName_function_type( &IsisSystem_wrapper::getCountryName ) );
        
        }
        { //::osiris::IsisSystem::getReachable
        
            typedef boost::python::object ( *getReachable_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getReachable"
                , getReachable_function_type( &IsisSystem_wrapper::getReachable ) );
        
        }
        { //::osiris::IsisSystem::getTor
        
            typedef boost::python::object ( *getTor_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getTor"
                , getTor_function_type( &IsisSystem_wrapper::getTor ) );
        
        }
        { //::osiris::IsisSystem::getLastValidationDate
        
            typedef boost::python::object ( *getLastValidationDate_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLastValidationDate"
                , getLastValidationDate_function_type( &IsisSystem_wrapper::getLastValidationDate ) );
        
        }
        { //::osiris::IsisSystem::getLastCheckDate
        
            typedef boost::python::object ( *getLastCheckDate_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getLastCheckDate"
                , getLastCheckDate_function_type( &IsisSystem_wrapper::getLastCheckDate ) );
        
        }
        { //::osiris::IsisSystem::getInternetDateTimeSyncMethod
        
            typedef boost::python::object ( *getInternetDateTimeSyncMethod_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getInternetDateTimeSyncMethod"
                , getInternetDateTimeSyncMethod_function_type( &IsisSystem_wrapper::getInternetDateTimeSyncMethod ) );
        
        }
        { //::osiris::IsisSystem::isInternetDateTimeAvailable
        
            typedef boost::python::object ( *isInternetDateTimeAvailable_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "isInternetDateTimeAvailable"
                , isInternetDateTimeAvailable_function_type( &IsisSystem_wrapper::isInternetDateTimeAvailable ) );
        
        }
        { //::osiris::IsisSystem::getInternetDateTime
        
            typedef boost::python::object ( *getInternetDateTime_function_type )( ::osiris::IsisSystem & );
            
            IsisSystem_exposer.def( 
                "getInternetDateTime"
                , getInternetDateTime_function_type( &IsisSystem_wrapper::getInternetDateTime ) );
        
        }
        { //::osiris::IsisSystem::getName
        
            typedef ::osiris::String ( ::osiris::IsisSystem::*getName_function_type )(  ) const;
            typedef ::osiris::String ( IsisSystem_wrapper::*default_getName_function_type )(  ) const;
            
            IsisSystem_exposer.def( 
                "getName"
                , getName_function_type(&::osiris::IsisSystem::getName)
                , default_getName_function_type(&IsisSystem_wrapper::default_getName) );
        
        }
        { //::osiris::IsisSystem::stop
        
            typedef void ( ::osiris::IsisSystem::*stop_function_type )(  ) ;
            typedef void ( IsisSystem_wrapper::*default_stop_function_type )(  ) ;
            
            IsisSystem_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::IsisSystem::stop)
                , default_stop_function_type(&IsisSystem_wrapper::default_stop) );
        
        }
        { //::osiris::IsisSystem::doTask
        
            typedef boost::python::object ( *doTask_function_type )( ::osiris::IsisSystem &,bool );
            
            IsisSystem_exposer.def( 
                "doTask"
                , doTask_function_type( &IsisSystem_wrapper::doTask )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("force") ) );
        
        }
        { //::osiris::IsisSystem::getUrl
        
            typedef boost::python::object ( *getUrl_function_type )( ::osiris::IsisSystem const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > & );
            
            IsisSystem_exposer.def( 
                "getUrl"
                , getUrl_function_type( &IsisSystem_wrapper::getUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("params") ) );
        
        }
        { //::osiris::IsisSystem::resolveItemLink
        
            typedef boost::python::object ( *resolveItemLink_function_type )( ::osiris::IsisSystem &,::std::string const & );
            
            IsisSystem_exposer.def( 
                "resolveItemLink"
                , resolveItemLink_function_type( &IsisSystem_wrapper::resolveItemLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::IsisSystem::start
        
            typedef bool ( ::osiris::IsisSystem::*start_function_type )( bool ) ;
            typedef bool ( IsisSystem_wrapper::*default_start_function_type )( bool ) ;
            
            IsisSystem_exposer.def( 
                "start"
                , start_function_type(&::osiris::IsisSystem::start)
                , default_start_function_type(&IsisSystem_wrapper::default_start)
                , ( ::boost::python::arg("recovery") ) );
        
        }
        { //property "name"[fget=::osiris::IsisSystem::getName]
        
            typedef ::osiris::String ( ::osiris::IsisSystem::*fget )(  ) const;
            
            IsisSystem_exposer.add_property( 
                "name"
                , fget( &::osiris::IsisSystem::getName )
                , "get property, built on top of \"osiris::String osiris::IsisSystem::getName() const [member function]\"" );
        
        }
    }

}
