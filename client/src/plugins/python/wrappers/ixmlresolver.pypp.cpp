// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "ixmlresolver.h"
#include "idexslresolver.h"
#include "ixmlresolver.pypp.hpp"

namespace bp = boost::python;

struct IXMLResolver_wrapper : ::osiris::IXMLResolver, ::osiris::PythonWrapper< ::osiris::IXMLResolver > {

    IXMLResolver_wrapper( )
    : ::osiris::IXMLResolver( )
      , ::osiris::PythonWrapper< ::osiris::IXMLResolver >(){
        // null constructor
    
    }

    virtual bool resolve( ::osiris::String const & uri, ::osiris::String & resolved ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_resolve = this->get_override( "resolve" );
        return func_resolve( boost::ref(uri), boost::ref(resolved) );
    }

};

void register_IXMLResolver_class(){

    { //::osiris::IXMLResolver
        typedef ::boost::python::class_< IXMLResolver_wrapper, ::boost::noncopyable > IXMLResolver_exposer_t;
        IXMLResolver_exposer_t IXMLResolver_exposer = IXMLResolver_exposer_t( "IXMLResolver", ::boost::python::init< >() );
        ::boost::python::scope IXMLResolver_scope( IXMLResolver_exposer );
        { //::osiris::IXMLResolver::resolve
        
            typedef bool ( ::osiris::IXMLResolver::*resolve_function_type )( ::osiris::String const &,::osiris::String & ) ;
            
            IXMLResolver_exposer.def( 
                "resolve"
                , ( resolve_function_type(&::osiris::IXMLResolver::resolve) )
                , ( ::boost::python::arg("uri"), ::boost::python::arg("resolved") ) );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IXMLResolver > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IXMLResolver >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IdeXSLResolver >, boost::shared_ptr< ::osiris::IXMLResolver > >();
    }

}
