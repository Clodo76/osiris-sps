// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "languagefolderlistener.h"
#include "languagefolderlistener.pypp.hpp"

namespace bp = boost::python;

struct LanguageFolderListener_wrapper : ::osiris::LanguageFolderListener, ::osiris::PythonWrapper< ::osiris::LanguageFolderListener > {

    LanguageFolderListener_wrapper( )
    : ::osiris::LanguageFolderListener( )
      , ::osiris::PythonWrapper< ::osiris::LanguageFolderListener >(){
        // null constructor
    
    }

    virtual void handleKey( ::osiris::String const & culture, ::osiris::String const & name, ::osiris::String const & value ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_handleKey = this->get_override( "handleKey" );
        func_handleKey( boost::ref(culture), boost::ref(name), boost::ref(value) );
    }

    virtual void handleUnknownKey( ::osiris::String const & culture, ::osiris::String const & name ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_handleUnknownKey = this->get_override( "handleUnknownKey" );
        func_handleUnknownKey( boost::ref(culture), boost::ref(name) );
    }

};

void register_LanguageFolderListener_class(){

    { //::osiris::LanguageFolderListener
        typedef ::boost::python::class_< LanguageFolderListener_wrapper, ::boost::noncopyable > LanguageFolderListener_exposer_t;
        LanguageFolderListener_exposer_t LanguageFolderListener_exposer = LanguageFolderListener_exposer_t( "LanguageFolderListener", ::boost::python::init< >() );
        ::boost::python::scope LanguageFolderListener_scope( LanguageFolderListener_exposer );
        { //::osiris::LanguageFolderListener::handleKey
        
            typedef void ( ::osiris::LanguageFolderListener::*handleKey_function_type )( ::osiris::String const &,::osiris::String const &,::osiris::String const & ) ;
            
            LanguageFolderListener_exposer.def( 
                "handleKey"
                , ( handleKey_function_type(&::osiris::LanguageFolderListener::handleKey) )
                , ( ::boost::python::arg("culture"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::LanguageFolderListener::handleUnknownKey
        
            typedef void ( ::osiris::LanguageFolderListener::*handleUnknownKey_function_type )( ::osiris::String const &,::osiris::String const & ) ;
            
            LanguageFolderListener_exposer.def( 
                "handleUnknownKey"
                , ( handleUnknownKey_function_type(&::osiris::LanguageFolderListener::handleUnknownKey) )
                , ( ::boost::python::arg("culture"), ::boost::python::arg("name") ) );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::LanguageFolderListener > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::LanguageFolderListener >, boost::shared_ptr< ::osiris::Object > >();
    }

}
