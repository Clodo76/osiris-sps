// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ihttpclient.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpurl.h"
#include "httpclient.h"
#include "ihttpclient.pypp.hpp"

namespace bp = boost::python;

struct IHttpClient_wrapper : ::osiris::IHttpClient, ::osiris::PythonWrapper< ::osiris::IHttpClient > {

    IHttpClient_wrapper(::std::string const & url=osiris::constants::empty_string )
    : ::osiris::IHttpClient( url )
      , ::osiris::PythonWrapper< ::osiris::IHttpClient >(){
        // constructor
    
    }

    static boost::python::object getRequest( ::osiris::IHttpClient const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpRequest> result = inst.getRequest();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getResponse( ::osiris::IHttpClient const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpResponse> result = inst.getResponse();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getFollowRedirects( ::osiris::IHttpClient const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getFollowRedirects();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMaxRedirects( ::osiris::IHttpClient const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getMaxRedirects();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::boost::asio::ssl::context & getSSLContext(  ){
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    void initRedirect( ::osiris::HttpUrl const & redirectUrl, ::boost::shared_ptr< osiris::HttpRequest > request, ::boost::shared_ptr< osiris::HttpResponse > response ){
        ::osiris::IHttpClient::initRedirect( boost::ref(redirectUrl), request, response );
    }

    static boost::python::object loadVerifyFile( ::osiris::IHttpClient & inst, ::std::string const & filename, int verifyMode=7 ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.loadVerifyFile(filename, verifyMode);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setFollowRedirects( ::osiris::IHttpClient & inst, bool followRedirects ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setFollowRedirects(followRedirects);
        __pythreadSaver.restore();
    }

    static void setMaxRedirects( ::osiris::IHttpClient & inst, ::osiris::uint32 maxRedirects ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setMaxRedirects(maxRedirects);
        __pythreadSaver.restore();
    }

};

void register_IHttpClient_class(){

    { //::osiris::IHttpClient
        typedef ::boost::python::class_< IHttpClient_wrapper, ::boost::noncopyable > IHttpClient_exposer_t;
        IHttpClient_exposer_t IHttpClient_exposer = IHttpClient_exposer_t( "IHttpClient", ::boost::python::init< ::boost::python::optional< ::std::string const & > >(( ::boost::python::arg("url")=osiris::constants::empty_string )) );
        ::boost::python::scope IHttpClient_scope( IHttpClient_exposer );
        { //::osiris::IHttpClient::getRequest
        
            typedef boost::python::object ( *getRequest_function_type )( ::osiris::IHttpClient const & );
            
            IHttpClient_exposer.def( 
                "getRequest"
                , getRequest_function_type( &IHttpClient_wrapper::getRequest ) );
        
        }
        { //::osiris::IHttpClient::getResponse
        
            typedef boost::python::object ( *getResponse_function_type )( ::osiris::IHttpClient const & );
            
            IHttpClient_exposer.def( 
                "getResponse"
                , getResponse_function_type( &IHttpClient_wrapper::getResponse ) );
        
        }
        { //::osiris::IHttpClient::getFollowRedirects
        
            typedef boost::python::object ( *getFollowRedirects_function_type )( ::osiris::IHttpClient const & );
            
            IHttpClient_exposer.def( 
                "getFollowRedirects"
                , getFollowRedirects_function_type( &IHttpClient_wrapper::getFollowRedirects ) );
        
        }
        { //::osiris::IHttpClient::getMaxRedirects
        
            typedef boost::python::object ( *getMaxRedirects_function_type )( ::osiris::IHttpClient const & );
            
            IHttpClient_exposer.def( 
                "getMaxRedirects"
                , getMaxRedirects_function_type( &IHttpClient_wrapper::getMaxRedirects ) );
        
        }
        { //::osiris::IHttpClient::getSSLContext
        
            typedef ::boost::asio::ssl::context & ( ::osiris::IHttpClient::*getSSLContext_function_type )(  ) ;
            
            IHttpClient_exposer.def( 
                "getSSLContext"
                , ( getSSLContext_function_type(&::osiris::IHttpClient::getSSLContext) )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osiris::IHttpClient::initRedirect
        
            typedef void ( IHttpClient_wrapper::*initRedirect_function_type )( ::osiris::HttpUrl const &,::boost::shared_ptr< osiris::HttpRequest >,::boost::shared_ptr< osiris::HttpResponse > ) ;
            
            IHttpClient_exposer.def( 
                "initRedirect"
                , initRedirect_function_type( &IHttpClient_wrapper::initRedirect )
                , ( ::boost::python::arg("redirectUrl"), ::boost::python::arg("request"), ::boost::python::arg("response") ) );
        
        }
        { //::osiris::IHttpClient::loadVerifyFile
        
            typedef boost::python::object ( *loadVerifyFile_function_type )( ::osiris::IHttpClient &,::std::string const &,int );
            
            IHttpClient_exposer.def( 
                "loadVerifyFile"
                , loadVerifyFile_function_type( &IHttpClient_wrapper::loadVerifyFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("filename"), ::boost::python::arg("verifyMode")=(int)(7) ) );
        
        }
        { //::osiris::IHttpClient::setFollowRedirects
        
            typedef void ( *setFollowRedirects_function_type )( ::osiris::IHttpClient &,bool );
            
            IHttpClient_exposer.def( 
                "setFollowRedirects"
                , setFollowRedirects_function_type( &IHttpClient_wrapper::setFollowRedirects )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("followRedirects") ) );
        
        }
        { //::osiris::IHttpClient::setMaxRedirects
        
            typedef void ( *setMaxRedirects_function_type )( ::osiris::IHttpClient &,::osiris::uint32 );
            
            IHttpClient_exposer.def( 
                "setMaxRedirects"
                , setMaxRedirects_function_type( &IHttpClient_wrapper::setMaxRedirects )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("maxRedirects") ) );
        
        }
        { //property "followRedirects"[fget=::osiris::IHttpClient::getFollowRedirects, fset=::osiris::IHttpClient::setFollowRedirects]
        
            typedef bool ( ::osiris::IHttpClient::*fget )(  ) const;
            typedef void ( ::osiris::IHttpClient::*fset )( bool ) ;
            
            IHttpClient_exposer.add_property( 
                "followRedirects"
                , fget( &::osiris::IHttpClient::getFollowRedirects )
                , fset( &::osiris::IHttpClient::setFollowRedirects )
                , "get\\set property, built on top of \"bool osiris::IHttpClient::getFollowRedirects() const [member function]\" and \"void osiris::IHttpClient::setFollowRedirects(bool followRedirects) [member function]\"" );
        
        }
        { //property "maxRedirects"[fget=::osiris::IHttpClient::getMaxRedirects, fset=::osiris::IHttpClient::setMaxRedirects]
        
            typedef ::osiris::uint32 ( ::osiris::IHttpClient::*fget )(  ) const;
            typedef void ( ::osiris::IHttpClient::*fset )( ::osiris::uint32 ) ;
            
            IHttpClient_exposer.add_property( 
                "maxRedirects"
                , fget( &::osiris::IHttpClient::getMaxRedirects )
                , fset( &::osiris::IHttpClient::setMaxRedirects )
                , "get\\set property, built on top of \"osiris::uint32 osiris::IHttpClient::getMaxRedirects() const [member function]\" and \"void osiris::IHttpClient::setMaxRedirects(osiris::uint32 maxRedirects) [member function]\"" );
        
        }
        { //property "request"[fget=::osiris::IHttpClient::getRequest]
        
            typedef ::boost::shared_ptr<osiris::HttpRequest> ( ::osiris::IHttpClient::*fget )(  ) const;
            
            IHttpClient_exposer.add_property( 
                "request"
                , fget( &::osiris::IHttpClient::getRequest )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpRequest> osiris::IHttpClient::getRequest() const [member function]\"" );
        
        }
        { //property "response"[fget=::osiris::IHttpClient::getResponse]
        
            typedef ::boost::shared_ptr<osiris::HttpResponse> ( ::osiris::IHttpClient::*fget )(  ) const;
            
            IHttpClient_exposer.add_property( 
                "response"
                , fget( &::osiris::IHttpClient::getResponse )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpResponse> osiris::IHttpClient::getResponse() const [member function]\"" );
        
        }
    }

}
