// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ihttpserver.h"
#include "httppath.h"
#include "httpsessionstate.h"
#include "ihttpdirectory.h"
#include "iconnection.h"
#include "ihttpserver.pypp.hpp"

namespace bp = boost::python;

struct IHttpServer_wrapper : ::osiris::IHttpServer, ::osiris::PythonWrapper< ::osiris::IHttpServer > {

    IHttpServer_wrapper(::std::string const & name, bool allowRemoteConnections=false, ::osiris::uint32 sessionDuration=30, ::boost::optional< unsigned int > workerThreadsCount=boost::none )
    : ::osiris::IHttpServer( name, allowRemoteConnections, sessionDuration, workerThreadsCount )
      , ::osiris::PythonWrapper< ::osiris::IHttpServer >(){
        // constructor
    
    }

    static boost::python::object getName( ::osiris::IHttpServer const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getName();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getRootDirectory( ::osiris::IHttpServer const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IHttpDirectory> result = inst.getRootDirectory();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getAllowRemoteConnections( ::osiris::IHttpServer const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getAllowRemoteConnections();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDefaultDirectory( ::osiris::IHttpServer const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getDefaultDirectory();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSessionsDuration( ::osiris::IHttpServer const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::TimeDuration const & result = inst.getSessionsDuration();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::TimeDuration const & >( result ) );
    }

    static boost::python::object getRequestMutex( ::osiris::IHttpServer & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_mutex & result = inst.getRequestMutex();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::reference_existing_object > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::boost::shared_mutex & >( result ) );
    }

    static boost::python::object addResourceLocation( ::osiris::IHttpServer & inst, ::osiris::String const & directory, ::osiris::String const & path ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpPhysicalDirectory> result = inst.addResourceLocation(directory, path);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object peekHttpBuffer( ::osiris::IHttpServer & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<boost::array<char, 8192ul> > result = inst.peekHttpBuffer();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool processRequest( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processRequest = this->get_override( "processRequest" ) )
            return func_processRequest( session, boost::ref(path) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpServer::processRequest( session, boost::ref(path) );
        }
    }
    
    bool default_processRequest( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpServer::processRequest( session, boost::ref(path) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSessionState > getSessionState( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSessionState = this->get_override( "getSessionState" ) )
            return func_getSessionState( session, boost::ref(path) );
        else{
            __pystate.leave();
            return this->::osiris::IHttpServer::getSessionState( session, boost::ref(path) );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSessionState > default_getSessionState( ::boost::shared_ptr< osiris::HttpSession > session, ::osiris::HttpPath const & path ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpServer::getSessionState( session, boost::ref(path) );
    }

    virtual bool onIdle(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onIdle = this->get_override( "onIdle" ) )
            return func_onIdle(  );
        else{
            __pystate.leave();
            return this->::osiris::IHttpServer::onIdle(  );
        }
    }
    
    virtual bool default_onIdle(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpServer::onIdle( );
    }

    static boost::python::object addDirectory( ::osiris::IHttpServer & inst, ::boost::shared_ptr< osiris::IHttpDirectory > directory ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.addDirectory(directory);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDirectory( ::osiris::IHttpServer const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IHttpDirectory> result = inst.getDirectory(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasDirectory( ::osiris::IHttpServer const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasDirectory(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool onAccept( ::boost::shared_ptr< osiris::IConnection > connection ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onAccept = this->get_override( "onAccept" ) )
            return func_onAccept( connection );
        else{
            __pystate.leave();
            return this->::osiris::IHttpServer::onAccept( connection );
        }
    }
    
    virtual bool default_onAccept( ::boost::shared_ptr< osiris::IConnection > connection ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpServer::onAccept( connection );
    }

    static boost::python::object removeDirectory( ::osiris::IHttpServer & inst, ::boost::shared_ptr< osiris::IHttpDirectory > directory ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.removeDirectory(directory);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setAllowRemoteConnections( ::osiris::IHttpServer & inst, bool allow ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAllowRemoteConnections(allow);
        __pythreadSaver.restore();
    }

    static void setDefaultDirectory( ::osiris::IHttpServer & inst, ::osiris::String const & directory ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setDefaultDirectory(directory);
        __pythreadSaver.restore();
    }

    static void setSessionsDuration( ::osiris::IHttpServer & inst, ::osiris::TimeDuration const & duration ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSessionsDuration(duration);
        __pythreadSaver.restore();
    }

    virtual bool bind( ::osiris::String const & bindIP=(osiris::String::EMPTY), ::osiris::uint32 port=0 ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_bind = this->get_override( "bind" ) )
            return func_bind( boost::ref(bindIP), port );
        else{
            __pystate.leave();
            return this->::osiris::IServer::bind( boost::ref(bindIP), port );
        }
    }
    
    bool default_bind( ::osiris::String const & bindIP=(osiris::String::EMPTY), ::osiris::uint32 port=0 ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IServer::bind( boost::ref(bindIP), port );
    }

    virtual ::boost::shared_ptr< osiris::IConnection > createConnection(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_createConnection = this->get_override( "createConnection" );
        return func_createConnection(  );
    }

    virtual bool onEnter(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEnter = this->get_override( "onEnter" ) )
            return func_onEnter(  );
        else{
            __pystate.leave();
            return this->::osiris::IServer::onEnter(  );
        }
    }
    
    virtual bool default_onEnter(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IServer::onEnter( );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::IServer::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IServer::stop( );
    }

};

void register_IHttpServer_class(){

    { //::osiris::IHttpServer
        typedef ::boost::python::class_< IHttpServer_wrapper, ::boost::python::bases< ::osiris::IServer >, ::boost::noncopyable > IHttpServer_exposer_t;
        IHttpServer_exposer_t IHttpServer_exposer = IHttpServer_exposer_t( "IHttpServer", ::boost::python::init< ::std::string const &, ::boost::python::optional< bool, ::osiris::uint32, ::boost::optional< unsigned int > > >(( ::boost::python::arg("name"), ::boost::python::arg("allowRemoteConnections")=(bool)(false), ::boost::python::arg("sessionDuration")=(::osiris::uint32)(30), ::boost::python::arg("workerThreadsCount")=boost::none )) );
        ::boost::python::scope IHttpServer_scope( IHttpServer_exposer );
        { //::osiris::IHttpServer::getName
        
            typedef boost::python::object ( *getName_function_type )( ::osiris::IHttpServer const & );
            
            IHttpServer_exposer.def( 
                "getName"
                , getName_function_type( &IHttpServer_wrapper::getName ) );
        
        }
        { //::osiris::IHttpServer::getRootDirectory
        
            typedef boost::python::object ( *getRootDirectory_function_type )( ::osiris::IHttpServer const & );
            
            IHttpServer_exposer.def( 
                "getRootDirectory"
                , getRootDirectory_function_type( &IHttpServer_wrapper::getRootDirectory ) );
        
        }
        { //::osiris::IHttpServer::getAllowRemoteConnections
        
            typedef boost::python::object ( *getAllowRemoteConnections_function_type )( ::osiris::IHttpServer const & );
            
            IHttpServer_exposer.def( 
                "getAllowRemoteConnections"
                , getAllowRemoteConnections_function_type( &IHttpServer_wrapper::getAllowRemoteConnections ) );
        
        }
        { //::osiris::IHttpServer::getDefaultDirectory
        
            typedef boost::python::object ( *getDefaultDirectory_function_type )( ::osiris::IHttpServer const & );
            
            IHttpServer_exposer.def( 
                "getDefaultDirectory"
                , getDefaultDirectory_function_type( &IHttpServer_wrapper::getDefaultDirectory ) );
        
        }
        { //::osiris::IHttpServer::getSessionsDuration
        
            typedef boost::python::object ( *getSessionsDuration_function_type )( ::osiris::IHttpServer const & );
            
            IHttpServer_exposer.def( 
                "getSessionsDuration"
                , getSessionsDuration_function_type( &IHttpServer_wrapper::getSessionsDuration ) );
        
        }
        { //::osiris::IHttpServer::getRequestMutex
        
            typedef boost::python::object ( *getRequestMutex_function_type )( ::osiris::IHttpServer & );
            
            IHttpServer_exposer.def( 
                "getRequestMutex"
                , getRequestMutex_function_type( &IHttpServer_wrapper::getRequestMutex ) );
        
        }
        { //::osiris::IHttpServer::addResourceLocation
        
            typedef boost::python::object ( *addResourceLocation_function_type )( ::osiris::IHttpServer &,::osiris::String const &,::osiris::String const & );
            
            IHttpServer_exposer.def( 
                "addResourceLocation"
                , addResourceLocation_function_type( &IHttpServer_wrapper::addResourceLocation )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("directory"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::IHttpServer::peekHttpBuffer
        
            typedef boost::python::object ( *peekHttpBuffer_function_type )( ::osiris::IHttpServer & );
            
            IHttpServer_exposer.def( 
                "peekHttpBuffer"
                , peekHttpBuffer_function_type( &IHttpServer_wrapper::peekHttpBuffer ) );
        
        }
        { //::osiris::IHttpServer::processRequest
        
            typedef bool ( ::osiris::IHttpServer::*processRequest_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            typedef bool ( IHttpServer_wrapper::*default_processRequest_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            
            IHttpServer_exposer.def( 
                "processRequest"
                , processRequest_function_type(&::osiris::IHttpServer::processRequest)
                , default_processRequest_function_type(&IHttpServer_wrapper::default_processRequest)
                , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::IHttpServer::getSessionState
        
            typedef ::boost::shared_ptr< osiris::HttpSessionState > ( ::osiris::IHttpServer::*getSessionState_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            typedef ::boost::shared_ptr< osiris::HttpSessionState > ( IHttpServer_wrapper::*default_getSessionState_function_type )( ::boost::shared_ptr< osiris::HttpSession >,::osiris::HttpPath const & ) ;
            
            IHttpServer_exposer.def( 
                "getSessionState"
                , getSessionState_function_type(&::osiris::IHttpServer::getSessionState)
                , default_getSessionState_function_type(&IHttpServer_wrapper::default_getSessionState)
                , ( ::boost::python::arg("session"), ::boost::python::arg("path") ) );
        
        }
        { //::osiris::IHttpServer::onIdle
        
            typedef bool ( IHttpServer_wrapper::*onIdle_function_type )(  ) ;
            
            IHttpServer_exposer.def( 
                "onIdle"
                , onIdle_function_type( &IHttpServer_wrapper::default_onIdle ) );
        
        }
        { //::osiris::IHttpServer::addDirectory
        
            typedef boost::python::object ( *addDirectory_function_type )( ::osiris::IHttpServer &,::boost::shared_ptr<osiris::IHttpDirectory> );
            
            IHttpServer_exposer.def( 
                "addDirectory"
                , addDirectory_function_type( &IHttpServer_wrapper::addDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("directory") ) );
        
        }
        { //::osiris::IHttpServer::getDirectory
        
            typedef boost::python::object ( *getDirectory_function_type )( ::osiris::IHttpServer const &,::osiris::String const & );
            
            IHttpServer_exposer.def( 
                "getDirectory"
                , getDirectory_function_type( &IHttpServer_wrapper::getDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IHttpServer::hasDirectory
        
            typedef boost::python::object ( *hasDirectory_function_type )( ::osiris::IHttpServer const &,::osiris::String const & );
            
            IHttpServer_exposer.def( 
                "hasDirectory"
                , hasDirectory_function_type( &IHttpServer_wrapper::hasDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IHttpServer::onAccept
        
            typedef bool ( IHttpServer_wrapper::*onAccept_function_type )( ::boost::shared_ptr< osiris::IConnection > ) ;
            
            IHttpServer_exposer.def( 
                "onAccept"
                , onAccept_function_type( &IHttpServer_wrapper::default_onAccept )
                , ( ::boost::python::arg("connection") ) );
        
        }
        { //::osiris::IHttpServer::removeDirectory
        
            typedef boost::python::object ( *removeDirectory_function_type )( ::osiris::IHttpServer &,::boost::shared_ptr<osiris::IHttpDirectory> );
            
            IHttpServer_exposer.def( 
                "removeDirectory"
                , removeDirectory_function_type( &IHttpServer_wrapper::removeDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("directory") ) );
        
        }
        { //::osiris::IHttpServer::setAllowRemoteConnections
        
            typedef void ( *setAllowRemoteConnections_function_type )( ::osiris::IHttpServer &,bool );
            
            IHttpServer_exposer.def( 
                "setAllowRemoteConnections"
                , setAllowRemoteConnections_function_type( &IHttpServer_wrapper::setAllowRemoteConnections )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("allow") ) );
        
        }
        { //::osiris::IHttpServer::setDefaultDirectory
        
            typedef void ( *setDefaultDirectory_function_type )( ::osiris::IHttpServer &,::osiris::String const & );
            
            IHttpServer_exposer.def( 
                "setDefaultDirectory"
                , setDefaultDirectory_function_type( &IHttpServer_wrapper::setDefaultDirectory )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("directory") ) );
        
        }
        { //::osiris::IHttpServer::setSessionsDuration
        
            typedef void ( *setSessionsDuration_function_type )( ::osiris::IHttpServer &,::osiris::TimeDuration const & );
            
            IHttpServer_exposer.def( 
                "setSessionsDuration"
                , setSessionsDuration_function_type( &IHttpServer_wrapper::setSessionsDuration )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("duration") ) );
        
        }
        { //::osiris::IServer::bind
        
            typedef bool ( ::osiris::IServer::*bind_function_type )( ::osiris::String const &,::osiris::uint32 ) ;
            typedef bool ( IHttpServer_wrapper::*default_bind_function_type )( ::osiris::String const &,::osiris::uint32 ) ;
            
            IHttpServer_exposer.def( 
                "bind"
                , bind_function_type(&::osiris::IServer::bind)
                , default_bind_function_type(&IHttpServer_wrapper::default_bind)
                , ( ::boost::python::arg("bindIP")=(osiris::String::EMPTY), ::boost::python::arg("port")=(::osiris::uint32)(0) ) );
        
        }
        { //::osiris::IServer::createConnection
        
            typedef ::boost::shared_ptr< osiris::IConnection > ( IHttpServer_wrapper::*createConnection_function_type )(  ) ;
            
            IHttpServer_exposer.def( 
                "createConnection"
                , createConnection_function_type( &IHttpServer_wrapper::createConnection ) );
        
        }
        { //::osiris::IServer::onEnter
        
            typedef bool ( IHttpServer_wrapper::*onEnter_function_type )(  ) ;
            
            IHttpServer_exposer.def( 
                "onEnter"
                , onEnter_function_type( &IHttpServer_wrapper::default_onEnter ) );
        
        }
        { //::osiris::IServer::stop
        
            typedef void ( ::osiris::IServer::*stop_function_type )(  ) ;
            typedef void ( IHttpServer_wrapper::*default_stop_function_type )(  ) ;
            
            IHttpServer_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::IServer::stop)
                , default_stop_function_type(&IHttpServer_wrapper::default_stop) );
        
        }
        { //property "allowRemoteConnections"[fget=::osiris::IHttpServer::getAllowRemoteConnections, fset=::osiris::IHttpServer::setAllowRemoteConnections]
        
            typedef bool ( ::osiris::IHttpServer::*fget )(  ) const;
            typedef void ( ::osiris::IHttpServer::*fset )( bool ) ;
            
            IHttpServer_exposer.add_property( 
                "allowRemoteConnections"
                , fget( &::osiris::IHttpServer::getAllowRemoteConnections )
                , fset( &::osiris::IHttpServer::setAllowRemoteConnections )
                , "get\\set property, built on top of \"bool osiris::IHttpServer::getAllowRemoteConnections() const [member function]\" and \"void osiris::IHttpServer::setAllowRemoteConnections(bool allow) [member function]\"" );
        
        }
        { //property "defaultDirectory"[fget=::osiris::IHttpServer::getDefaultDirectory, fset=::osiris::IHttpServer::setDefaultDirectory]
        
            typedef ::osiris::String ( ::osiris::IHttpServer::*fget )(  ) const;
            typedef void ( ::osiris::IHttpServer::*fset )( ::osiris::String const & ) ;
            
            IHttpServer_exposer.add_property( 
                "defaultDirectory"
                , fget( &::osiris::IHttpServer::getDefaultDirectory )
                , fset( &::osiris::IHttpServer::setDefaultDirectory )
                , "get\\set property, built on top of \"osiris::String osiris::IHttpServer::getDefaultDirectory() const [member function]\" and \"void osiris::IHttpServer::setDefaultDirectory(osiris::String const & directory) [member function]\"" );
        
        }
        { //property "sessionsDuration"[fget=::osiris::IHttpServer::getSessionsDuration, fset=::osiris::IHttpServer::setSessionsDuration]
        
            typedef ::osiris::TimeDuration const & ( ::osiris::IHttpServer::*fget )(  ) const;
            typedef void ( ::osiris::IHttpServer::*fset )( ::osiris::TimeDuration const & ) ;
            
            IHttpServer_exposer.add_property( 
                "sessionsDuration"
                , ::boost::python::make_function( 
                      fget( &::osiris::IHttpServer::getSessionsDuration )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IHttpServer::setSessionsDuration )
                , "get\\set property, built on top of \"osiris::TimeDuration const & osiris::IHttpServer::getSessionsDuration() const [member function]\" and \"void osiris::IHttpServer::setSessionsDuration(osiris::TimeDuration const & duration) [member function]\"" );
        
        }
        { //property "name"[fget=::osiris::IHttpServer::getName]
        
            typedef ::std::string const & ( ::osiris::IHttpServer::*fget )(  ) const;
            
            IHttpServer_exposer.add_property( 
                "name"
                , ::boost::python::make_function( 
                      fget( &::osiris::IHttpServer::getName )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::string const & osiris::IHttpServer::getName() const [member function]\"" );
        
        }
        { //property "rootDirectory"[fget=::osiris::IHttpServer::getRootDirectory]
        
            typedef ::boost::shared_ptr<osiris::IHttpDirectory> ( ::osiris::IHttpServer::*fget )(  ) const;
            
            IHttpServer_exposer.add_property( 
                "rootDirectory"
                , fget( &::osiris::IHttpServer::getRootDirectory )
                , "get property, built on top of \"boost::shared_ptr<osiris::IHttpDirectory> osiris::IHttpServer::getRootDirectory() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IHttpServer > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::IServer > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::NetworkService > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::NetworkService > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::Thread > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::IRunnable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IHttpServer >, boost::shared_ptr< ::osiris::Object > >();
    }

}
