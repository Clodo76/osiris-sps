// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ideblock.h"
#include "xmlstylesheet.h"
#include "ideskin.h"
#include "idesession.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "ideblock.pypp.hpp"

namespace bp = boost::python;

struct IdeBlock_wrapper : ::osiris::IdeBlock, ::osiris::PythonWrapper< ::osiris::IdeBlock > {

    IdeBlock_wrapper(::osiris::String const & title=osiris::String::EMPTY )
    : ::osiris::IdeBlock( boost::ref(title) )
      , ::osiris::PythonWrapper< ::osiris::IdeBlock >(){
        // constructor
    
    }

    static boost::python::object getTitle( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getTitle();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getHref( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getHref();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getType( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::BlockType const & result = inst.getType();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::BlockType const & >( result ) );
    }

    static boost::python::object getInnerStyle( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getInnerStyle();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getOuterStyle( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getOuterStyle();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object isLink( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isLink();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getBody( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IHtmlControl> result = inst.getBody();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSpecialPage( ::osiris::IdeBlock const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool const & result = inst.getSpecialPage();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, bool const & >( result ) );
    }

    virtual ::osiris::String getTemplatePath(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTemplatePath = this->get_override( "getTemplatePath" ) )
            return func_getTemplatePath(  );
        else{
            __pystate.leave();
            return this->::osiris::IdeBlock::getTemplatePath(  );
        }
    }
    
    ::osiris::String default_getTemplatePath(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IdeBlock::getTemplatePath( );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IdeBlock::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IdeBlock::onInit( );
    }

    static void setHref( ::osiris::IdeBlock & inst, ::osiris::String const & href ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHref(href);
        __pythreadSaver.restore();
    }

    static void setInnerStyle( ::osiris::IdeBlock & inst, ::osiris::String const & style ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setInnerStyle(style);
        __pythreadSaver.restore();
    }

    static void setOuterStyle( ::osiris::IdeBlock & inst, ::osiris::String const & style ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOuterStyle(style);
        __pythreadSaver.restore();
    }

    static void setSpecialPage( ::osiris::IdeBlock & inst, bool const & page ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSpecialPage(page);
        __pythreadSaver.restore();
    }

    static void setTitle( ::osiris::IdeBlock & inst, ::osiris::String const & title ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTitle(title);
        __pythreadSaver.restore();
    }

    static void setType( ::osiris::IdeBlock & inst, ::osiris::BlockType const & type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setType(type);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(osiris::null) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::IHtmlControl::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHtmlControl::getSession( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onInitStylesheet(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInitStylesheet = this->get_override( "onInitStylesheet" ) )
            func_onInitStylesheet(  );
        else{
            __pystate.leave();
            this->::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet(  );
        }
    }
    
    virtual void default_onInitStylesheet(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onPreRender( );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onRender( boost::ref(writer) );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_IdeBlock_class(){

    { //::osiris::IdeBlock
        typedef ::boost::python::class_< IdeBlock_wrapper, ::boost::python::bases< ::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > > >, ::boost::noncopyable > IdeBlock_exposer_t;
        IdeBlock_exposer_t IdeBlock_exposer = IdeBlock_exposer_t( "IdeBlock", ::boost::python::init< ::boost::python::optional< ::osiris::String const & > >(( ::boost::python::arg("title")=osiris::String::EMPTY )) );
        ::boost::python::scope IdeBlock_scope( IdeBlock_exposer );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::IdeBlock >();
        { //::osiris::IdeBlock::getTitle
        
            typedef boost::python::object ( *getTitle_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getTitle"
                , getTitle_function_type( &IdeBlock_wrapper::getTitle ) );
        
        }
        { //::osiris::IdeBlock::getHref
        
            typedef boost::python::object ( *getHref_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getHref"
                , getHref_function_type( &IdeBlock_wrapper::getHref ) );
        
        }
        { //::osiris::IdeBlock::getType
        
            typedef boost::python::object ( *getType_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getType"
                , getType_function_type( &IdeBlock_wrapper::getType ) );
        
        }
        { //::osiris::IdeBlock::getInnerStyle
        
            typedef boost::python::object ( *getInnerStyle_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getInnerStyle"
                , getInnerStyle_function_type( &IdeBlock_wrapper::getInnerStyle ) );
        
        }
        { //::osiris::IdeBlock::getOuterStyle
        
            typedef boost::python::object ( *getOuterStyle_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getOuterStyle"
                , getOuterStyle_function_type( &IdeBlock_wrapper::getOuterStyle ) );
        
        }
        { //::osiris::IdeBlock::isLink
        
            typedef boost::python::object ( *isLink_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "isLink"
                , isLink_function_type( &IdeBlock_wrapper::isLink ) );
        
        }
        { //::osiris::IdeBlock::getBody
        
            typedef boost::python::object ( *getBody_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getBody"
                , getBody_function_type( &IdeBlock_wrapper::getBody ) );
        
        }
        { //::osiris::IdeBlock::getSpecialPage
        
            typedef boost::python::object ( *getSpecialPage_function_type )( ::osiris::IdeBlock const & );
            
            IdeBlock_exposer.def( 
                "getSpecialPage"
                , getSpecialPage_function_type( &IdeBlock_wrapper::getSpecialPage ) );
        
        }
        { //::osiris::IdeBlock::getTemplatePath
        
            typedef ::osiris::String ( ::osiris::IdeBlock::*getTemplatePath_function_type )(  ) ;
            typedef ::osiris::String ( IdeBlock_wrapper::*default_getTemplatePath_function_type )(  ) ;
            
            IdeBlock_exposer.def( 
                "getTemplatePath"
                , getTemplatePath_function_type(&::osiris::IdeBlock::getTemplatePath)
                , default_getTemplatePath_function_type(&IdeBlock_wrapper::default_getTemplatePath) );
        
        }
        { //::osiris::IdeBlock::onInit
        
            typedef void ( IdeBlock_wrapper::*onInit_function_type )(  ) ;
            
            IdeBlock_exposer.def( 
                "onInit"
                , onInit_function_type( &IdeBlock_wrapper::default_onInit ) );
        
        }
        { //::osiris::IdeBlock::setHref
        
            typedef void ( *setHref_function_type )( ::osiris::IdeBlock &,::osiris::String const & );
            
            IdeBlock_exposer.def( 
                "setHref"
                , setHref_function_type( &IdeBlock_wrapper::setHref )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("href") ) );
        
        }
        { //::osiris::IdeBlock::setInnerStyle
        
            typedef void ( *setInnerStyle_function_type )( ::osiris::IdeBlock &,::osiris::String const & );
            
            IdeBlock_exposer.def( 
                "setInnerStyle"
                , setInnerStyle_function_type( &IdeBlock_wrapper::setInnerStyle )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("style") ) );
        
        }
        { //::osiris::IdeBlock::setOuterStyle
        
            typedef void ( *setOuterStyle_function_type )( ::osiris::IdeBlock &,::osiris::String const & );
            
            IdeBlock_exposer.def( 
                "setOuterStyle"
                , setOuterStyle_function_type( &IdeBlock_wrapper::setOuterStyle )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("style") ) );
        
        }
        { //::osiris::IdeBlock::setSpecialPage
        
            typedef void ( *setSpecialPage_function_type )( ::osiris::IdeBlock &,bool const & );
            
            IdeBlock_exposer.def( 
                "setSpecialPage"
                , setSpecialPage_function_type( &IdeBlock_wrapper::setSpecialPage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("page") ) );
        
        }
        { //::osiris::IdeBlock::setTitle
        
            typedef void ( *setTitle_function_type )( ::osiris::IdeBlock &,::osiris::String const & );
            
            IdeBlock_exposer.def( 
                "setTitle"
                , setTitle_function_type( &IdeBlock_wrapper::setTitle )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("title") ) );
        
        }
        { //::osiris::IdeBlock::setType
        
            typedef void ( *setType_function_type )( ::osiris::IdeBlock &,::osiris::BlockType const & );
            
            IdeBlock_exposer.def( 
                "setType"
                , setType_function_type( &IdeBlock_wrapper::setType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( IdeBlock_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            IdeBlock_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &IdeBlock_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( IdeBlock_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            IdeBlock_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &IdeBlock_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::IHtmlControl::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( IdeBlock_wrapper::*default_getSession_function_type )(  ) const;
            
            IdeBlock_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::IHtmlControl::getSession)
                , default_getSession_function_type(&IdeBlock_wrapper::default_getSession) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( IdeBlock_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            IdeBlock_exposer.def( 
                "onEvent"
                , onEvent_function_type( &IdeBlock_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet
        
            typedef ::osiris::IdeBlock exported_class_t;
            typedef void ( IdeBlock_wrapper::*onInitStylesheet_function_type )(  ) ;
            
            IdeBlock_exposer.def( 
                "onInitStylesheet"
                , onInitStylesheet_function_type( &IdeBlock_wrapper::default_onInitStylesheet ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( IdeBlock_wrapper::*onLoad_function_type )(  ) ;
            
            IdeBlock_exposer.def( 
                "onLoad"
                , onLoad_function_type( &IdeBlock_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( IdeBlock_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            IdeBlock_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &IdeBlock_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::onPreRender
        
            typedef void ( IdeBlock_wrapper::*onPreRender_function_type )(  ) ;
            
            IdeBlock_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &IdeBlock_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::IHtmlControl::onRender
        
            typedef void ( IdeBlock_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeBlock_exposer.def( 
                "onRender"
                , onRender_function_type( &IdeBlock_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( IdeBlock_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IdeBlock_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &IdeBlock_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IdeBlock_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeBlock_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&IdeBlock_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IdeBlock_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeBlock_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&IdeBlock_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( IdeBlock_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IdeBlock_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &IdeBlock_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "title"[fget=::osiris::IdeBlock::getTitle, fset=::osiris::IdeBlock::setTitle]
        
            typedef ::osiris::String const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( ::osiris::String const & ) ;
            
            IdeBlock_exposer.add_property( 
                "title"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getTitle )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setTitle )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeBlock::getTitle() const [member function]\" and \"void osiris::IdeBlock::setTitle(osiris::String const & title) [member function]\"" );
        
        }
        { //property "href"[fget=::osiris::IdeBlock::getHref, fset=::osiris::IdeBlock::setHref]
        
            typedef ::osiris::String const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( ::osiris::String const & ) ;
            
            IdeBlock_exposer.add_property( 
                "href"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getHref )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setHref )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeBlock::getHref() const [member function]\" and \"void osiris::IdeBlock::setHref(osiris::String const & href) [member function]\"" );
        
        }
        { //property "type"[fget=::osiris::IdeBlock::getType, fset=::osiris::IdeBlock::setType]
        
            typedef ::osiris::BlockType const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( ::osiris::BlockType const & ) ;
            
            IdeBlock_exposer.add_property( 
                "type"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getType )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setType )
                , "get\\set property, built on top of \"osiris::BlockType const & osiris::IdeBlock::getType() const [member function]\" and \"void osiris::IdeBlock::setType(osiris::BlockType const & type) [member function]\"" );
        
        }
        { //property "innerStyle"[fget=::osiris::IdeBlock::getInnerStyle, fset=::osiris::IdeBlock::setInnerStyle]
        
            typedef ::osiris::String const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( ::osiris::String const & ) ;
            
            IdeBlock_exposer.add_property( 
                "innerStyle"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getInnerStyle )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setInnerStyle )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeBlock::getInnerStyle() const [member function]\" and \"void osiris::IdeBlock::setInnerStyle(osiris::String const & style) [member function]\"" );
        
        }
        { //property "outerStyle"[fget=::osiris::IdeBlock::getOuterStyle, fset=::osiris::IdeBlock::setOuterStyle]
        
            typedef ::osiris::String const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( ::osiris::String const & ) ;
            
            IdeBlock_exposer.add_property( 
                "outerStyle"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getOuterStyle )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setOuterStyle )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeBlock::getOuterStyle() const [member function]\" and \"void osiris::IdeBlock::setOuterStyle(osiris::String const & style) [member function]\"" );
        
        }
        { //property "specialPage"[fget=::osiris::IdeBlock::getSpecialPage, fset=::osiris::IdeBlock::setSpecialPage]
        
            typedef bool const & ( ::osiris::IdeBlock::*fget )(  ) const;
            typedef void ( ::osiris::IdeBlock::*fset )( bool const & ) ;
            
            IdeBlock_exposer.add_property( 
                "specialPage"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeBlock::getSpecialPage )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeBlock::setSpecialPage )
                , "get\\set property, built on top of \"bool const & osiris::IdeBlock::getSpecialPage() const [member function]\" and \"void osiris::IdeBlock::setSpecialPage(bool const & page) [member function]\"" );
        
        }
        { //property "body"[fget=::osiris::IdeBlock::getBody]
        
            typedef ::boost::shared_ptr<osiris::IHtmlControl> ( ::osiris::IdeBlock::*fget )(  ) const;
            
            IdeBlock_exposer.add_property( 
                "body"
                , fget( &::osiris::IdeBlock::getBody )
                , "get property, built on top of \"boost::shared_ptr<osiris::IHtmlControl> osiris::IdeBlock::getBody() const [member function]\"" );
        
        }
    }

}
