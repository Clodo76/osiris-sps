// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ixmlhandler.h"
#include "httpurl.h"
#include "xmlschema.h"
#include "xmldocument.h"
#include "ixmlhandler.pypp.hpp"

namespace bp = boost::python;

struct IXMLHandler_wrapper : ::osiris::IXMLHandler, ::osiris::PythonWrapper< ::osiris::IXMLHandler > {

    IXMLHandler_wrapper(::boost::shared_ptr< osiris::XMLSchema > schema=osiris::null )
    : ::osiris::IXMLHandler( schema )
      , ::osiris::PythonWrapper< ::osiris::IXMLHandler >(){
        // constructor
    
    }

    static boost::python::object getSchema( ::osiris::IXMLHandler const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::XMLSchema> result = inst.getSchema();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getStopParser( ::osiris::IXMLHandler const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getStopParser();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object parseUrl( ::osiris::IXMLHandler & inst, ::osiris::HttpUrl const & url, ::osiris::String const & userAgent, ::boost::shared_ptr< boost::asio::io_service > service, ::boost::shared_ptr< osiris::TCPSocket > socket ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseUrl(url, userAgent, service, socket);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void clear(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_clear = this->get_override( "clear" ) )
            func_clear(  );
        else{
            __pystate.leave();
            this->::osiris::IXMLHandler::clear(  );
        }
    }
    
    void default_clear(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IXMLHandler::clear( );
    }

    virtual void onStartDocument(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_onStartDocument = this->get_override( "onStartDocument" );
        func_onStartDocument(  );
    }

    virtual void onEndDocument(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_onEndDocument = this->get_override( "onEndDocument" );
        func_onEndDocument(  );
    }

    virtual void onStartElement( ::osiris::String const & name, ::osiris::StringCollection< osiris::String, osiris::StringCollectionTraits< osiris::String > > const & attributes ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_onStartElement = this->get_override( "onStartElement" );
        func_onStartElement( boost::ref(name), boost::ref(attributes) );
    }

    virtual void onCharacters( ::osiris::String const & str ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_onCharacters = this->get_override( "onCharacters" );
        func_onCharacters( boost::ref(str) );
    }

    virtual void onEndElement( ::osiris::String const & name ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_onEndElement = this->get_override( "onEndElement" );
        func_onEndElement( boost::ref(name) );
    }

    virtual void onError( ::osiris::String const & msg ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onError = this->get_override( "onError" ) )
            func_onError( boost::ref(msg) );
        else{
            __pystate.leave();
            this->::osiris::IXMLHandler::onError( boost::ref(msg) );
        }
    }
    
    virtual void default_onError( ::osiris::String const & msg ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IXMLHandler::onError( boost::ref(msg) );
    }

    virtual void onWarning( ::osiris::String const & msg ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onWarning = this->get_override( "onWarning" ) )
            func_onWarning( boost::ref(msg) );
        else{
            __pystate.leave();
            this->::osiris::IXMLHandler::onWarning( boost::ref(msg) );
        }
    }
    
    virtual void default_onWarning( ::osiris::String const & msg ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IXMLHandler::onWarning( boost::ref(msg) );
    }

    static boost::python::object parseBuffer( ::osiris::IXMLHandler & inst, ::osiris::Buffer const & buffer, ::osiris::String const & encoding=("UTF-8") ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseBuffer(buffer, encoding);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object parseFile( ::osiris::IXMLHandler & inst, ::osiris::String const & filename ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseFile(filename);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object parseStream( ::osiris::IXMLHandler & inst, ::boost::shared_ptr< osiris::IStream > stream, ::osiris::String const & encoding=("UTF-8") ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseStream(stream, encoding);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object parseString( ::osiris::IXMLHandler & inst, ::osiris::String const & str ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseString(str);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object parseStringUTF8( ::osiris::IXMLHandler & inst, ::std::string const & str ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.parseStringUTF8(str);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setSchema( ::osiris::IXMLHandler & inst, ::boost::shared_ptr< osiris::XMLSchema > schema ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSchema(schema);
        __pythreadSaver.restore();
    }

    static void setStopParser( ::osiris::IXMLHandler & inst, bool stopParser ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setStopParser(stopParser);
        __pythreadSaver.restore();
    }

};

void register_IXMLHandler_class(){

    { //::osiris::IXMLHandler
        typedef ::boost::python::class_< IXMLHandler_wrapper, ::boost::noncopyable > IXMLHandler_exposer_t;
        IXMLHandler_exposer_t IXMLHandler_exposer = IXMLHandler_exposer_t( "IXMLHandler", ::boost::python::init< ::boost::python::optional< ::boost::shared_ptr< osiris::XMLSchema > > >(( ::boost::python::arg("schema")=osiris::null )) );
        ::boost::python::scope IXMLHandler_scope( IXMLHandler_exposer );
        { //::osiris::IXMLHandler::getSchema
        
            typedef boost::python::object ( *getSchema_function_type )( ::osiris::IXMLHandler const & );
            
            IXMLHandler_exposer.def( 
                "getSchema"
                , getSchema_function_type( &IXMLHandler_wrapper::getSchema ) );
        
        }
        { //::osiris::IXMLHandler::getStopParser
        
            typedef boost::python::object ( *getStopParser_function_type )( ::osiris::IXMLHandler const & );
            
            IXMLHandler_exposer.def( 
                "getStopParser"
                , getStopParser_function_type( &IXMLHandler_wrapper::getStopParser ) );
        
        }
        { //::osiris::IXMLHandler::parseUrl
        
            typedef boost::python::object ( *parseUrl_function_type )( ::osiris::IXMLHandler &,::osiris::HttpUrl const &,::osiris::String const &,::boost::shared_ptr<boost::asio::io_service>,::boost::shared_ptr<osiris::TCPSocket> );
            
            IXMLHandler_exposer.def( 
                "parseUrl"
                , parseUrl_function_type( &IXMLHandler_wrapper::parseUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("userAgent"), ::boost::python::arg("service"), ::boost::python::arg("socket") ) );
        
        }
        { //::osiris::IXMLHandler::clear
        
            typedef void ( ::osiris::IXMLHandler::*clear_function_type )(  ) ;
            typedef void ( IXMLHandler_wrapper::*default_clear_function_type )(  ) ;
            
            IXMLHandler_exposer.def( 
                "clear"
                , clear_function_type(&::osiris::IXMLHandler::clear)
                , default_clear_function_type(&IXMLHandler_wrapper::default_clear) );
        
        }
        { //::osiris::IXMLHandler::onStartDocument
        
            typedef void ( IXMLHandler_wrapper::*onStartDocument_function_type )(  ) ;
            
            IXMLHandler_exposer.def( 
                "onStartDocument"
                , onStartDocument_function_type( &IXMLHandler_wrapper::onStartDocument ) );
        
        }
        { //::osiris::IXMLHandler::onEndDocument
        
            typedef void ( IXMLHandler_wrapper::*onEndDocument_function_type )(  ) ;
            
            IXMLHandler_exposer.def( 
                "onEndDocument"
                , onEndDocument_function_type( &IXMLHandler_wrapper::onEndDocument ) );
        
        }
        { //::osiris::IXMLHandler::onStartElement
        
            typedef void ( IXMLHandler_wrapper::*onStartElement_function_type )( ::osiris::String const &,::osiris::StringCollection< osiris::String, osiris::StringCollectionTraits< osiris::String > > const & ) ;
            
            IXMLHandler_exposer.def( 
                "onStartElement"
                , onStartElement_function_type( &IXMLHandler_wrapper::onStartElement )
                , ( ::boost::python::arg("name"), ::boost::python::arg("attributes") ) );
        
        }
        { //::osiris::IXMLHandler::onCharacters
        
            typedef void ( IXMLHandler_wrapper::*onCharacters_function_type )( ::osiris::String const & ) ;
            
            IXMLHandler_exposer.def( 
                "onCharacters"
                , onCharacters_function_type( &IXMLHandler_wrapper::onCharacters )
                , ( ::boost::python::arg("str") ) );
        
        }
        { //::osiris::IXMLHandler::onEndElement
        
            typedef void ( IXMLHandler_wrapper::*onEndElement_function_type )( ::osiris::String const & ) ;
            
            IXMLHandler_exposer.def( 
                "onEndElement"
                , onEndElement_function_type( &IXMLHandler_wrapper::onEndElement )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IXMLHandler::onError
        
            typedef void ( IXMLHandler_wrapper::*onError_function_type )( ::osiris::String const & ) ;
            
            IXMLHandler_exposer.def( 
                "onError"
                , onError_function_type( &IXMLHandler_wrapper::default_onError )
                , ( ::boost::python::arg("msg") ) );
        
        }
        { //::osiris::IXMLHandler::onWarning
        
            typedef void ( IXMLHandler_wrapper::*onWarning_function_type )( ::osiris::String const & ) ;
            
            IXMLHandler_exposer.def( 
                "onWarning"
                , onWarning_function_type( &IXMLHandler_wrapper::default_onWarning )
                , ( ::boost::python::arg("msg") ) );
        
        }
        { //::osiris::IXMLHandler::parseBuffer
        
            typedef boost::python::object ( *parseBuffer_function_type )( ::osiris::IXMLHandler &,::osiris::Buffer const &,::osiris::String const & );
            
            IXMLHandler_exposer.def( 
                "parseBuffer"
                , parseBuffer_function_type( &IXMLHandler_wrapper::parseBuffer )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("buffer"), ::boost::python::arg("encoding")=("UTF-8") ) );
        
        }
        { //::osiris::IXMLHandler::parseFile
        
            typedef boost::python::object ( *parseFile_function_type )( ::osiris::IXMLHandler &,::osiris::String const & );
            
            IXMLHandler_exposer.def( 
                "parseFile"
                , parseFile_function_type( &IXMLHandler_wrapper::parseFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("filename") ) );
        
        }
        { //::osiris::IXMLHandler::parseStream
        
            typedef boost::python::object ( *parseStream_function_type )( ::osiris::IXMLHandler &,::boost::shared_ptr<osiris::IStream>,::osiris::String const & );
            
            IXMLHandler_exposer.def( 
                "parseStream"
                , parseStream_function_type( &IXMLHandler_wrapper::parseStream )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("stream"), ::boost::python::arg("encoding")=("UTF-8") ) );
        
        }
        { //::osiris::IXMLHandler::parseString
        
            typedef boost::python::object ( *parseString_function_type )( ::osiris::IXMLHandler &,::osiris::String const & );
            
            IXMLHandler_exposer.def( 
                "parseString"
                , parseString_function_type( &IXMLHandler_wrapper::parseString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::IXMLHandler::parseStringUTF8
        
            typedef boost::python::object ( *parseStringUTF8_function_type )( ::osiris::IXMLHandler &,::std::string const & );
            
            IXMLHandler_exposer.def( 
                "parseStringUTF8"
                , parseStringUTF8_function_type( &IXMLHandler_wrapper::parseStringUTF8 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::IXMLHandler::setSchema
        
            typedef void ( *setSchema_function_type )( ::osiris::IXMLHandler &,::boost::shared_ptr<osiris::XMLSchema> );
            
            IXMLHandler_exposer.def( 
                "setSchema"
                , setSchema_function_type( &IXMLHandler_wrapper::setSchema )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("schema") ) );
        
        }
        { //::osiris::IXMLHandler::setStopParser
        
            typedef void ( *setStopParser_function_type )( ::osiris::IXMLHandler &,bool );
            
            IXMLHandler_exposer.def( 
                "setStopParser"
                , setStopParser_function_type( &IXMLHandler_wrapper::setStopParser )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("stopParser") ) );
        
        }
        { //property "schema"[fget=::osiris::IXMLHandler::getSchema, fset=::osiris::IXMLHandler::setSchema]
        
            typedef ::boost::shared_ptr<osiris::XMLSchema> ( ::osiris::IXMLHandler::*fget )(  ) const;
            typedef void ( ::osiris::IXMLHandler::*fset )( ::boost::shared_ptr<osiris::XMLSchema> ) ;
            
            IXMLHandler_exposer.add_property( 
                "schema"
                , fget( &::osiris::IXMLHandler::getSchema )
                , fset( &::osiris::IXMLHandler::setSchema )
                , "get\\set property, built on top of \"boost::shared_ptr<osiris::XMLSchema> osiris::IXMLHandler::getSchema() const [member function]\" and \"void osiris::IXMLHandler::setSchema(boost::shared_ptr<osiris::XMLSchema> schema) [member function]\"" );
        
        }
        { //property "stopParser"[fget=::osiris::IXMLHandler::getStopParser, fset=::osiris::IXMLHandler::setStopParser]
        
            typedef bool ( ::osiris::IXMLHandler::*fget )(  ) const;
            typedef void ( ::osiris::IXMLHandler::*fset )( bool ) ;
            
            IXMLHandler_exposer.add_property( 
                "stopParser"
                , fget( &::osiris::IXMLHandler::getStopParser )
                , fset( &::osiris::IXMLHandler::setStopParser )
                , "get\\set property, built on top of \"bool osiris::IXMLHandler::getStopParser() const [member function]\" and \"void osiris::IXMLHandler::setStopParser(bool stopParser) [member function]\"" );
        
        }
    }

}
