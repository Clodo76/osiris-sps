// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "datetime.h"
#include "timeduration.pypp.hpp"

namespace bp = boost::python;

static boost::python::object isNull_47f8caad6afc72c06ee309b91ee3bb38( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isNull();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getDuration_8c26023ce50f1649da377dba63fd8dba( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::boost::posix_time::time_duration const & result = inst.getDuration();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::boost::posix_time::time_duration const & >( result ) );
}

static boost::python::object getHours_aadfbd534661c6c04a07a0fc37b9b151( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::int32 result = inst.getHours();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getMinutes_aae275d178f92409234a0ed7fed291f0( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::int32 result = inst.getMinutes();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getSeconds_8064001cd054ea1b72fc310005b5e578( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::int32 result = inst.getSeconds();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getTotalSeconds_289450a1b2ff06034d69552d1dbbf2d3( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::int32 result = inst.getTotalSeconds();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getTotalMilliseconds_74ef58903c66cc15f3842156bb94c310( ::osiris::TimeDuration const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::int32 result = inst.getTotalMilliseconds();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object days_d72690ab009f85aaa8ec5bb2391e8f4e( ::osiris::int32 count ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::TimeDuration result = ::osiris::TimeDuration::days(count);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object hours_0419eeee8bb59e73507ef833f7937de5( ::osiris::int32 count ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::TimeDuration result = ::osiris::TimeDuration::hours(count);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object millisec_1fc7641262abbc90942a9fc0b6a699fc( ::osiris::int32 count ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::TimeDuration result = ::osiris::TimeDuration::millisec(count);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object minutes_87cad237f24a9a11fd4cc8bd90e67f2c( ::osiris::int32 count ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::TimeDuration result = ::osiris::TimeDuration::minutes(count);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object seconds_da2f072812ab627bb4e92cf79597e095( ::osiris::int32 count ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::TimeDuration result = ::osiris::TimeDuration::seconds(count);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

void register_TimeDuration_class(){

    { //::osiris::TimeDuration
        typedef ::boost::python::class_< ::osiris::TimeDuration > TimeDuration_exposer_t;
        TimeDuration_exposer_t TimeDuration_exposer = TimeDuration_exposer_t( "TimeDuration", ::boost::python::init< >() );
        ::boost::python::scope TimeDuration_scope( TimeDuration_exposer );
        TimeDuration_exposer.def( ::boost::python::init< ::osiris::int32, ::osiris::int32, ::osiris::int32 >(( ::boost::python::arg("hours"), ::boost::python::arg("minutes"), ::boost::python::arg("seconds") )) );
        TimeDuration_exposer.def( ::boost::python::init< ::osiris::DateTime const &, ::osiris::DateTime const & >(( ::boost::python::arg("first"), ::boost::python::arg("second") )) );
        TimeDuration_exposer.def( ::boost::python::init< ::boost::posix_time::time_duration const & >(( ::boost::python::arg("duration") )) );
        ::boost::python::implicitly_convertible< ::boost::posix_time::time_duration const &, ::osiris::TimeDuration >();
        TimeDuration_exposer.def( ::boost::python::init< ::osiris::TimeDuration const & >(( ::boost::python::arg("second") )) );
        { //::osiris::TimeDuration::isNull
        
            typedef boost::python::object ( *isNull_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "isNull"
                , isNull_function_type( &isNull_47f8caad6afc72c06ee309b91ee3bb38 ) );
        
        }
        { //::osiris::TimeDuration::getDuration
        
            typedef boost::python::object ( *getDuration_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getDuration"
                , getDuration_function_type( &getDuration_8c26023ce50f1649da377dba63fd8dba ) );
        
        }
        { //::osiris::TimeDuration::getHours
        
            typedef boost::python::object ( *getHours_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getHours"
                , getHours_function_type( &getHours_aadfbd534661c6c04a07a0fc37b9b151 ) );
        
        }
        { //::osiris::TimeDuration::getMinutes
        
            typedef boost::python::object ( *getMinutes_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getMinutes"
                , getMinutes_function_type( &getMinutes_aae275d178f92409234a0ed7fed291f0 ) );
        
        }
        { //::osiris::TimeDuration::getSeconds
        
            typedef boost::python::object ( *getSeconds_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getSeconds"
                , getSeconds_function_type( &getSeconds_8064001cd054ea1b72fc310005b5e578 ) );
        
        }
        { //::osiris::TimeDuration::getTotalSeconds
        
            typedef boost::python::object ( *getTotalSeconds_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getTotalSeconds"
                , getTotalSeconds_function_type( &getTotalSeconds_289450a1b2ff06034d69552d1dbbf2d3 ) );
        
        }
        { //::osiris::TimeDuration::getTotalMilliseconds
        
            typedef boost::python::object ( *getTotalMilliseconds_function_type )( ::osiris::TimeDuration const & );
            
            TimeDuration_exposer.def( 
                "getTotalMilliseconds"
                , getTotalMilliseconds_function_type( &getTotalMilliseconds_74ef58903c66cc15f3842156bb94c310 ) );
        
        }
        TimeDuration_exposer.def( "as__scope_osiris_scope_DateTime", &::osiris::TimeDuration::operator ::osiris::DateTime  );
        { //::osiris::TimeDuration::days
        
            typedef boost::python::object ( *days_function_type )( ::osiris::int32 );
            
            TimeDuration_exposer.def( 
                "days"
                , days_function_type( &days_d72690ab009f85aaa8ec5bb2391e8f4e )
                , ( ::boost::python::arg("count") ) );
        
        }
        { //::osiris::TimeDuration::hours
        
            typedef boost::python::object ( *hours_function_type )( ::osiris::int32 );
            
            TimeDuration_exposer.def( 
                "hours"
                , hours_function_type( &hours_0419eeee8bb59e73507ef833f7937de5 )
                , ( ::boost::python::arg("count") ) );
        
        }
        { //::osiris::TimeDuration::millisec
        
            typedef boost::python::object ( *millisec_function_type )( ::osiris::int32 );
            
            TimeDuration_exposer.def( 
                "millisec"
                , millisec_function_type( &millisec_1fc7641262abbc90942a9fc0b6a699fc )
                , ( ::boost::python::arg("count") ) );
        
        }
        { //::osiris::TimeDuration::minutes
        
            typedef boost::python::object ( *minutes_function_type )( ::osiris::int32 );
            
            TimeDuration_exposer.def( 
                "minutes"
                , minutes_function_type( &minutes_87cad237f24a9a11fd4cc8bd90e67f2c )
                , ( ::boost::python::arg("count") ) );
        
        }
        TimeDuration_exposer.def( ::boost::python::self != ::boost::python::self );
        TimeDuration_exposer.def( ::boost::python::self < ::boost::python::self );
        TimeDuration_exposer.def( ::boost::python::self <= ::boost::python::self );
        { //::osiris::TimeDuration::operator=
        
            typedef ::osiris::TimeDuration & ( ::osiris::TimeDuration::*assign_function_type )( ::osiris::TimeDuration const & ) ;
            
            TimeDuration_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::TimeDuration::operator= )
                , ( ::boost::python::arg("second") )
                , bp::return_self< >() );
        
        }
        TimeDuration_exposer.def( ::boost::python::self == ::boost::python::self );
        TimeDuration_exposer.def( ::boost::python::self > ::boost::python::self );
        TimeDuration_exposer.def( ::boost::python::self >= ::boost::python::self );
        { //::osiris::TimeDuration::seconds
        
            typedef boost::python::object ( *seconds_function_type )( ::osiris::int32 );
            
            TimeDuration_exposer.def( 
                "seconds"
                , seconds_function_type( &seconds_da2f072812ab627bb4e92cf79597e095 )
                , ( ::boost::python::arg("count") ) );
        
        }
        TimeDuration_exposer.def_readonly( "ZERO", ::osiris::TimeDuration::ZERO );
        TimeDuration_exposer.def_readonly( "m_data", &::osiris::TimeDuration::m_data );
        TimeDuration_exposer.staticmethod( "days" );
        TimeDuration_exposer.staticmethod( "hours" );
        TimeDuration_exposer.staticmethod( "millisec" );
        TimeDuration_exposer.staticmethod( "minutes" );
        TimeDuration_exposer.staticmethod( "seconds" );
        { //property "duration"[fget=::osiris::TimeDuration::getDuration]
        
            typedef ::boost::posix_time::time_duration const & ( ::osiris::TimeDuration::*fget )(  ) const;
            
            TimeDuration_exposer.add_property( 
                "duration"
                , ::boost::python::make_function( 
                      fget( &::osiris::TimeDuration::getDuration )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"boost::posix_time::time_duration const & osiris::TimeDuration::getDuration() const [member function]\"" );
        
        }
        { //property "totalSeconds"[fget=::osiris::TimeDuration::getTotalSeconds]
        
            typedef ::osiris::int32 ( ::osiris::TimeDuration::*fget )(  ) const;
            
            TimeDuration_exposer.add_property( 
                "totalSeconds"
                , fget( &::osiris::TimeDuration::getTotalSeconds )
                , "get property, built on top of \"osiris::int32 osiris::TimeDuration::getTotalSeconds() const [member function]\"" );
        
        }
        { //property "totalMilliseconds"[fget=::osiris::TimeDuration::getTotalMilliseconds]
        
            typedef ::osiris::int32 ( ::osiris::TimeDuration::*fget )(  ) const;
            
            TimeDuration_exposer.add_property( 
                "totalMilliseconds"
                , fget( &::osiris::TimeDuration::getTotalMilliseconds )
                , "get property, built on top of \"osiris::int32 osiris::TimeDuration::getTotalMilliseconds() const [member function]\"" );
        
        }
    }

}
