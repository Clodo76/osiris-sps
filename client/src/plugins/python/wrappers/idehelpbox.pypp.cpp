// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "idehelpbox.h"
#include "xmlstylesheet.h"
#include "ideskin.h"
#include "idesession.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "idehelpbox.pypp.hpp"

namespace bp = boost::python;

struct IdeHelpBox_wrapper : ::osiris::IdeHelpBox, ::osiris::PythonWrapper< ::osiris::IdeHelpBox > {

    IdeHelpBox_wrapper(::osiris::String const & text, ::osiris::String const & helpID )
    : ::osiris::IdeHelpBox( boost::ref(text), boost::ref(helpID) )
      , ::osiris::PythonWrapper< ::osiris::IdeHelpBox >(){
        // constructor
    
    }

    static boost::python::object getText( ::osiris::IdeHelpBox const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getText();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getHelpID( ::osiris::IdeHelpBox const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getHelpID();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    virtual ::osiris::String getTemplatePath(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTemplatePath = this->get_override( "getTemplatePath" ) )
            return func_getTemplatePath(  );
        else{
            __pystate.leave();
            return this->::osiris::IdeHelpBox::getTemplatePath(  );
        }
    }
    
    ::osiris::String default_getTemplatePath(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IdeHelpBox::getTemplatePath( );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IdeHelpBox::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IdeHelpBox::onInit( );
    }

    static void setHelpID( ::osiris::IdeHelpBox & inst, ::osiris::String const & helpID ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHelpID(helpID);
        __pythreadSaver.restore();
    }

    static void setText( ::osiris::IdeHelpBox & inst, ::osiris::String const & text ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setText(text);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(osiris::null) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::IHtmlControl::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHtmlControl::getSession( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onInitStylesheet(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInitStylesheet = this->get_override( "onInitStylesheet" ) )
            func_onInitStylesheet(  );
        else{
            __pystate.leave();
            this->::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet(  );
        }
    }
    
    virtual void default_onInitStylesheet(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onPreRender( );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onRender( boost::ref(writer) );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_IdeHelpBox_class(){

    { //::osiris::IdeHelpBox
        typedef ::boost::python::class_< IdeHelpBox_wrapper, ::boost::python::bases< ::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > > >, ::boost::noncopyable > IdeHelpBox_exposer_t;
        IdeHelpBox_exposer_t IdeHelpBox_exposer = IdeHelpBox_exposer_t( "IdeHelpBox", ::boost::python::init< ::osiris::String const &, ::osiris::String const & >(( ::boost::python::arg("text"), ::boost::python::arg("helpID") )) );
        ::boost::python::scope IdeHelpBox_scope( IdeHelpBox_exposer );
        { //::osiris::IdeHelpBox::getText
        
            typedef boost::python::object ( *getText_function_type )( ::osiris::IdeHelpBox const & );
            
            IdeHelpBox_exposer.def( 
                "getText"
                , getText_function_type( &IdeHelpBox_wrapper::getText ) );
        
        }
        { //::osiris::IdeHelpBox::getHelpID
        
            typedef boost::python::object ( *getHelpID_function_type )( ::osiris::IdeHelpBox const & );
            
            IdeHelpBox_exposer.def( 
                "getHelpID"
                , getHelpID_function_type( &IdeHelpBox_wrapper::getHelpID ) );
        
        }
        { //::osiris::IdeHelpBox::getTemplatePath
        
            typedef ::osiris::String ( ::osiris::IdeHelpBox::*getTemplatePath_function_type )(  ) ;
            typedef ::osiris::String ( IdeHelpBox_wrapper::*default_getTemplatePath_function_type )(  ) ;
            
            IdeHelpBox_exposer.def( 
                "getTemplatePath"
                , getTemplatePath_function_type(&::osiris::IdeHelpBox::getTemplatePath)
                , default_getTemplatePath_function_type(&IdeHelpBox_wrapper::default_getTemplatePath) );
        
        }
        { //::osiris::IdeHelpBox::onInit
        
            typedef void ( IdeHelpBox_wrapper::*onInit_function_type )(  ) ;
            
            IdeHelpBox_exposer.def( 
                "onInit"
                , onInit_function_type( &IdeHelpBox_wrapper::default_onInit ) );
        
        }
        { //::osiris::IdeHelpBox::setHelpID
        
            typedef void ( *setHelpID_function_type )( ::osiris::IdeHelpBox &,::osiris::String const & );
            
            IdeHelpBox_exposer.def( 
                "setHelpID"
                , setHelpID_function_type( &IdeHelpBox_wrapper::setHelpID )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("helpID") ) );
        
        }
        { //::osiris::IdeHelpBox::setText
        
            typedef void ( *setText_function_type )( ::osiris::IdeHelpBox &,::osiris::String const & );
            
            IdeHelpBox_exposer.def( 
                "setText"
                , setText_function_type( &IdeHelpBox_wrapper::setText )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("text") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( IdeHelpBox_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            IdeHelpBox_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &IdeHelpBox_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( IdeHelpBox_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            IdeHelpBox_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &IdeHelpBox_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::IHtmlControl::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( IdeHelpBox_wrapper::*default_getSession_function_type )(  ) const;
            
            IdeHelpBox_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::IHtmlControl::getSession)
                , default_getSession_function_type(&IdeHelpBox_wrapper::default_getSession) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( IdeHelpBox_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            IdeHelpBox_exposer.def( 
                "onEvent"
                , onEvent_function_type( &IdeHelpBox_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IXSLRenderer< osiris::IPageControl< osiris::IHtmlControl > >::onInitStylesheet
        
            typedef ::osiris::IdeHelpBox exported_class_t;
            typedef void ( IdeHelpBox_wrapper::*onInitStylesheet_function_type )(  ) ;
            
            IdeHelpBox_exposer.def( 
                "onInitStylesheet"
                , onInitStylesheet_function_type( &IdeHelpBox_wrapper::default_onInitStylesheet ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( IdeHelpBox_wrapper::*onLoad_function_type )(  ) ;
            
            IdeHelpBox_exposer.def( 
                "onLoad"
                , onLoad_function_type( &IdeHelpBox_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( IdeHelpBox_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            IdeHelpBox_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &IdeHelpBox_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::onPreRender
        
            typedef void ( IdeHelpBox_wrapper::*onPreRender_function_type )(  ) ;
            
            IdeHelpBox_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &IdeHelpBox_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::IHtmlControl::onRender
        
            typedef void ( IdeHelpBox_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeHelpBox_exposer.def( 
                "onRender"
                , onRender_function_type( &IdeHelpBox_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( IdeHelpBox_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IdeHelpBox_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &IdeHelpBox_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IdeHelpBox_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeHelpBox_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&IdeHelpBox_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IdeHelpBox_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            IdeHelpBox_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&IdeHelpBox_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( IdeHelpBox_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IdeHelpBox_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &IdeHelpBox_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "text"[fget=::osiris::IdeHelpBox::getText, fset=::osiris::IdeHelpBox::setText]
        
            typedef ::osiris::String const & ( ::osiris::IdeHelpBox::*fget )(  ) const;
            typedef void ( ::osiris::IdeHelpBox::*fset )( ::osiris::String const & ) ;
            
            IdeHelpBox_exposer.add_property( 
                "text"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeHelpBox::getText )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeHelpBox::setText )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeHelpBox::getText() const [member function]\" and \"void osiris::IdeHelpBox::setText(osiris::String const & text) [member function]\"" );
        
        }
        { //property "helpID"[fget=::osiris::IdeHelpBox::getHelpID, fset=::osiris::IdeHelpBox::setHelpID]
        
            typedef ::osiris::String const & ( ::osiris::IdeHelpBox::*fget )(  ) const;
            typedef void ( ::osiris::IdeHelpBox::*fset )( ::osiris::String const & ) ;
            
            IdeHelpBox_exposer.add_property( 
                "helpID"
                , ::boost::python::make_function( 
                      fget( &::osiris::IdeHelpBox::getHelpID )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::IdeHelpBox::setHelpID )
                , "get\\set property, built on top of \"osiris::String const & osiris::IdeHelpBox::getHelpID() const [member function]\" and \"void osiris::IdeHelpBox::setHelpID(osiris::String const & helpID) [member function]\"" );
        
        }
    }

}
