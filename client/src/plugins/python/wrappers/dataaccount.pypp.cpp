// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "dataaccount.h"
#include "dataaccount.pypp.hpp"

namespace bp = boost::python;

struct DataAccount_wrapper : ::osiris::DataAccount, ::osiris::PythonWrapper< ::osiris::DataAccount > {

    DataAccount_wrapper( )
    : ::osiris::DataAccount( )
      , ::osiris::PythonWrapper< ::osiris::DataAccount >(){
        // null constructor
    
    }

    static boost::python::object hasAutologin( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasAutologin();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSkinID( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::UniqueID result = inst.getSkinID();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasSkinID( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasSkinID();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLanguage( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getLanguage();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasLanguage( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasLanguage();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTimeOffset( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::int32 result = inst.getTimeOffset();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTimeDST( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::int32 result = inst.getTimeDST();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getViewMode( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DataViewMode result = inst.getViewMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setOption( ::osiris::DataAccount & inst, ::osiris::String const & name, ::osiris::DataItem const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOption(name, value);
        __pythreadSaver.restore();
    }

    static boost::python::object encodeKeys( ::osiris::DataAccount & inst, ::osiris::String const & password, ::osiris::Buffer const & public_key, ::osiris::Buffer const & private_key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.encodeKeys(password, public_key, private_key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object decodePublicKey( ::osiris::DataAccount const & inst, ::osiris::String const & password, ::osiris::Buffer & public_key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.decodePublicKey(password, public_key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object decodePrivateKey( ::osiris::DataAccount const & inst, ::osiris::String const & password, ::osiris::Buffer & private_key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.decodePrivateKey(password, private_key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object encodePasswordInSecretResponse( ::osiris::DataAccount & inst, ::osiris::String const & password, ::osiris::String const & secret_response ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.encodePasswordInSecretResponse(password, secret_response);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object decodePasswordFromSecretResponse( ::osiris::DataAccount & inst, ::osiris::String const & secret_response, ::osiris::String & password ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.decodePasswordFromSecretResponse(secret_response, password);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object exportXML( ::osiris::DataAccount const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::XMLDocument> result = inst.exportXML();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String getTableName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTableName = this->get_override( "getTableName" ) )
            return func_getTableName(  );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::getTableName(  );
        }
    }
    
    ::osiris::String default_getTableName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::getTableName( );
    }

    virtual ::osiris::String getRecordKeyName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getRecordKeyName = this->get_override( "getRecordKeyName" ) )
            return func_getRecordKeyName(  );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::getRecordKeyName(  );
        }
    }
    
    ::osiris::String default_getRecordKeyName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::getRecordKeyName( );
    }

    virtual ::osiris::String getRecordKeyValue(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getRecordKeyValue = this->get_override( "getRecordKeyValue" ) )
            return func_getRecordKeyValue(  );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::getRecordKeyValue(  );
        }
    }
    
    ::osiris::String default_getRecordKeyValue(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::getRecordKeyValue( );
    }

    static boost::python::object encodePassword( ::osiris::DataAccount const & inst, ::osiris::String const & password ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.encodePassword(password);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOption( ::osiris::DataAccount const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DataItem result = inst.getOption(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getReferenceUser( ::osiris::Buffer const & public_key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::UniqueID result = ::osiris::DataAccount::getReferenceUser(public_key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUserID( ::osiris::DataAccount const & inst, ::osiris::UniqueID & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getUserID(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object importXML( ::osiris::DataAccount & inst, ::boost::shared_ptr< osiris::XMLDocument > document ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.importXML(document);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool onRead( ::osiris::DataTableRow const & row ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRead = this->get_override( "onRead" ) )
            return func_onRead( boost::ref(row) );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::onRead( boost::ref(row) );
        }
    }
    
    virtual bool default_onRead( ::osiris::DataTableRow const & row ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::onRead( boost::ref(row) );
    }

    virtual bool onWrite( ::osiris::DbSqlValues & values ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onWrite = this->get_override( "onWrite" ) )
            return func_onWrite( boost::ref(values) );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::onWrite( boost::ref(values) );
        }
    }
    
    virtual bool default_onWrite( ::osiris::DbSqlValues & values ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::onWrite( boost::ref(values) );
    }

    static void setLanguage( ::osiris::DataAccount & inst, ::osiris::String const & language ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLanguage(language);
        __pythreadSaver.restore();
    }

    static void setSkinID( ::osiris::DataAccount & inst, ::osiris::UniqueID const & skinID ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSkinID(skinID);
        __pythreadSaver.restore();
    }

    static void setTimeDST( ::osiris::DataAccount & inst, ::osiris::int32 value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTimeDST(value);
        __pythreadSaver.restore();
    }

    static void setTimeOffset( ::osiris::DataAccount & inst, ::osiris::int32 value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setTimeOffset(value);
        __pythreadSaver.restore();
    }

    static void setViewMode( ::osiris::DataAccount & inst, ::osiris::DataViewMode mode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setViewMode(mode);
        __pythreadSaver.restore();
    }

    virtual bool validate( ::boost::shared_ptr< osiris::IPortalDatabase > database ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_validate = this->get_override( "validate" ) )
            return func_validate( database );
        else{
            __pystate.leave();
            return this->::osiris::DataAccount::validate( database );
        }
    }
    
    bool default_validate( ::boost::shared_ptr< osiris::IPortalDatabase > database ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::DataAccount::validate( database );
    }

    static boost::python::object validatePassword( ::osiris::DataAccount const & inst, ::osiris::String const & password ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.validatePassword(password);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_DataAccount_class(){

    { //::osiris::DataAccount
        typedef ::boost::python::class_< DataAccount_wrapper, ::boost::noncopyable > DataAccount_exposer_t;
        DataAccount_exposer_t DataAccount_exposer = DataAccount_exposer_t( "DataAccount", ::boost::python::init< >() );
        ::boost::python::scope DataAccount_scope( DataAccount_exposer );
        ::boost::python::class_< ::osiris::DataAccount::options >( "options" )    
            .def_readonly( "language", ::osiris::DataAccount::options::language )    
            .def_readonly( "skin_id", ::osiris::DataAccount::options::skin_id )    
            .def_readonly( "time_dst", ::osiris::DataAccount::options::time_dst )    
            .def_readonly( "time_offset", ::osiris::DataAccount::options::time_offset )    
            .def_readonly( "view_mode", ::osiris::DataAccount::options::view_mode );
        { //::osiris::DataAccount::hasAutologin
        
            typedef boost::python::object ( *hasAutologin_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "hasAutologin"
                , hasAutologin_function_type( &DataAccount_wrapper::hasAutologin ) );
        
        }
        { //::osiris::DataAccount::getSkinID
        
            typedef boost::python::object ( *getSkinID_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "getSkinID"
                , getSkinID_function_type( &DataAccount_wrapper::getSkinID ) );
        
        }
        { //::osiris::DataAccount::hasSkinID
        
            typedef boost::python::object ( *hasSkinID_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "hasSkinID"
                , hasSkinID_function_type( &DataAccount_wrapper::hasSkinID ) );
        
        }
        { //::osiris::DataAccount::getLanguage
        
            typedef boost::python::object ( *getLanguage_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "getLanguage"
                , getLanguage_function_type( &DataAccount_wrapper::getLanguage ) );
        
        }
        { //::osiris::DataAccount::hasLanguage
        
            typedef boost::python::object ( *hasLanguage_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "hasLanguage"
                , hasLanguage_function_type( &DataAccount_wrapper::hasLanguage ) );
        
        }
        { //::osiris::DataAccount::getTimeOffset
        
            typedef boost::python::object ( *getTimeOffset_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "getTimeOffset"
                , getTimeOffset_function_type( &DataAccount_wrapper::getTimeOffset ) );
        
        }
        { //::osiris::DataAccount::getTimeDST
        
            typedef boost::python::object ( *getTimeDST_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "getTimeDST"
                , getTimeDST_function_type( &DataAccount_wrapper::getTimeDST ) );
        
        }
        { //::osiris::DataAccount::getViewMode
        
            typedef boost::python::object ( *getViewMode_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "getViewMode"
                , getViewMode_function_type( &DataAccount_wrapper::getViewMode ) );
        
        }
        { //::osiris::DataAccount::setOption
        
            typedef void ( *setOption_function_type )( ::osiris::DataAccount &,::osiris::String const &,::osiris::DataItem const & );
            
            DataAccount_exposer.def( 
                "setOption"
                , setOption_function_type( &DataAccount_wrapper::setOption )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::DataAccount::encodeKeys
        
            typedef boost::python::object ( *encodeKeys_function_type )( ::osiris::DataAccount &,::osiris::String const &,::osiris::Buffer const &,::osiris::Buffer const & );
            
            DataAccount_exposer.def( 
                "encodeKeys"
                , encodeKeys_function_type( &DataAccount_wrapper::encodeKeys )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password"), ::boost::python::arg("public_key"), ::boost::python::arg("private_key") ) );
        
        }
        { //::osiris::DataAccount::decodePublicKey
        
            typedef boost::python::object ( *decodePublicKey_function_type )( ::osiris::DataAccount const &,::osiris::String const &,::osiris::Buffer & );
            
            DataAccount_exposer.def( 
                "decodePublicKey"
                , decodePublicKey_function_type( &DataAccount_wrapper::decodePublicKey )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password"), ::boost::python::arg("public_key") ) );
        
        }
        { //::osiris::DataAccount::decodePrivateKey
        
            typedef boost::python::object ( *decodePrivateKey_function_type )( ::osiris::DataAccount const &,::osiris::String const &,::osiris::Buffer & );
            
            DataAccount_exposer.def( 
                "decodePrivateKey"
                , decodePrivateKey_function_type( &DataAccount_wrapper::decodePrivateKey )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password"), ::boost::python::arg("private_key") ) );
        
        }
        { //::osiris::DataAccount::encodePasswordInSecretResponse
        
            typedef boost::python::object ( *encodePasswordInSecretResponse_function_type )( ::osiris::DataAccount &,::osiris::String const &,::osiris::String const & );
            
            DataAccount_exposer.def( 
                "encodePasswordInSecretResponse"
                , encodePasswordInSecretResponse_function_type( &DataAccount_wrapper::encodePasswordInSecretResponse )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password"), ::boost::python::arg("secret_response") ) );
        
        }
        { //::osiris::DataAccount::decodePasswordFromSecretResponse
        
            typedef boost::python::object ( *decodePasswordFromSecretResponse_function_type )( ::osiris::DataAccount &,::osiris::String const &,::osiris::String & );
            
            DataAccount_exposer.def( 
                "decodePasswordFromSecretResponse"
                , decodePasswordFromSecretResponse_function_type( &DataAccount_wrapper::decodePasswordFromSecretResponse )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("secret_response"), ::boost::python::arg("password") ) );
        
        }
        { //::osiris::DataAccount::exportXML
        
            typedef boost::python::object ( *exportXML_function_type )( ::osiris::DataAccount const & );
            
            DataAccount_exposer.def( 
                "exportXML"
                , exportXML_function_type( &DataAccount_wrapper::exportXML ) );
        
        }
        { //::osiris::DataAccount::getTableName
        
            typedef ::osiris::String ( ::osiris::DataAccount::*getTableName_function_type )(  ) const;
            typedef ::osiris::String ( DataAccount_wrapper::*default_getTableName_function_type )(  ) const;
            
            DataAccount_exposer.def( 
                "getTableName"
                , getTableName_function_type(&::osiris::DataAccount::getTableName)
                , default_getTableName_function_type(&DataAccount_wrapper::default_getTableName) );
        
        }
        { //::osiris::DataAccount::getRecordKeyName
        
            typedef ::osiris::String ( ::osiris::DataAccount::*getRecordKeyName_function_type )(  ) const;
            typedef ::osiris::String ( DataAccount_wrapper::*default_getRecordKeyName_function_type )(  ) const;
            
            DataAccount_exposer.def( 
                "getRecordKeyName"
                , getRecordKeyName_function_type(&::osiris::DataAccount::getRecordKeyName)
                , default_getRecordKeyName_function_type(&DataAccount_wrapper::default_getRecordKeyName) );
        
        }
        { //::osiris::DataAccount::getRecordKeyValue
        
            typedef ::osiris::String ( ::osiris::DataAccount::*getRecordKeyValue_function_type )(  ) const;
            typedef ::osiris::String ( DataAccount_wrapper::*default_getRecordKeyValue_function_type )(  ) const;
            
            DataAccount_exposer.def( 
                "getRecordKeyValue"
                , getRecordKeyValue_function_type(&::osiris::DataAccount::getRecordKeyValue)
                , default_getRecordKeyValue_function_type(&DataAccount_wrapper::default_getRecordKeyValue) );
        
        }
        { //::osiris::DataAccount::encodePassword
        
            typedef boost::python::object ( *encodePassword_function_type )( ::osiris::DataAccount const &,::osiris::String const & );
            
            DataAccount_exposer.def( 
                "encodePassword"
                , encodePassword_function_type( &DataAccount_wrapper::encodePassword )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password") ) );
        
        }
        { //::osiris::DataAccount::getOption
        
            typedef boost::python::object ( *getOption_function_type )( ::osiris::DataAccount const &,::osiris::String const & );
            
            DataAccount_exposer.def( 
                "getOption"
                , getOption_function_type( &DataAccount_wrapper::getOption )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::DataAccount::getReferenceUser
        
            typedef boost::python::object ( *getReferenceUser_function_type )( ::osiris::Buffer const & );
            
            DataAccount_exposer.def( 
                "getReferenceUser"
                , getReferenceUser_function_type( &DataAccount_wrapper::getReferenceUser )
                , ( ::boost::python::arg("public_key") ) );
        
        }
        { //::osiris::DataAccount::getUserID
        
            typedef boost::python::object ( *getUserID_function_type )( ::osiris::DataAccount const &,::osiris::UniqueID & );
            
            DataAccount_exposer.def( 
                "getUserID"
                , getUserID_function_type( &DataAccount_wrapper::getUserID )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::DataAccount::importXML
        
            typedef boost::python::object ( *importXML_function_type )( ::osiris::DataAccount &,::boost::shared_ptr<osiris::XMLDocument> );
            
            DataAccount_exposer.def( 
                "importXML"
                , importXML_function_type( &DataAccount_wrapper::importXML )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("document") ) );
        
        }
        { //::osiris::DataAccount::onRead
        
            typedef bool ( DataAccount_wrapper::*onRead_function_type )( ::osiris::DataTableRow const & ) ;
            
            DataAccount_exposer.def( 
                "onRead"
                , onRead_function_type( &DataAccount_wrapper::default_onRead )
                , ( ::boost::python::arg("row") ) );
        
        }
        { //::osiris::DataAccount::onWrite
        
            typedef bool ( DataAccount_wrapper::*onWrite_function_type )( ::osiris::DbSqlValues & ) const;
            
            DataAccount_exposer.def( 
                "onWrite"
                , onWrite_function_type( &DataAccount_wrapper::default_onWrite )
                , ( ::boost::python::arg("values") ) );
        
        }
        { //::osiris::DataAccount::setLanguage
        
            typedef void ( *setLanguage_function_type )( ::osiris::DataAccount &,::osiris::String const & );
            
            DataAccount_exposer.def( 
                "setLanguage"
                , setLanguage_function_type( &DataAccount_wrapper::setLanguage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("language") ) );
        
        }
        { //::osiris::DataAccount::setSkinID
        
            typedef void ( *setSkinID_function_type )( ::osiris::DataAccount &,::osiris::UniqueID const & );
            
            DataAccount_exposer.def( 
                "setSkinID"
                , setSkinID_function_type( &DataAccount_wrapper::setSkinID )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("skinID") ) );
        
        }
        { //::osiris::DataAccount::setTimeDST
        
            typedef void ( *setTimeDST_function_type )( ::osiris::DataAccount &,::osiris::int32 );
            
            DataAccount_exposer.def( 
                "setTimeDST"
                , setTimeDST_function_type( &DataAccount_wrapper::setTimeDST )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::DataAccount::setTimeOffset
        
            typedef void ( *setTimeOffset_function_type )( ::osiris::DataAccount &,::osiris::int32 );
            
            DataAccount_exposer.def( 
                "setTimeOffset"
                , setTimeOffset_function_type( &DataAccount_wrapper::setTimeOffset )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::DataAccount::setViewMode
        
            typedef void ( *setViewMode_function_type )( ::osiris::DataAccount &,::osiris::DataViewMode );
            
            DataAccount_exposer.def( 
                "setViewMode"
                , setViewMode_function_type( &DataAccount_wrapper::setViewMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("mode") ) );
        
        }
        { //::osiris::DataAccount::validate
        
            typedef bool ( ::osiris::DataAccount::*validate_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase > ) const;
            typedef bool ( DataAccount_wrapper::*default_validate_function_type )( ::boost::shared_ptr< osiris::IPortalDatabase > ) const;
            
            DataAccount_exposer.def( 
                "validate"
                , validate_function_type(&::osiris::DataAccount::validate)
                , default_validate_function_type(&DataAccount_wrapper::default_validate)
                , ( ::boost::python::arg("database") ) );
        
        }
        { //::osiris::DataAccount::validatePassword
        
            typedef boost::python::object ( *validatePassword_function_type )( ::osiris::DataAccount const &,::osiris::String const & );
            
            DataAccount_exposer.def( 
                "validatePassword"
                , validatePassword_function_type( &DataAccount_wrapper::validatePassword )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("password") ) );
        
        }
        DataAccount_exposer.def_readwrite( "description", &::osiris::DataAccount::description );
        DataAccount_exposer.def_readwrite( "id", &::osiris::DataAccount::id );
        DataAccount_exposer.def_readwrite( "last_access_date", &::osiris::DataAccount::last_access_date );
        DataAccount_exposer.def_readwrite( "password", &::osiris::DataAccount::password );
        DataAccount_exposer.def_readwrite( "private_key", &::osiris::DataAccount::private_key );
        DataAccount_exposer.def_readwrite( "public_key", &::osiris::DataAccount::public_key );
        DataAccount_exposer.def_readwrite( "real_password", &::osiris::DataAccount::real_password );
        DataAccount_exposer.def_readwrite( "reference_date", &::osiris::DataAccount::reference_date );
        DataAccount_exposer.def_readwrite( "secret_question", &::osiris::DataAccount::secret_question );
        DataAccount_exposer.def_readwrite( "secret_response", &::osiris::DataAccount::secret_response );
        DataAccount_exposer.def_readwrite( "username", &::osiris::DataAccount::username );
        DataAccount_exposer.staticmethod( "getReferenceUser" );
        { //property "skinID"[fget=::osiris::DataAccount::getSkinID, fset=::osiris::DataAccount::setSkinID]
        
            typedef ::osiris::UniqueID ( ::osiris::DataAccount::*fget )(  ) const;
            typedef void ( ::osiris::DataAccount::*fset )( ::osiris::UniqueID const & ) ;
            
            DataAccount_exposer.add_property( 
                "skinID"
                , fget( &::osiris::DataAccount::getSkinID )
                , fset( &::osiris::DataAccount::setSkinID )
                , "get\\set property, built on top of \"osiris::UniqueID osiris::DataAccount::getSkinID() const [member function]\" and \"void osiris::DataAccount::setSkinID(osiris::UniqueID const & skinID) [member function]\"" );
        
        }
        { //property "language"[fget=::osiris::DataAccount::getLanguage, fset=::osiris::DataAccount::setLanguage]
        
            typedef ::osiris::String ( ::osiris::DataAccount::*fget )(  ) const;
            typedef void ( ::osiris::DataAccount::*fset )( ::osiris::String const & ) ;
            
            DataAccount_exposer.add_property( 
                "language"
                , fget( &::osiris::DataAccount::getLanguage )
                , fset( &::osiris::DataAccount::setLanguage )
                , "get\\set property, built on top of \"osiris::String osiris::DataAccount::getLanguage() const [member function]\" and \"void osiris::DataAccount::setLanguage(osiris::String const & language) [member function]\"" );
        
        }
        { //property "timeOffset"[fget=::osiris::DataAccount::getTimeOffset, fset=::osiris::DataAccount::setTimeOffset]
        
            typedef ::osiris::int32 ( ::osiris::DataAccount::*fget )(  ) const;
            typedef void ( ::osiris::DataAccount::*fset )( ::osiris::int32 ) ;
            
            DataAccount_exposer.add_property( 
                "timeOffset"
                , fget( &::osiris::DataAccount::getTimeOffset )
                , fset( &::osiris::DataAccount::setTimeOffset )
                , "get\\set property, built on top of \"osiris::int32 osiris::DataAccount::getTimeOffset() const [member function]\" and \"void osiris::DataAccount::setTimeOffset(osiris::int32 value) [member function]\"" );
        
        }
        { //property "timeDST"[fget=::osiris::DataAccount::getTimeDST, fset=::osiris::DataAccount::setTimeDST]
        
            typedef ::osiris::int32 ( ::osiris::DataAccount::*fget )(  ) const;
            typedef void ( ::osiris::DataAccount::*fset )( ::osiris::int32 ) ;
            
            DataAccount_exposer.add_property( 
                "timeDST"
                , fget( &::osiris::DataAccount::getTimeDST )
                , fset( &::osiris::DataAccount::setTimeDST )
                , "get\\set property, built on top of \"osiris::int32 osiris::DataAccount::getTimeDST() const [member function]\" and \"void osiris::DataAccount::setTimeDST(osiris::int32 value) [member function]\"" );
        
        }
        { //property "viewMode"[fget=::osiris::DataAccount::getViewMode, fset=::osiris::DataAccount::setViewMode]
        
            typedef ::osiris::DataViewMode ( ::osiris::DataAccount::*fget )(  ) const;
            typedef void ( ::osiris::DataAccount::*fset )( ::osiris::DataViewMode ) ;
            
            DataAccount_exposer.add_property( 
                "viewMode"
                , fget( &::osiris::DataAccount::getViewMode )
                , fset( &::osiris::DataAccount::setViewMode )
                , "get\\set property, built on top of \"osiris::DataViewMode osiris::DataAccount::getViewMode() const [member function]\" and \"void osiris::DataAccount::setViewMode(osiris::DataViewMode mode) [member function]\"" );
        
        }
        { //property "tableName"[fget=::osiris::DataAccount::getTableName]
        
            typedef ::osiris::String ( ::osiris::DataAccount::*fget )(  ) const;
            
            DataAccount_exposer.add_property( 
                "tableName"
                , fget( &::osiris::DataAccount::getTableName )
                , "get property, built on top of \"osiris::String osiris::DataAccount::getTableName() const [member function]\"" );
        
        }
        { //property "recordKeyName"[fget=::osiris::DataAccount::getRecordKeyName]
        
            typedef ::osiris::String ( ::osiris::DataAccount::*fget )(  ) const;
            
            DataAccount_exposer.add_property( 
                "recordKeyName"
                , fget( &::osiris::DataAccount::getRecordKeyName )
                , "get property, built on top of \"osiris::String osiris::DataAccount::getRecordKeyName() const [member function]\"" );
        
        }
        { //property "recordKeyValue"[fget=::osiris::DataAccount::getRecordKeyValue]
        
            typedef ::osiris::String ( ::osiris::DataAccount::*fget )(  ) const;
            
            DataAccount_exposer.add_property( 
                "recordKeyValue"
                , fget( &::osiris::DataAccount::getRecordKeyValue )
                , "get property, built on top of \"osiris::String osiris::DataAccount::getRecordKeyValue() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::DataAccount > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::DataAccount >, boost::shared_ptr< ::osiris::DataIRecord > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::DataAccount >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::DataAccount >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::DataIRecord > > >();
    }

}
