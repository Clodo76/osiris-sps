// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "ixmlfunction.h"
#include "ixmlfunction.pypp.hpp"

namespace bp = boost::python;

struct IXMLFunction_wrapper : ::osiris::IXMLFunction, ::osiris::PythonWrapper< ::osiris::IXMLFunction > {

    struct IContext_wrapper : ::osiris::IXMLFunction::IContext, ::osiris::PythonWrapper< ::osiris::IXMLFunction::IContext > {
    
        IContext_wrapper(::boost::shared_ptr< osiris::IXMLFunction > function )
        : ::osiris::IXMLFunction::IContext( function )
          , ::osiris::PythonWrapper< ::osiris::IXMLFunction::IContext >(){
            // constructor
        
        }
    
        static boost::python::object getErrors( ::osiris::IXMLFunction::IContext const & inst ){
            ::osiris::PythonThreadSaver __pythreadSaver;
            ::osiris::uint32 const & result = inst.getErrors();
            __pythreadSaver.restore();
            typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
            return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::uint32 const & >( result ) );
        }
    
        static void reportError( ::osiris::IXMLFunction::IContext & inst, ::osiris::String const & message=(osiris::String::EMPTY) ){
            ::osiris::PythonThreadSaver __pythreadSaver;
            inst.reportError(message);
            __pythreadSaver.restore();
        }
    
        virtual void onError( ::osiris::String const & error ) const {
            ::osiris::PythonState __pystate(getPythonThreadState());
            ::osiris::PythonOverride func_onError = this->get_override( "onError" );
            func_onError( boost::ref(error) );
        }
    
    };

    IXMLFunction_wrapper(::osiris::String const & name, ::osiris::String const & ns, ::osiris::uint32 required_args=0, ::osiris::uint32 optionals_args=0 )
    : ::osiris::IXMLFunction( boost::ref(name), boost::ref(ns), required_args, optionals_args )
      , ::osiris::PythonWrapper< ::osiris::IXMLFunction >(){
        // constructor
    
    }

    static boost::python::object getNamespace( ::osiris::IXMLFunction const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getNamespace();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getName( ::osiris::IXMLFunction const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getName();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object requiredArgs( ::osiris::IXMLFunction const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.requiredArgs();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object totalArgs( ::osiris::IXMLFunction const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.totalArgs();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool execute( ::osiris::IXMLFunction::IContext & context, ::std::vector<osiris::DataItem,osiris::StdAllocator<osiris::DataItem, osiris::SysAllocator<osiris::DataItem> > > const & args, ::osiris::DataItem & result ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_execute = this->get_override( "execute" );
        return func_execute( boost::ref(context), boost::ref(args), boost::ref(result) );
    }

};

void register_IXMLFunction_class(){

    { //::osiris::IXMLFunction
        typedef ::boost::python::class_< IXMLFunction_wrapper, ::boost::noncopyable > IXMLFunction_exposer_t;
        IXMLFunction_exposer_t IXMLFunction_exposer = IXMLFunction_exposer_t( "IXMLFunction", ::boost::python::init< ::osiris::String const &, ::osiris::String const &, ::boost::python::optional< ::osiris::uint32, ::osiris::uint32 > >(( ::boost::python::arg("name"), ::boost::python::arg("ns"), ::boost::python::arg("required_args")=(::osiris::uint32)(0), ::boost::python::arg("optionals_args")=(::osiris::uint32)(0) )) );
        ::boost::python::scope IXMLFunction_scope( IXMLFunction_exposer );
        { //::osiris::IXMLFunction::IContext
            typedef ::boost::python::class_< IXMLFunction_wrapper::IContext_wrapper, ::boost::noncopyable > IContext_exposer_t;
            IContext_exposer_t IContext_exposer = IContext_exposer_t( "IContext", ::boost::python::init< ::boost::shared_ptr< osiris::IXMLFunction > >(( ::boost::python::arg("function") )) );
            ::boost::python::scope IContext_scope( IContext_exposer );
            { //::osiris::IXMLFunction::IContext::getErrors
            
                typedef boost::python::object ( *getErrors_function_type )( ::osiris::IXMLFunction::IContext const & );
                
                IContext_exposer.def( 
                    "getErrors"
                    , getErrors_function_type( &IXMLFunction_wrapper::IContext_wrapper::getErrors ) );
            
            }
            { //::osiris::IXMLFunction::IContext::reportError
            
                typedef void ( *reportError_function_type )( ::osiris::IXMLFunction::IContext &,::osiris::String const & );
                
                IContext_exposer.def( 
                    "reportError"
                    , reportError_function_type( &IXMLFunction_wrapper::IContext_wrapper::reportError )
                    , ( ::boost::python::arg("inst"), ::boost::python::arg("message")=(osiris::String::EMPTY) ) );
            
            }
            { //::osiris::IXMLFunction::IContext::onError
            
                typedef void ( IXMLFunction_wrapper::IContext_wrapper::*onError_function_type )( ::osiris::String const & ) const;
                
                IContext_exposer.def( 
                    "onError"
                    , onError_function_type( &IXMLFunction_wrapper::IContext_wrapper::onError )
                    , ( ::boost::python::arg("error") ) );
            
            }
            { //property "errors"[fget=::osiris::IXMLFunction::IContext::getErrors]
            
                typedef ::osiris::uint32 const & ( ::osiris::IXMLFunction::IContext::*fget )(  ) const;
                
                IContext_exposer.add_property( 
                    "errors"
                    , ::boost::python::make_function( 
                          fget( &::osiris::IXMLFunction::IContext::getErrors )
                        , bp::return_value_policy< bp::copy_const_reference >() ) 
                    , "get property, built on top of \"osiris::uint32 const & osiris::IXMLFunction::IContext::getErrors() const [member function]\"" );
            
            }
        }
        { //::osiris::IXMLFunction::getNamespace
        
            typedef boost::python::object ( *getNamespace_function_type )( ::osiris::IXMLFunction const & );
            
            IXMLFunction_exposer.def( 
                "getNamespace"
                , getNamespace_function_type( &IXMLFunction_wrapper::getNamespace ) );
        
        }
        { //::osiris::IXMLFunction::getName
        
            typedef boost::python::object ( *getName_function_type )( ::osiris::IXMLFunction const & );
            
            IXMLFunction_exposer.def( 
                "getName"
                , getName_function_type( &IXMLFunction_wrapper::getName ) );
        
        }
        { //::osiris::IXMLFunction::requiredArgs
        
            typedef boost::python::object ( *requiredArgs_function_type )( ::osiris::IXMLFunction const & );
            
            IXMLFunction_exposer.def( 
                "requiredArgs"
                , requiredArgs_function_type( &IXMLFunction_wrapper::requiredArgs ) );
        
        }
        { //::osiris::IXMLFunction::totalArgs
        
            typedef boost::python::object ( *totalArgs_function_type )( ::osiris::IXMLFunction const & );
            
            IXMLFunction_exposer.def( 
                "totalArgs"
                , totalArgs_function_type( &IXMLFunction_wrapper::totalArgs ) );
        
        }
        { //::osiris::IXMLFunction::execute
        
            typedef bool ( ::osiris::IXMLFunction::*execute_function_type )( ::osiris::IXMLFunction::IContext &,::std::vector<osiris::DataItem,osiris::StdAllocator<osiris::DataItem, osiris::SysAllocator<osiris::DataItem> > > const &,::osiris::DataItem & ) ;
            
            IXMLFunction_exposer.def( 
                "execute"
                , ( execute_function_type(&::osiris::IXMLFunction::execute) )
                , ( ::boost::python::arg("context"), ::boost::python::arg("args"), ::boost::python::arg("result") ) );
        
        }
        { //property "namespace"[fget=::osiris::IXMLFunction::getNamespace]
        
            typedef ::osiris::String const & ( ::osiris::IXMLFunction::*fget )(  ) const;
            
            IXMLFunction_exposer.add_property( 
                "namespace"
                , ::boost::python::make_function( 
                      fget( &::osiris::IXMLFunction::getNamespace )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::String const & osiris::IXMLFunction::getNamespace() const [member function]\"" );
        
        }
        { //property "name"[fget=::osiris::IXMLFunction::getName]
        
            typedef ::osiris::String const & ( ::osiris::IXMLFunction::*fget )(  ) const;
            
            IXMLFunction_exposer.add_property( 
                "name"
                , ::boost::python::make_function( 
                      fget( &::osiris::IXMLFunction::getName )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::String const & osiris::IXMLFunction::getName() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IXMLFunction > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IXMLFunction >, boost::shared_ptr< ::osiris::Object > >();
    }

}
