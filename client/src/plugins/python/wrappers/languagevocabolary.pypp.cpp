// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "languagevocabolary.h"
#include "languagevocabolary.pypp.hpp"

namespace bp = boost::python;

struct LanguageVocabolary_wrapper : ::osiris::LanguageVocabolary, ::osiris::PythonWrapper< ::osiris::LanguageVocabolary > {

    LanguageVocabolary_wrapper(::osiris::LanguageVocabolary const & arg )
    : ::osiris::LanguageVocabolary( arg )
      , ::osiris::PythonWrapper< ::osiris::LanguageVocabolary >(){
        // copy constructor
        
    }

    LanguageVocabolary_wrapper( )
    : ::osiris::LanguageVocabolary( )
      , ::osiris::PythonWrapper< ::osiris::LanguageVocabolary >(){
        // null constructor
    
    }

    static void setText( ::osiris::LanguageVocabolary & inst, ::osiris::String const & name, ::osiris::String const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setText(name, value);
        __pythreadSaver.restore();
    }

    static void clear( ::osiris::LanguageVocabolary & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.clear();
        __pythreadSaver.restore();
    }

    static void add( ::osiris::LanguageVocabolary & inst, ::osiris::String const & filename ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.add(filename);
        __pythreadSaver.restore();
    }

    static boost::python::object getText( ::osiris::LanguageVocabolary & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getText(name);
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    virtual void parse( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parse = this->get_override( "parse" ) )
            func_parse( node );
        else{
            __pystate.leave();
            this->::osiris::LanguageVocabolary::parse( node );
        }
    }
    
    virtual void default_parse( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::LanguageVocabolary::parse( node );
    }

};

void register_LanguageVocabolary_class(){

    ::boost::python::class_< LanguageVocabolary_wrapper >( "LanguageVocabolary", ::boost::python::init< >() )    
        .def( 
            "setText"
            , (void (*)( ::osiris::LanguageVocabolary &,::osiris::String const &,::osiris::String const & ))( &LanguageVocabolary_wrapper::setText )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) )    
        .def( 
            "clear"
            , (void (*)( ::osiris::LanguageVocabolary & ))( &LanguageVocabolary_wrapper::clear ) )    
        .def( 
            "add"
            , (void (*)( ::osiris::LanguageVocabolary &,::osiris::String const & ))( &LanguageVocabolary_wrapper::add )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("filename") ) )    
        .def( 
            "getText"
            , (boost::python::object (*)( ::osiris::LanguageVocabolary &,::osiris::String const & ))( &LanguageVocabolary_wrapper::getText )
            , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) )    
        .def( 
            "parse"
            , (void ( LanguageVocabolary_wrapper::* )( ::boost::shared_ptr< osiris::XMLNode > ) )(&LanguageVocabolary_wrapper::default_parse)
            , ( ::boost::python::arg("node") ) );

}
