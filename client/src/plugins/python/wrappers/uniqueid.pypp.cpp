// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "uniqueid.h"
#include "uniqueid.pypp.hpp"

namespace bp = boost::python;

static void clear_9cc3095db3a32f6c229b9e13557ddf56( ::osiris::UniqueID & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    inst.clear();
    __pythreadSaver.restore();
}

static boost::python::object empty_cbab9e0eb3e3d58537423669e40adb6c( ::osiris::UniqueID const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.empty();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object generate_8cb3f1fc7a07d521593576eca38a4000(  ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::UniqueID result = ::osiris::UniqueID::generate();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object getString_568f4080b274aacae64b47860f3d2c4a( ::osiris::UniqueID const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.getString();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object toAscii_2ba1014c7abec545f7fed94f3d03075d( ::osiris::UniqueID const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::string const & result = inst.toAscii();
    __pythreadSaver.restore();
    typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
    return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
}

static boost::python::object toUTF16_18fa920ce4a2914da2f63af1ed94ba06( ::osiris::UniqueID const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.toUTF16();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object toWide_89bd517486da09ff2cc1c6d11c8c1a22( ::osiris::UniqueID const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::std::wstring result = inst.toWide();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object assign_30a2d8cfd48e4f7cbb5e07c24c6073b5( ::osiris::UniqueID & inst, ::std::string const & id ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.assign(id);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object validate_e448ea0a98993e39a1209d46ea66dfac( ::osiris::UniqueID const & inst, bool allow_null ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.validate(allow_null);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

void register_UniqueID_class(){

    { //::osiris::UniqueID
        typedef ::boost::python::class_< ::osiris::UniqueID > UniqueID_exposer_t;
        UniqueID_exposer_t UniqueID_exposer = UniqueID_exposer_t( "UniqueID", ::boost::python::init< >() );
        ::boost::python::scope UniqueID_scope( UniqueID_exposer );
        UniqueID_exposer.def( ::boost::python::init< ::std::string const & >(( ::boost::python::arg("id") )) );
        ::boost::python::implicitly_convertible< ::std::string const &, ::osiris::UniqueID >();
        UniqueID_exposer.def( ::boost::python::init< ::osiris::UniqueID const & >(( ::boost::python::arg("second") )) );
        { //::osiris::UniqueID::clear
        
            typedef void ( *clear_function_type )( ::osiris::UniqueID & );
            
            UniqueID_exposer.def( 
                "clear"
                , clear_function_type( &clear_9cc3095db3a32f6c229b9e13557ddf56 ) );
        
        }
        { //::osiris::UniqueID::empty
        
            typedef boost::python::object ( *empty_function_type )( ::osiris::UniqueID const & );
            
            UniqueID_exposer.def( 
                "empty"
                , empty_function_type( &empty_cbab9e0eb3e3d58537423669e40adb6c ) );
        
        }
        { //::osiris::UniqueID::generate
        
            typedef boost::python::object ( *generate_function_type )(  );
            
            UniqueID_exposer.def( 
                "generate"
                , generate_function_type( &generate_8cb3f1fc7a07d521593576eca38a4000 ) );
        
        }
        { //::osiris::UniqueID::getString
        
            typedef boost::python::object ( *getString_function_type )( ::osiris::UniqueID const & );
            
            UniqueID_exposer.def( 
                "getString"
                , getString_function_type( &getString_568f4080b274aacae64b47860f3d2c4a ) );
        
        }
        { //::osiris::UniqueID::toAscii
        
            typedef boost::python::object ( *toAscii_function_type )( ::osiris::UniqueID const & );
            
            UniqueID_exposer.def( 
                "toAscii"
                , toAscii_function_type( &toAscii_2ba1014c7abec545f7fed94f3d03075d ) );
        
        }
        { //::osiris::UniqueID::toUTF16
        
            typedef boost::python::object ( *toUTF16_function_type )( ::osiris::UniqueID const & );
            
            UniqueID_exposer.def( 
                "toUTF16"
                , toUTF16_function_type( &toUTF16_18fa920ce4a2914da2f63af1ed94ba06 ) );
        
        }
        { //::osiris::UniqueID::toWide
        
            typedef boost::python::object ( *toWide_function_type )( ::osiris::UniqueID const & );
            
            UniqueID_exposer.def( 
                "toWide"
                , toWide_function_type( &toWide_89bd517486da09ff2cc1c6d11c8c1a22 ) );
        
        }
        { //::osiris::UniqueID::assign
        
            typedef boost::python::object ( *assign_function_type )( ::osiris::UniqueID &,::std::string const & );
            
            UniqueID_exposer.def( 
                "assign"
                , assign_function_type( &assign_30a2d8cfd48e4f7cbb5e07c24c6073b5 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::UniqueID::operator=
        
            typedef ::osiris::UniqueID & ( ::osiris::UniqueID::*assign_function_type )( ::std::string const & ) ;
            
            UniqueID_exposer.def( 
                "assign"
                , assign_function_type( &::osiris::UniqueID::operator= )
                , ( ::boost::python::arg("id") )
                , bp::return_self< >() );
        
        }
        { //::osiris::UniqueID::validate
        
            typedef boost::python::object ( *validate_function_type )( ::osiris::UniqueID const &,bool );
            
            UniqueID_exposer.def( 
                "validate"
                , validate_function_type( &validate_e448ea0a98993e39a1209d46ea66dfac )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("allow_null") ) );
        
        }
        UniqueID_exposer.def_readonly( "EMPTY", ::osiris::UniqueID::EMPTY );
        UniqueID_exposer.def_readonly( "SIZE", ::osiris::UniqueID::SIZE );
        UniqueID_exposer.staticmethod( "generate" );
        { //property "string"[fget=::osiris::UniqueID::getString]
        
            typedef ::std::string const & ( ::osiris::UniqueID::*fget )(  ) const;
            
            UniqueID_exposer.add_property( 
                "string"
                , ::boost::python::make_function( 
                      fget( &::osiris::UniqueID::getString )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::string const & osiris::UniqueID::getString() const [member function]\"" );
        
        }
    }

}
