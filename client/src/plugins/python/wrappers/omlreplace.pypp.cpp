// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "omlreplace.h"
#include "omlreplace.pypp.hpp"

namespace bp = boost::python;

struct OMLReplace_wrapper : ::osiris::OMLReplace, ::osiris::PythonWrapper< ::osiris::OMLReplace > {

    OMLReplace_wrapper(::osiris::OMLReplace const & arg )
    : ::osiris::OMLReplace( arg )
      , ::osiris::PythonWrapper< ::osiris::OMLReplace >(){
        // copy constructor
        
    }

    OMLReplace_wrapper(::osiris::String const & tag, ::osiris::int32 minParams, ::osiris::int32 maxParams, ::osiris::String const & replaceHtml, ::osiris::String const & replacePlain, bool const allowedInRowMode=false, ::osiris::String const & mapDefaultParamTo=osiris::String::EMPTY )
    : ::osiris::OMLReplace( boost::ref(tag), minParams, maxParams, boost::ref(replaceHtml), boost::ref(replacePlain), allowedInRowMode, boost::ref(mapDefaultParamTo) )
      , ::osiris::PythonWrapper< ::osiris::OMLReplace >(){
        // constructor
    
    }

    virtual bool allowRowMode(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_allowRowMode = this->get_override( "allowRowMode" ) )
            return func_allowRowMode(  );
        else{
            __pystate.leave();
            return this->::osiris::OMLReplace::allowRowMode(  );
        }
    }
    
    bool default_allowRowMode(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLReplace::allowRowMode( );
    }

    virtual ::osiris::String processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processHtml = this->get_override( "processHtml" ) )
            return func_processHtml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::OMLReplace::processHtml( i, context );
        }
    }
    
    ::osiris::String default_processHtml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::OMLReplace::processHtml( i, context );
    }

    virtual ::osiris::String processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_processOsml = this->get_override( "processOsml" ) )
            return func_processOsml( i, context );
        else{
            __pystate.leave();
            return this->::osiris::IOMLCode::processOsml( i, context );
        }
    }
    
    ::osiris::String default_processOsml( ::boost::shared_ptr< osiris::OMLItem > i, ::boost::shared_ptr< osiris::OMLContext > context ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IOMLCode::processOsml( i, context );
    }

};

void register_OMLReplace_class(){

    ::boost::python::class_< OMLReplace_wrapper, ::boost::python::bases< ::osiris::IOMLCode >, ::boost::noncopyable >( "OMLReplace", ::boost::python::init< ::osiris::String const &, ::osiris::int32, ::osiris::int32, ::osiris::String const &, ::osiris::String const &, ::boost::python::optional< bool, ::osiris::String const & > >(( ::boost::python::arg("tag"), ::boost::python::arg("minParams"), ::boost::python::arg("maxParams"), ::boost::python::arg("replaceHtml"), ::boost::python::arg("replacePlain"), ::boost::python::arg("allowedInRowMode")=(bool const)(false), ::boost::python::arg("mapDefaultParamTo")=osiris::String::EMPTY )) )    
        .def( 
            "allowRowMode"
            , (bool ( ::osiris::OMLReplace::* )(  ) const)(&::osiris::OMLReplace::allowRowMode)
            , (bool ( OMLReplace_wrapper::* )(  ) const)(&OMLReplace_wrapper::default_allowRowMode) )    
        .def( 
            "processHtml"
            , (::osiris::String ( ::osiris::OMLReplace::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&::osiris::OMLReplace::processHtml)
            , (::osiris::String ( OMLReplace_wrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&OMLReplace_wrapper::default_processHtml)
            , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) )    
        .def( 
            "processOsml"
            , (::osiris::String ( ::osiris::IOMLCode::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&::osiris::IOMLCode::processOsml)
            , (::osiris::String ( OMLReplace_wrapper::* )( ::boost::shared_ptr< osiris::OMLItem >,::boost::shared_ptr< osiris::OMLContext > ) const)(&OMLReplace_wrapper::default_processOsml)
            , ( ::boost::python::arg("i"), ::boost::python::arg("context") ) );

}
