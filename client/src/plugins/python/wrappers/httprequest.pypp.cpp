// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httprequest.h"
#include "buffer.h"
#include "httpurl.h"
#include "httpcontent.h"
#include "httpdata.h"
#include "httprequest.pypp.hpp"

namespace bp = boost::python;

struct HttpRequest_wrapper : ::osiris::HttpRequest, ::osiris::PythonWrapper< ::osiris::HttpRequest > {

    HttpRequest_wrapper(::osiris::HttpMethod method=::osiris::httpMethodUnknown, ::std::string const & rawurl=osiris::constants::empty_string )
    : ::osiris::HttpRequest( method, rawurl )
      , ::osiris::PythonWrapper< ::osiris::HttpRequest >(){
        // constructor
    
    }

    static boost::python::object getMethod( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpMethod result = inst.getMethod();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getHost( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getHost();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getPort( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 const & result = inst.getPort();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::uint32 const & >( result ) );
    }

    static boost::python::object getUserAgent( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getUserAgent();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getAccept( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getAccept();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getAcceptLanguage( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getAcceptLanguage();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getAcceptEncoding( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getAcceptEncoding();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getAcceptCharset( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getAcceptCharset();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getIfModifiedSince( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::posix_time::ptime const & result = inst.getIfModifiedSince();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::boost::posix_time::ptime const & >( result ) );
    }

    static boost::python::object getContentType( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getContentType();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getUrl( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getUrl();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getRawUrl( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getRawUrl();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getSupportGzip( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getSupportGzip();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getKeepAlive( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getKeepAlive();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getCloseConnection( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getCloseConnection();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getAuthorization( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpAuthorization result = inst.getAuthorization();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUrlParams( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & result = inst.getUrlParams();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & >( result ) );
    }

    static boost::python::object getPostParams( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> const & result = inst.getPostParams();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> const & >( result ) );
    }

    static boost::python::object getCookies( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::StringCollection<std::string, osiris::StringCollectionTraits<std::string> > const & result = inst.getCookies();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::StringCollection<std::string, osiris::StringCollectionTraits<std::string> > const & >( result ) );
    }

    static void setCookie( ::osiris::HttpRequest & inst, ::std::string const & name, ::std::string const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCookie(name, value);
        __pythreadSaver.restore();
    }

    static boost::python::object hasModifiedSince( ::osiris::HttpRequest const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasModifiedSince();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setPostParamString( ::osiris::HttpRequest & inst, ::std::wstring const & name, ::std::wstring const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPostParamString(name, value);
        __pythreadSaver.restore();
    }

    static void setPostParamBuffer( ::osiris::HttpRequest & inst, ::std::wstring const & name, ::osiris::Buffer const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPostParamBuffer(name, value);
        __pythreadSaver.restore();
    }

    static void addPostParam( ::osiris::HttpRequest & inst, ::std::wstring const & name, ::boost::shared_ptr< osiris::HttpPostParam > param ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.addPostParam(name, param);
        __pythreadSaver.restore();
    }

    static void parsePostParams_62424a0b044cc63af2dc62779f0ee744( ::osiris::HttpRequest & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.parsePostParams();
        __pythreadSaver.restore();
    }

    static void parsePostParams_9b491c8e715f7abc6d3096141af3ba18( ::osiris::HttpRequest & inst, ::std::string const & params, ::std::string const & contentType, ::std::string const & contentBoundary=(osiris::constants::empty_string) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.parsePostParams(params, contentType, contentBoundary);
        __pythreadSaver.restore();
    }

    virtual ::boost::shared_ptr< osiris::HttpData > createContent(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createContent = this->get_override( "createContent" ) )
            return func_createContent(  );
        else{
            __pystate.leave();
            return this->::osiris::HttpRequest::createContent(  );
        }
    }
    
    virtual ::boost::shared_ptr< osiris::HttpData > default_createContent(  ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpRequest::createContent( );
    }

    virtual bool parseParam( ::std::string const & paramName, ::std::string const & paramValue ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseParam = this->get_override( "parseParam" ) )
            return func_parseParam( paramName, paramValue );
        else{
            __pystate.leave();
            return this->::osiris::HttpRequest::parseParam( paramName, paramValue );
        }
    }
    
    virtual bool default_parseParam( ::std::string const & paramName, ::std::string const & paramValue ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpRequest::parseParam( paramName, paramValue );
    }

    virtual bool parseContent(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseContent = this->get_override( "parseContent" ) )
            return func_parseContent(  );
        else{
            __pystate.leave();
            return this->::osiris::HttpRequest::parseContent(  );
        }
    }
    
    virtual bool default_parseContent(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpRequest::parseContent( );
    }

    virtual ::boost::shared_ptr< osiris::HttpData > createHeader( ::boost::shared_ptr< osiris::HttpData > content ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createHeader = this->get_override( "createHeader" ) )
            return func_createHeader( content );
        else{
            __pystate.leave();
            return this->::osiris::HttpRequest::createHeader( content );
        }
    }
    
    virtual ::boost::shared_ptr< osiris::HttpData > default_createHeader( ::boost::shared_ptr< osiris::HttpData > content ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpRequest::createHeader( content );
    }

    static boost::python::object getCookie( ::osiris::HttpRequest const & inst, ::std::string const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string const & result = inst.getCookie(name);
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::string const & >( result ) );
    }

    static boost::python::object getPostParam( ::osiris::HttpRequest const & inst, ::std::wstring const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpPostParam> result = inst.getPostParam(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getPostParamBuffer( ::osiris::HttpRequest const & inst, ::std::wstring const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::Buffer const * result = inst.getPostParamBuffer(name);
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::reference_existing_object > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::Buffer const * >( result ) );
    }

    static boost::python::object getPostParamString( ::osiris::HttpRequest const & inst, ::std::wstring const & name, ::std::wstring const & def=(osiris::constants::empty_wstring) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::wstring result = inst.getPostParamString(name, def);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUrlParam( ::osiris::HttpRequest const & inst, ::std::wstring const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::wstring const & result = inst.getUrlParam(name);
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::wstring const & >( result ) );
    }

    static boost::python::object hasCookie( ::osiris::HttpRequest const & inst, ::std::string const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasCookie(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasPostParam( ::osiris::HttpRequest const & inst, ::std::wstring const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasPostParam(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object hasUrlParam( ::osiris::HttpRequest const & inst, ::std::wstring const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.hasUrlParam(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual bool parseMethod( ::std::string const & header ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseMethod = this->get_override( "parseMethod" ) )
            return func_parseMethod( header );
        else{
            __pystate.leave();
            return this->::osiris::HttpRequest::parseMethod( header );
        }
    }
    
    virtual bool default_parseMethod( ::std::string const & header ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpRequest::parseMethod( header );
    }

    static void setAccept( ::osiris::HttpRequest & inst, ::std::string const & accept ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAccept(accept);
        __pythreadSaver.restore();
    }

    static void setAcceptCharset( ::osiris::HttpRequest & inst, ::std::string const & acceptCharset ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAcceptCharset(acceptCharset);
        __pythreadSaver.restore();
    }

    static void setAcceptEncoding( ::osiris::HttpRequest & inst, ::std::string const & acceptEncoding ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAcceptEncoding(acceptEncoding);
        __pythreadSaver.restore();
    }

    static void setAcceptLanguage( ::osiris::HttpRequest & inst, ::std::string const & acceptLanguage ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAcceptLanguage(acceptLanguage);
        __pythreadSaver.restore();
    }

    static void setAuthorization( ::osiris::HttpRequest & inst, ::osiris::HttpAuthorization authorization ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAuthorization(authorization);
        __pythreadSaver.restore();
    }

    static void setCloseConnection( ::osiris::HttpRequest & inst, bool closeConnection ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCloseConnection(closeConnection);
        __pythreadSaver.restore();
    }

    static void setContentType( ::osiris::HttpRequest & inst, ::std::string const & contentType ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentType(contentType);
        __pythreadSaver.restore();
    }

    static void setHost( ::osiris::HttpRequest & inst, ::std::string const & host ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHost(host);
        __pythreadSaver.restore();
    }

    static void setIfModifiedSince( ::osiris::HttpRequest & inst, ::boost::posix_time::ptime const & t ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setIfModifiedSince(t);
        __pythreadSaver.restore();
    }

    static void setMethod( ::osiris::HttpRequest & inst, ::osiris::HttpMethod method ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setMethod(method);
        __pythreadSaver.restore();
    }

    static void setPort( ::osiris::HttpRequest & inst, ::osiris::uint32 const & port ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setPort(port);
        __pythreadSaver.restore();
    }

    static void setUrl( ::osiris::HttpRequest & inst, ::osiris::HttpUrl const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setUrl(url);
        __pythreadSaver.restore();
    }

    static void setUserAgent( ::osiris::HttpRequest & inst, ::std::string const & userAgent ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setUserAgent(userAgent);
        __pythreadSaver.restore();
    }

    virtual bool parseHeaders( ::std::string const & headers ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseHeaders = this->get_override( "parseHeaders" ) )
            return func_parseHeaders( headers );
        else{
            __pystate.leave();
            return this->::osiris::IHttpMethod::parseHeaders( headers );
        }
    }
    
    virtual bool default_parseHeaders( ::std::string const & headers ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpMethod::parseHeaders( headers );
    }

};

void register_HttpRequest_class(){

    { //::osiris::HttpRequest
        typedef ::boost::python::class_< HttpRequest_wrapper, ::boost::python::bases< ::osiris::IHttpMethod >, ::boost::noncopyable > HttpRequest_exposer_t;
        HttpRequest_exposer_t HttpRequest_exposer = HttpRequest_exposer_t( "HttpRequest", ::boost::python::init< ::boost::python::optional< ::osiris::HttpMethod, ::std::string const & > >(( ::boost::python::arg("method")=::osiris::httpMethodUnknown, ::boost::python::arg("rawurl")=osiris::constants::empty_string )) );
        ::boost::python::scope HttpRequest_scope( HttpRequest_exposer );
        ::boost::python::implicitly_convertible< ::osiris::HttpMethod, ::osiris::HttpRequest >();
        { //::osiris::HttpRequest::getMethod
        
            typedef boost::python::object ( *getMethod_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getMethod"
                , getMethod_function_type( &HttpRequest_wrapper::getMethod ) );
        
        }
        { //::osiris::HttpRequest::getHost
        
            typedef boost::python::object ( *getHost_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getHost"
                , getHost_function_type( &HttpRequest_wrapper::getHost ) );
        
        }
        { //::osiris::HttpRequest::getPort
        
            typedef boost::python::object ( *getPort_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getPort"
                , getPort_function_type( &HttpRequest_wrapper::getPort ) );
        
        }
        { //::osiris::HttpRequest::getUserAgent
        
            typedef boost::python::object ( *getUserAgent_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getUserAgent"
                , getUserAgent_function_type( &HttpRequest_wrapper::getUserAgent ) );
        
        }
        { //::osiris::HttpRequest::getAccept
        
            typedef boost::python::object ( *getAccept_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getAccept"
                , getAccept_function_type( &HttpRequest_wrapper::getAccept ) );
        
        }
        { //::osiris::HttpRequest::getAcceptLanguage
        
            typedef boost::python::object ( *getAcceptLanguage_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getAcceptLanguage"
                , getAcceptLanguage_function_type( &HttpRequest_wrapper::getAcceptLanguage ) );
        
        }
        { //::osiris::HttpRequest::getAcceptEncoding
        
            typedef boost::python::object ( *getAcceptEncoding_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getAcceptEncoding"
                , getAcceptEncoding_function_type( &HttpRequest_wrapper::getAcceptEncoding ) );
        
        }
        { //::osiris::HttpRequest::getAcceptCharset
        
            typedef boost::python::object ( *getAcceptCharset_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getAcceptCharset"
                , getAcceptCharset_function_type( &HttpRequest_wrapper::getAcceptCharset ) );
        
        }
        { //::osiris::HttpRequest::getIfModifiedSince
        
            typedef boost::python::object ( *getIfModifiedSince_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getIfModifiedSince"
                , getIfModifiedSince_function_type( &HttpRequest_wrapper::getIfModifiedSince ) );
        
        }
        { //::osiris::HttpRequest::getContentType
        
            typedef boost::python::object ( *getContentType_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getContentType"
                , getContentType_function_type( &HttpRequest_wrapper::getContentType ) );
        
        }
        { //::osiris::HttpRequest::getUrl
        
            typedef boost::python::object ( *getUrl_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getUrl"
                , getUrl_function_type( &HttpRequest_wrapper::getUrl ) );
        
        }
        { //::osiris::HttpRequest::getRawUrl
        
            typedef boost::python::object ( *getRawUrl_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getRawUrl"
                , getRawUrl_function_type( &HttpRequest_wrapper::getRawUrl ) );
        
        }
        { //::osiris::HttpRequest::getSupportGzip
        
            typedef boost::python::object ( *getSupportGzip_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getSupportGzip"
                , getSupportGzip_function_type( &HttpRequest_wrapper::getSupportGzip ) );
        
        }
        { //::osiris::HttpRequest::getKeepAlive
        
            typedef boost::python::object ( *getKeepAlive_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getKeepAlive"
                , getKeepAlive_function_type( &HttpRequest_wrapper::getKeepAlive ) );
        
        }
        { //::osiris::HttpRequest::getCloseConnection
        
            typedef boost::python::object ( *getCloseConnection_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getCloseConnection"
                , getCloseConnection_function_type( &HttpRequest_wrapper::getCloseConnection ) );
        
        }
        { //::osiris::HttpRequest::getAuthorization
        
            typedef boost::python::object ( *getAuthorization_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getAuthorization"
                , getAuthorization_function_type( &HttpRequest_wrapper::getAuthorization ) );
        
        }
        { //::osiris::HttpRequest::getUrlParams
        
            typedef boost::python::object ( *getUrlParams_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getUrlParams"
                , getUrlParams_function_type( &HttpRequest_wrapper::getUrlParams ) );
        
        }
        { //::osiris::HttpRequest::getPostParams
        
            typedef boost::python::object ( *getPostParams_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getPostParams"
                , getPostParams_function_type( &HttpRequest_wrapper::getPostParams ) );
        
        }
        { //::osiris::HttpRequest::getCookies
        
            typedef boost::python::object ( *getCookies_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "getCookies"
                , getCookies_function_type( &HttpRequest_wrapper::getCookies ) );
        
        }
        { //::osiris::HttpRequest::setCookie
        
            typedef void ( *setCookie_function_type )( ::osiris::HttpRequest &,::std::string const &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setCookie"
                , setCookie_function_type( &HttpRequest_wrapper::setCookie )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HttpRequest::hasModifiedSince
        
            typedef boost::python::object ( *hasModifiedSince_function_type )( ::osiris::HttpRequest const & );
            
            HttpRequest_exposer.def( 
                "hasModifiedSince"
                , hasModifiedSince_function_type( &HttpRequest_wrapper::hasModifiedSince ) );
        
        }
        { //::osiris::HttpRequest::setPostParamString
        
            typedef void ( *setPostParamString_function_type )( ::osiris::HttpRequest &,::std::wstring const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "setPostParamString"
                , setPostParamString_function_type( &HttpRequest_wrapper::setPostParamString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HttpRequest::setPostParamBuffer
        
            typedef void ( *setPostParamBuffer_function_type )( ::osiris::HttpRequest &,::std::wstring const &,::osiris::Buffer const & );
            
            HttpRequest_exposer.def( 
                "setPostParamBuffer"
                , setPostParamBuffer_function_type( &HttpRequest_wrapper::setPostParamBuffer )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HttpRequest::addPostParam
        
            typedef void ( *addPostParam_function_type )( ::osiris::HttpRequest &,::std::wstring const &,::boost::shared_ptr<osiris::HttpPostParam> );
            
            HttpRequest_exposer.def( 
                "addPostParam"
                , addPostParam_function_type( &HttpRequest_wrapper::addPostParam )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("param") ) );
        
        }
        { //::osiris::HttpRequest::parsePostParams
        
            typedef void ( *parsePostParams_function_type )( ::osiris::HttpRequest & );
            
            HttpRequest_exposer.def( 
                "parsePostParams"
                , parsePostParams_function_type( &HttpRequest_wrapper::parsePostParams_62424a0b044cc63af2dc62779f0ee744 ) );
        
        }
        { //::osiris::HttpRequest::parsePostParams
        
            typedef void ( *parsePostParams_function_type )( ::osiris::HttpRequest &,::std::string const &,::std::string const &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "parsePostParams"
                , parsePostParams_function_type( &HttpRequest_wrapper::parsePostParams_9b491c8e715f7abc6d3096141af3ba18 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("params"), ::boost::python::arg("contentType"), ::boost::python::arg("contentBoundary")=(osiris::constants::empty_string) ) );
        
        }
        { //::osiris::HttpRequest::createContent
        
            typedef ::boost::shared_ptr< osiris::HttpData > ( HttpRequest_wrapper::*createContent_function_type )(  ) const;
            
            HttpRequest_exposer.def( 
                "createContent"
                , createContent_function_type( &HttpRequest_wrapper::default_createContent ) );
        
        }
        { //::osiris::HttpRequest::parseParam
        
            typedef bool ( HttpRequest_wrapper::*parseParam_function_type )( ::std::string const &,::std::string const & ) ;
            
            HttpRequest_exposer.def( 
                "parseParam"
                , parseParam_function_type( &HttpRequest_wrapper::default_parseParam )
                , ( ::boost::python::arg("paramName"), ::boost::python::arg("paramValue") ) );
        
        }
        { //::osiris::HttpRequest::parseContent
        
            typedef bool ( HttpRequest_wrapper::*parseContent_function_type )(  ) ;
            
            HttpRequest_exposer.def( 
                "parseContent"
                , parseContent_function_type( &HttpRequest_wrapper::default_parseContent ) );
        
        }
        { //::osiris::HttpRequest::createHeader
        
            typedef ::boost::shared_ptr< osiris::HttpData > ( HttpRequest_wrapper::*createHeader_function_type )( ::boost::shared_ptr< osiris::HttpData > ) const;
            
            HttpRequest_exposer.def( 
                "createHeader"
                , createHeader_function_type( &HttpRequest_wrapper::default_createHeader )
                , ( ::boost::python::arg("content") ) );
        
        }
        { //::osiris::HttpRequest::getCookie
        
            typedef boost::python::object ( *getCookie_function_type )( ::osiris::HttpRequest const &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "getCookie"
                , getCookie_function_type( &HttpRequest_wrapper::getCookie )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::getPostParam
        
            typedef boost::python::object ( *getPostParam_function_type )( ::osiris::HttpRequest const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "getPostParam"
                , getPostParam_function_type( &HttpRequest_wrapper::getPostParam )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::getPostParamBuffer
        
            typedef boost::python::object ( *getPostParamBuffer_function_type )( ::osiris::HttpRequest const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "getPostParamBuffer"
                , getPostParamBuffer_function_type( &HttpRequest_wrapper::getPostParamBuffer )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::getPostParamString
        
            typedef boost::python::object ( *getPostParamString_function_type )( ::osiris::HttpRequest const &,::std::wstring const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "getPostParamString"
                , getPostParamString_function_type( &HttpRequest_wrapper::getPostParamString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("def")=(osiris::constants::empty_wstring) ) );
        
        }
        { //::osiris::HttpRequest::getUrlParam
        
            typedef boost::python::object ( *getUrlParam_function_type )( ::osiris::HttpRequest const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "getUrlParam"
                , getUrlParam_function_type( &HttpRequest_wrapper::getUrlParam )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::hasCookie
        
            typedef boost::python::object ( *hasCookie_function_type )( ::osiris::HttpRequest const &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "hasCookie"
                , hasCookie_function_type( &HttpRequest_wrapper::hasCookie )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::hasPostParam
        
            typedef boost::python::object ( *hasPostParam_function_type )( ::osiris::HttpRequest const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "hasPostParam"
                , hasPostParam_function_type( &HttpRequest_wrapper::hasPostParam )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::hasUrlParam
        
            typedef boost::python::object ( *hasUrlParam_function_type )( ::osiris::HttpRequest const &,::std::wstring const & );
            
            HttpRequest_exposer.def( 
                "hasUrlParam"
                , hasUrlParam_function_type( &HttpRequest_wrapper::hasUrlParam )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpRequest::parseMethod
        
            typedef bool ( HttpRequest_wrapper::*parseMethod_function_type )( ::std::string const & ) ;
            
            HttpRequest_exposer.def( 
                "parseMethod"
                , parseMethod_function_type( &HttpRequest_wrapper::default_parseMethod )
                , ( ::boost::python::arg("header") ) );
        
        }
        { //::osiris::HttpRequest::setAccept
        
            typedef void ( *setAccept_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setAccept"
                , setAccept_function_type( &HttpRequest_wrapper::setAccept )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("accept") ) );
        
        }
        { //::osiris::HttpRequest::setAcceptCharset
        
            typedef void ( *setAcceptCharset_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setAcceptCharset"
                , setAcceptCharset_function_type( &HttpRequest_wrapper::setAcceptCharset )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("acceptCharset") ) );
        
        }
        { //::osiris::HttpRequest::setAcceptEncoding
        
            typedef void ( *setAcceptEncoding_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setAcceptEncoding"
                , setAcceptEncoding_function_type( &HttpRequest_wrapper::setAcceptEncoding )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("acceptEncoding") ) );
        
        }
        { //::osiris::HttpRequest::setAcceptLanguage
        
            typedef void ( *setAcceptLanguage_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setAcceptLanguage"
                , setAcceptLanguage_function_type( &HttpRequest_wrapper::setAcceptLanguage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("acceptLanguage") ) );
        
        }
        { //::osiris::HttpRequest::setAuthorization
        
            typedef void ( *setAuthorization_function_type )( ::osiris::HttpRequest &,::osiris::HttpAuthorization );
            
            HttpRequest_exposer.def( 
                "setAuthorization"
                , setAuthorization_function_type( &HttpRequest_wrapper::setAuthorization )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("authorization") ) );
        
        }
        { //::osiris::HttpRequest::setCloseConnection
        
            typedef void ( *setCloseConnection_function_type )( ::osiris::HttpRequest &,bool );
            
            HttpRequest_exposer.def( 
                "setCloseConnection"
                , setCloseConnection_function_type( &HttpRequest_wrapper::setCloseConnection )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("closeConnection") ) );
        
        }
        { //::osiris::HttpRequest::setContentType
        
            typedef void ( *setContentType_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setContentType"
                , setContentType_function_type( &HttpRequest_wrapper::setContentType )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("contentType") ) );
        
        }
        { //::osiris::HttpRequest::setHost
        
            typedef void ( *setHost_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setHost"
                , setHost_function_type( &HttpRequest_wrapper::setHost )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("host") ) );
        
        }
        { //::osiris::HttpRequest::setIfModifiedSince
        
            typedef void ( *setIfModifiedSince_function_type )( ::osiris::HttpRequest &,::boost::posix_time::ptime const & );
            
            HttpRequest_exposer.def( 
                "setIfModifiedSince"
                , setIfModifiedSince_function_type( &HttpRequest_wrapper::setIfModifiedSince )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("t") ) );
        
        }
        { //::osiris::HttpRequest::setMethod
        
            typedef void ( *setMethod_function_type )( ::osiris::HttpRequest &,::osiris::HttpMethod );
            
            HttpRequest_exposer.def( 
                "setMethod"
                , setMethod_function_type( &HttpRequest_wrapper::setMethod )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("method") ) );
        
        }
        { //::osiris::HttpRequest::setPort
        
            typedef void ( *setPort_function_type )( ::osiris::HttpRequest &,::osiris::uint32 const & );
            
            HttpRequest_exposer.def( 
                "setPort"
                , setPort_function_type( &HttpRequest_wrapper::setPort )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("port") ) );
        
        }
        { //::osiris::HttpRequest::setUrl
        
            typedef void ( *setUrl_function_type )( ::osiris::HttpRequest &,::osiris::HttpUrl const & );
            
            HttpRequest_exposer.def( 
                "setUrl"
                , setUrl_function_type( &HttpRequest_wrapper::setUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HttpRequest::setUserAgent
        
            typedef void ( *setUserAgent_function_type )( ::osiris::HttpRequest &,::std::string const & );
            
            HttpRequest_exposer.def( 
                "setUserAgent"
                , setUserAgent_function_type( &HttpRequest_wrapper::setUserAgent )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("userAgent") ) );
        
        }
        { //::osiris::IHttpMethod::parseHeaders
        
            typedef bool ( HttpRequest_wrapper::*parseHeaders_function_type )( ::std::string const & ) ;
            
            HttpRequest_exposer.def( 
                "parseHeaders"
                , parseHeaders_function_type( &HttpRequest_wrapper::default_parseHeaders )
                , ( ::boost::python::arg("headers") ) );
        
        }
        { //property "method"[fget=::osiris::HttpRequest::getMethod, fset=::osiris::HttpRequest::setMethod]
        
            typedef ::osiris::HttpMethod ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::osiris::HttpMethod ) ;
            
            HttpRequest_exposer.add_property( 
                "method"
                , fget( &::osiris::HttpRequest::getMethod )
                , fset( &::osiris::HttpRequest::setMethod )
                , "get\\set property, built on top of \"osiris::HttpMethod osiris::HttpRequest::getMethod() const [member function]\" and \"void osiris::HttpRequest::setMethod(osiris::HttpMethod method) [member function]\"" );
        
        }
        { //property "host"[fget=::osiris::HttpRequest::getHost, fset=::osiris::HttpRequest::setHost]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "host"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getHost )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setHost )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getHost() const [member function]\" and \"void osiris::HttpRequest::setHost(std::string const & host) [member function]\"" );
        
        }
        { //property "port"[fget=::osiris::HttpRequest::getPort, fset=::osiris::HttpRequest::setPort]
        
            typedef ::osiris::uint32 const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::osiris::uint32 const & ) ;
            
            HttpRequest_exposer.add_property( 
                "port"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getPort )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setPort )
                , "get\\set property, built on top of \"osiris::uint32 const & osiris::HttpRequest::getPort() const [member function]\" and \"void osiris::HttpRequest::setPort(osiris::uint32 const & port) [member function]\"" );
        
        }
        { //property "userAgent"[fget=::osiris::HttpRequest::getUserAgent, fset=::osiris::HttpRequest::setUserAgent]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "userAgent"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getUserAgent )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setUserAgent )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getUserAgent() const [member function]\" and \"void osiris::HttpRequest::setUserAgent(std::string const & userAgent) [member function]\"" );
        
        }
        { //property "accept"[fget=::osiris::HttpRequest::getAccept, fset=::osiris::HttpRequest::setAccept]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "accept"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getAccept )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setAccept )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getAccept() const [member function]\" and \"void osiris::HttpRequest::setAccept(std::string const & accept) [member function]\"" );
        
        }
        { //property "acceptLanguage"[fget=::osiris::HttpRequest::getAcceptLanguage, fset=::osiris::HttpRequest::setAcceptLanguage]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "acceptLanguage"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getAcceptLanguage )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setAcceptLanguage )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getAcceptLanguage() const [member function]\" and \"void osiris::HttpRequest::setAcceptLanguage(std::string const & acceptLanguage) [member function]\"" );
        
        }
        { //property "acceptEncoding"[fget=::osiris::HttpRequest::getAcceptEncoding, fset=::osiris::HttpRequest::setAcceptEncoding]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "acceptEncoding"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getAcceptEncoding )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setAcceptEncoding )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getAcceptEncoding() const [member function]\" and \"void osiris::HttpRequest::setAcceptEncoding(std::string const & acceptEncoding) [member function]\"" );
        
        }
        { //property "acceptCharset"[fget=::osiris::HttpRequest::getAcceptCharset, fset=::osiris::HttpRequest::setAcceptCharset]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "acceptCharset"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getAcceptCharset )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setAcceptCharset )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getAcceptCharset() const [member function]\" and \"void osiris::HttpRequest::setAcceptCharset(std::string const & acceptCharset) [member function]\"" );
        
        }
        { //property "ifModifiedSince"[fget=::osiris::HttpRequest::getIfModifiedSince, fset=::osiris::HttpRequest::setIfModifiedSince]
        
            typedef ::boost::posix_time::ptime const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::boost::posix_time::ptime const & ) ;
            
            HttpRequest_exposer.add_property( 
                "ifModifiedSince"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getIfModifiedSince )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setIfModifiedSince )
                , "get\\set property, built on top of \"boost::posix_time::ptime const & osiris::HttpRequest::getIfModifiedSince() const [member function]\" and \"void osiris::HttpRequest::setIfModifiedSince(boost::posix_time::ptime const & t) [member function]\"" );
        
        }
        { //property "contentType"[fget=::osiris::HttpRequest::getContentType, fset=::osiris::HttpRequest::setContentType]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::std::string const & ) ;
            
            HttpRequest_exposer.add_property( 
                "contentType"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getContentType )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HttpRequest::setContentType )
                , "get\\set property, built on top of \"std::string const & osiris::HttpRequest::getContentType() const [member function]\" and \"void osiris::HttpRequest::setContentType(std::string const & contentType) [member function]\"" );
        
        }
        { //property "closeConnection"[fget=::osiris::HttpRequest::getCloseConnection, fset=::osiris::HttpRequest::setCloseConnection]
        
            typedef bool ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( bool ) ;
            
            HttpRequest_exposer.add_property( 
                "closeConnection"
                , fget( &::osiris::HttpRequest::getCloseConnection )
                , fset( &::osiris::HttpRequest::setCloseConnection )
                , "get\\set property, built on top of \"bool osiris::HttpRequest::getCloseConnection() const [member function]\" and \"void osiris::HttpRequest::setCloseConnection(bool closeConnection) [member function]\"" );
        
        }
        { //property "authorization"[fget=::osiris::HttpRequest::getAuthorization, fset=::osiris::HttpRequest::setAuthorization]
        
            typedef ::osiris::HttpAuthorization ( ::osiris::HttpRequest::*fget )(  ) const;
            typedef void ( ::osiris::HttpRequest::*fset )( ::osiris::HttpAuthorization ) ;
            
            HttpRequest_exposer.add_property( 
                "authorization"
                , fget( &::osiris::HttpRequest::getAuthorization )
                , fset( &::osiris::HttpRequest::setAuthorization )
                , "get\\set property, built on top of \"osiris::HttpAuthorization osiris::HttpRequest::getAuthorization() const [member function]\" and \"void osiris::HttpRequest::setAuthorization(osiris::HttpAuthorization authorization) [member function]\"" );
        
        }
        { //property "url"[fget=::osiris::HttpRequest::getUrl]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "url"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getUrl )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::string const & osiris::HttpRequest::getUrl() const [member function]\"" );
        
        }
        { //property "rawUrl"[fget=::osiris::HttpRequest::getRawUrl]
        
            typedef ::std::string const & ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "rawUrl"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getRawUrl )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::string const & osiris::HttpRequest::getRawUrl() const [member function]\"" );
        
        }
        { //property "supportGzip"[fget=::osiris::HttpRequest::getSupportGzip]
        
            typedef bool ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "supportGzip"
                , fget( &::osiris::HttpRequest::getSupportGzip )
                , "get property, built on top of \"bool osiris::HttpRequest::getSupportGzip() const [member function]\"" );
        
        }
        { //property "keepAlive"[fget=::osiris::HttpRequest::getKeepAlive]
        
            typedef ::osiris::uint32 ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "keepAlive"
                , fget( &::osiris::HttpRequest::getKeepAlive )
                , "get property, built on top of \"osiris::uint32 osiris::HttpRequest::getKeepAlive() const [member function]\"" );
        
        }
        { //property "urlParams"[fget=::osiris::HttpRequest::getUrlParams]
        
            typedef ::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "urlParams"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getUrlParams )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & osiris::HttpRequest::getUrlParams() const [member function]\"" );
        
        }
        { //property "postParams"[fget=::osiris::HttpRequest::getPostParams]
        
            typedef ::osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> const & ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "postParams"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getPostParams )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::basic_collection<osiris::Collections<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, osiris::HttpPostParam>::policies::shared> const & osiris::HttpRequest::getPostParams() const [member function]\"" );
        
        }
        { //property "cookies"[fget=::osiris::HttpRequest::getCookies]
        
            typedef ::osiris::StringCollection<std::string, osiris::StringCollectionTraits<std::string> > const & ( ::osiris::HttpRequest::*fget )(  ) const;
            
            HttpRequest_exposer.add_property( 
                "cookies"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpRequest::getCookies )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::StringCollection<std::string, osiris::StringCollectionTraits<std::string> > const & osiris::HttpRequest::getCookies() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HttpRequest > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpRequest >, boost::shared_ptr< ::osiris::IHttpMethod > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpRequest >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpRequest >, boost::shared_ptr< ::osiris::Object > >();
    }

}
