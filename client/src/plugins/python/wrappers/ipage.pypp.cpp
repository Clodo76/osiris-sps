// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "iidepage.h"
#include "htmlxslcontrol.h"
#include "idepathway.h"
#include "ideskin.h"
#include "iportaldatabase.h"
#include "omlcontext.h"
#include "idesession.h"
#include "portalsportal.h"
#include "xmlstylesheet.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "iideportalpage.h"
#include "iidemainpage.h"
#include "ipage.pypp.hpp"

namespace bp = boost::python;

struct IPage_wrapper : ::osiris::IPage, ::osiris::PythonWrapper< ::osiris::IPage > {

    IPage_wrapper(::boost::shared_ptr< osiris::HttpSession > session )
    : ::osiris::IPage( session )
      , ::osiris::PythonWrapper< ::osiris::IPage >(){
        // constructor
    
    }

    static boost::python::object getTemplate( ::osiris::IPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlXSLControl> result = inst.getTemplate();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRequestSource( ::osiris::IPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::RequestSource result = inst.getRequestSource();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getMcpMode( ::osiris::IPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getMcpMode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSessionAccount( ::osiris::IPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IdeSession> result = inst.getSessionAccount();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String getLanguage(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getLanguage = this->get_override( "getLanguage" ) )
            return func_getLanguage(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getLanguage(  );
        }
    }
    
    ::osiris::String default_getLanguage(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getLanguage( );
    }

    virtual ::osiris::int32 getTimeOffset(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTimeOffset = this->get_override( "getTimeOffset" ) )
            return func_getTimeOffset(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getTimeOffset(  );
        }
    }
    
    ::osiris::int32 default_getTimeOffset(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getTimeOffset( );
    }

    virtual ::osiris::int32 getTimeDST(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getTimeDST = this->get_override( "getTimeDST" ) )
            return func_getTimeDST(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getTimeDST(  );
        }
    }
    
    ::osiris::int32 default_getTimeDST(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getTimeDST( );
    }

    virtual ::osiris::String formatDate( ::osiris::DateTime const & dt, ::osiris::DateTime::DateTimePattern const & pattern ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_formatDate = this->get_override( "formatDate" ) )
            return func_formatDate( boost::ref(dt), pattern );
        else{
            __pystate.leave();
            return this->::osiris::IPage::formatDate( boost::ref(dt), pattern );
        }
    }
    
    ::osiris::String default_formatDate( ::osiris::DateTime const & dt, ::osiris::DateTime::DateTimePattern const & pattern ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::formatDate( boost::ref(dt), pattern );
    }

    virtual ::osiris::String formatDate( ::osiris::DateTime const & dt, ::osiris::String const & pattern ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_formatDate = this->get_override( "formatDate" ) )
            return func_formatDate( boost::ref(dt), boost::ref(pattern) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::formatDate( boost::ref(dt), boost::ref(pattern) );
        }
    }
    
    ::osiris::String default_formatDate( ::osiris::DateTime const & dt, ::osiris::String const & pattern ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::formatDate( boost::ref(dt), boost::ref(pattern) );
    }

    virtual ::boost::shared_ptr< osiris::OMLContext > parseOmlEx( ::osiris::String const & text, bool enableWarning, bool full, bool secure, bool row, ::osiris::OMLRenderMode mode=(::osiris::omlRenderModeOsiris), ::osiris::String const & refID=(osiris::String::EMPTY), ::osiris::String const & fullUrl=(osiris::String::EMPTY) ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseOmlEx = this->get_override( "parseOmlEx" ) )
            return func_parseOmlEx( boost::ref(text), enableWarning, full, secure, row, mode, boost::ref(refID), boost::ref(fullUrl) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::parseOmlEx( boost::ref(text), enableWarning, full, secure, row, mode, boost::ref(refID), boost::ref(fullUrl) );
        }
    }
    
    ::boost::shared_ptr< osiris::OMLContext > default_parseOmlEx( ::osiris::String const & text, bool enableWarning, bool full, bool secure, bool row, ::osiris::OMLRenderMode mode=(::osiris::omlRenderModeOsiris), ::osiris::String const & refID=(osiris::String::EMPTY), ::osiris::String const & fullUrl=(osiris::String::EMPTY) ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::parseOmlEx( boost::ref(text), enableWarning, full, secure, row, mode, boost::ref(refID), boost::ref(fullUrl) );
    }

    virtual ::boost::shared_ptr< osiris::IdePathway > getPathway(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getPathway = this->get_override( "getPathway" ) )
            return func_getPathway(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getPathway(  );
        }
    }
    
    ::boost::shared_ptr< osiris::IdePathway > default_getPathway(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getPathway( );
    }

    virtual ::boost::shared_ptr< osiris::IdeSkin > getSkin(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSkin = this->get_override( "getSkin" ) )
            return func_getSkin(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getSkin(  );
        }
    }
    
    ::boost::shared_ptr< osiris::IdeSkin > default_getSkin(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getSkin( );
    }

    virtual ::boost::shared_ptr< osiris::Portal > getPortalFromUrl(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getPortalFromUrl = this->get_override( "getPortalFromUrl" ) )
            return func_getPortalFromUrl(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getPortalFromUrl(  );
        }
    }
    
    ::boost::shared_ptr< osiris::Portal > default_getPortalFromUrl(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getPortalFromUrl( );
    }

    static void ensureAccountSession( ::osiris::IPage & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.ensureAccountSession();
        __pythreadSaver.restore();
    }

    virtual ::osiris::String getPageName(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getPageName = this->get_override( "getPageName" ) )
            return func_getPageName(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getPageName(  );
        }
    }
    
    ::osiris::String default_getPageName(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getPageName( );
    }

    virtual void onPathway(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPathway = this->get_override( "onPathway" ) )
            func_onPathway(  );
        else{
            __pystate.leave();
            this->::osiris::IPage::onPathway(  );
        }
    }
    
    void default_onPathway(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onPathway( );
    }

    virtual ::osiris::String getPagePathway(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getPagePathway = this->get_override( "getPagePathway" ) )
            return func_getPagePathway(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getPagePathway(  );
        }
    }
    
    ::osiris::String default_getPagePathway(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getPagePathway( );
    }

    virtual ::boost::shared_ptr< osiris::XMLStylesheet > createStylesheet(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createStylesheet = this->get_override( "createStylesheet" ) )
            return func_createStylesheet(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::createStylesheet(  );
        }
    }
    
    ::boost::shared_ptr< osiris::XMLStylesheet > default_createStylesheet(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::createStylesheet( );
    }

    virtual bool loginAccountWithName( ::osiris::String const & login, ::osiris::String const & password, bool save_password=false ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_loginAccountWithName = this->get_override( "loginAccountWithName" ) )
            return func_loginAccountWithName( boost::ref(login), boost::ref(password), save_password );
        else{
            __pystate.leave();
            return this->::osiris::IPage::loginAccountWithName( boost::ref(login), boost::ref(password), save_password );
        }
    }
    
    bool default_loginAccountWithName( ::osiris::String const & login, ::osiris::String const & password, bool save_password=false ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::loginAccountWithName( boost::ref(login), boost::ref(password), save_password );
    }

    virtual bool loginAccountWithID( ::osiris::String const & accountID, ::osiris::String const & password, bool save_password=false ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_loginAccountWithID = this->get_override( "loginAccountWithID" ) )
            return func_loginAccountWithID( boost::ref(accountID), boost::ref(password), save_password );
        else{
            __pystate.leave();
            return this->::osiris::IPage::loginAccountWithID( boost::ref(accountID), boost::ref(password), save_password );
        }
    }
    
    bool default_loginAccountWithID( ::osiris::String const & accountID, ::osiris::String const & password, bool save_password=false ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::loginAccountWithID( boost::ref(accountID), boost::ref(password), save_password );
    }

    virtual bool isMcpModeRequired(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_isMcpModeRequired = this->get_override( "isMcpModeRequired" ) )
            return func_isMcpModeRequired(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::isMcpModeRequired(  );
        }
    }
    
    bool default_isMcpModeRequired(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::isMcpModeRequired( );
    }

    virtual bool isIsisAllowed(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_isIsisAllowed = this->get_override( "isIsisAllowed" ) )
            return func_isIsisAllowed(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::isIsisAllowed(  );
        }
    }
    
    bool default_isIsisAllowed(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::isIsisAllowed( );
    }

    virtual bool transmit(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_transmit = this->get_override( "transmit" ) )
            return func_transmit(  );
        else{
            __pystate.leave();
            return this->::osiris::IPage::transmit(  );
        }
    }
    
    bool default_transmit(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::transmit( );
    }

    static boost::python::object getDatabase( ::osiris::IPage const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IPortalDatabase> result = inst.getDatabase();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void closeDatabase( ::osiris::IPage & inst, bool commit=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.closeDatabase(commit);
        __pythreadSaver.restore();
    }

    virtual void onLoadResources(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadResources = this->get_override( "onLoadResources" ) )
            func_onLoadResources(  );
        else{
            __pystate.leave();
            this->::osiris::IPage::onLoadResources(  );
        }
    }
    
    virtual void default_onLoadResources(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onLoadResources( );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IPage::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onInit( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IPage::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onLoad( );
    }

    virtual void onLogout(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLogout = this->get_override( "onLogout" ) )
            func_onLogout(  );
        else{
            __pystate.leave();
            this->::osiris::IPage::onLogout(  );
        }
    }
    
    virtual void default_onLogout(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onLogout( );
    }

    static boost::python::object getArea( ::osiris::IPage & inst, ::osiris::PageArea const & area ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IHtmlControl> result = inst.getArea(area);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::DataItem getOption( ::osiris::String const & name ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getOption = this->get_override( "getOption" ) )
            return func_getOption( boost::ref(name) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getOption( boost::ref(name) );
        }
    }
    
    ::osiris::DataItem default_getOption( ::osiris::String const & name ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getOption( boost::ref(name) );
    }

    virtual ::osiris::String getText( ::osiris::String const & name ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getText = this->get_override( "getText" ) )
            return func_getText( boost::ref(name) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getText( boost::ref(name) );
        }
    }
    
    ::osiris::String default_getText( ::osiris::String const & name ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getText( boost::ref(name) );
    }

    virtual ::osiris::String getText( ::osiris::LanguageResult const & result ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getText = this->get_override( "getText" ) )
            return func_getText( boost::ref(result) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::getText( boost::ref(result) );
        }
    }
    
    ::osiris::String default_getText( ::osiris::LanguageResult const & result ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::getText( boost::ref(result) );
    }

    static boost::python::object helpLink( ::osiris::IPage const & inst, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.helpLink(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void initStylesheet( ::boost::shared_ptr< osiris::XMLStylesheet > stylesheet ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_initStylesheet = this->get_override( "initStylesheet" ) )
            func_initStylesheet( stylesheet );
        else{
            __pystate.leave();
            this->::osiris::IPage::initStylesheet( stylesheet );
        }
    }
    
    void default_initStylesheet( ::boost::shared_ptr< osiris::XMLStylesheet > stylesheet ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::initStylesheet( stylesheet );
    }

    virtual ::boost::shared_ptr< osiris::XMLStylesheet > loadStylesheet( ::osiris::String const & pathname ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_loadStylesheet = this->get_override( "loadStylesheet" ) )
            return func_loadStylesheet( boost::ref(pathname) );
        else{
            __pystate.leave();
            return this->::osiris::IPage::loadStylesheet( boost::ref(pathname) );
        }
    }
    
    ::boost::shared_ptr< osiris::XMLStylesheet > default_loadStylesheet( ::osiris::String const & pathname ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IPage::loadStylesheet( boost::ref(pathname) );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRender( boost::ref(writer) );
    }

    virtual void onRenderActions( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRenderActions = this->get_override( "onRenderActions" ) )
            func_onRenderActions( node );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRenderActions( node );
        }
    }
    
    virtual void default_onRenderActions( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRenderActions( node );
    }

    virtual void onRenderDocument( ::boost::shared_ptr< osiris::XMLNode > nodeRoot ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRenderDocument = this->get_override( "onRenderDocument" ) )
            func_onRenderDocument( nodeRoot );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRenderDocument( nodeRoot );
        }
    }
    
    virtual void default_onRenderDocument( ::boost::shared_ptr< osiris::XMLNode > nodeRoot ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRenderDocument( nodeRoot );
    }

    virtual void onRenderInformations( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRenderInformations = this->get_override( "onRenderInformations" ) )
            func_onRenderInformations( node );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRenderInformations( node );
        }
    }
    
    virtual void default_onRenderInformations( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRenderInformations( node );
    }

    virtual void onRenderMessages( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRenderMessages = this->get_override( "onRenderMessages" ) )
            func_onRenderMessages( node );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRenderMessages( node );
        }
    }
    
    virtual void default_onRenderMessages( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRenderMessages( node );
    }

    virtual void onRenderPathWay( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRenderPathWay = this->get_override( "onRenderPathWay" ) )
            func_onRenderPathWay( node );
        else{
            __pystate.leave();
            this->::osiris::IPage::onRenderPathWay( node );
        }
    }
    
    virtual void default_onRenderPathWay( ::boost::shared_ptr< osiris::XMLNode > node ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onRenderPathWay( node );
    }

    virtual void onXSLError( ::osiris::String const & description ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onXSLError = this->get_override( "onXSLError" ) )
            func_onXSLError( boost::ref(description) );
        else{
            __pystate.leave();
            this->::osiris::IPage::onXSLError( boost::ref(description) );
        }
    }
    
    virtual void default_onXSLError( ::osiris::String const & description ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::onXSLError( boost::ref(description) );
    }

    static boost::python::object parseOml( ::osiris::IPage & inst, ::osiris::String const & text, bool full=true, bool secure=false, bool row=false, ::osiris::OMLRenderMode mode=(::osiris::omlRenderModeOsiris), ::osiris::String const & refID=(osiris::String::EMPTY), ::osiris::String const & fullUrl=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.parseOml(text, full, secure, row, mode, refID, fullUrl);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void redirect( ::std::string const & url ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_redirect = this->get_override( "redirect" ) )
            func_redirect( url );
        else{
            __pystate.leave();
            this->::osiris::IPage::redirect( url );
        }
    }
    
    void default_redirect( ::std::string const & url ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::redirect( url );
    }

    virtual void renderLinktags( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderLinktags = this->get_override( "renderLinktags" ) )
            func_renderLinktags( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IPage::renderLinktags( boost::ref(writer) );
        }
    }
    
    void default_renderLinktags( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IPage::renderLinktags( boost::ref(writer) );
    }

    static void setMcpMode( ::osiris::IPage & inst, bool mcpMode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setMcpMode(mcpMode);
        __pythreadSaver.restore();
    }

    static void showError( ::osiris::IPage & inst, ::osiris::String const & description, ::osiris::String const & title=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.showError(description, title);
        __pythreadSaver.restore();
    }

    static void showMessage( ::osiris::IPage & inst, ::osiris::String const & description, ::osiris::String const & title=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.showMessage(description, title);
        __pythreadSaver.restore();
    }

    static void showWarning( ::osiris::IPage & inst, ::osiris::String const & description, ::osiris::String const & title=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.showWarning(description, title);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(nullptr) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::osiris::String formatTitle(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_formatTitle = this->get_override( "formatTitle" ) )
            return func_formatTitle(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::formatTitle(  );
        }
    }
    
    virtual ::osiris::String default_formatTitle(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::formatTitle( );
    }

    virtual ::osiris::String getBaseTitle(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getBaseTitle = this->get_override( "getBaseTitle" ) )
            return func_getBaseTitle(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::getBaseTitle(  );
        }
    }
    
    virtual ::osiris::String default_getBaseTitle(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::getBaseTitle( );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::getSession( );
    }

    virtual void loadViewState(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_loadViewState = this->get_override( "loadViewState" ) )
            func_loadViewState(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::loadViewState(  );
        }
    }
    
    virtual void default_loadViewState(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::loadViewState( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(nullptr) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(nullptr) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::onPreRender( );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual bool onTransmit( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onTransmit = this->get_override( "onTransmit" ) )
            return func_onTransmit( boost::ref(writer) );
        else{
            __pystate.leave();
            return this->::osiris::HtmlPage::onTransmit( boost::ref(writer) );
        }
    }
    
    virtual bool default_onTransmit( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HtmlPage::onTransmit( boost::ref(writer) );
    }

    virtual void raiseEvents(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_raiseEvents = this->get_override( "raiseEvents" ) )
            func_raiseEvents(  );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::raiseEvents(  );
        }
    }
    
    virtual void default_raiseEvents(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::raiseEvents( );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderAttributes( boost::ref(writer) );
    }

    virtual void renderBody( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderBody = this->get_override( "renderBody" ) )
            func_renderBody( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderBody( boost::ref(writer) );
        }
    }
    
    virtual void default_renderBody( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderBody( boost::ref(writer) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    virtual void renderContent( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderContent = this->get_override( "renderContent" ) )
            func_renderContent( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderContent( boost::ref(writer) );
        }
    }
    
    virtual void default_renderContent( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderContent( boost::ref(writer) );
    }

    virtual void renderCss( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderCss = this->get_override( "renderCss" ) )
            func_renderCss( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderCss( boost::ref(writer) );
        }
    }
    
    virtual void default_renderCss( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderCss( boost::ref(writer) );
    }

    virtual void renderForm( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderForm = this->get_override( "renderForm" ) )
            func_renderForm( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderForm( boost::ref(writer) );
        }
    }
    
    virtual void default_renderForm( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderForm( boost::ref(writer) );
    }

    virtual void renderHead( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderHead = this->get_override( "renderHead" ) )
            func_renderHead( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderHead( boost::ref(writer) );
        }
    }
    
    virtual void default_renderHead( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderHead( boost::ref(writer) );
    }

    virtual void renderHeader( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderHeader = this->get_override( "renderHeader" ) )
            func_renderHeader( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderHeader( boost::ref(writer) );
        }
    }
    
    virtual void default_renderHeader( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderHeader( boost::ref(writer) );
    }

    virtual void renderJavascripts( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderJavascripts = this->get_override( "renderJavascripts" ) )
            func_renderJavascripts( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderJavascripts( boost::ref(writer) );
        }
    }
    
    virtual void default_renderJavascripts( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderJavascripts( boost::ref(writer) );
    }

    virtual void renderMetatags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderMetatags = this->get_override( "renderMetatags" ) )
            func_renderMetatags( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderMetatags( boost::ref(writer) );
        }
    }
    
    virtual void default_renderMetatags( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderMetatags( boost::ref(writer) );
    }

    virtual void renderViewState( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderViewState = this->get_override( "renderViewState" ) )
            func_renderViewState( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::renderViewState( boost::ref(writer) );
        }
    }
    
    virtual void default_renderViewState( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::renderViewState( boost::ref(writer) );
    }

    virtual void reportError( ::osiris::HttpStatusCode status ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_reportError = this->get_override( "reportError" ) )
            func_reportError( status );
        else{
            __pystate.leave();
            this->::osiris::HtmlPage::reportError( status );
        }
    }
    
    void default_reportError( ::osiris::HttpStatusCode status ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlPage::reportError( status );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_IPage_class(){

    { //::osiris::IPage
        typedef ::boost::python::class_< IPage_wrapper, ::boost::python::bases< ::osiris::HtmlPage >, ::boost::noncopyable > IPage_exposer_t;
        IPage_exposer_t IPage_exposer = IPage_exposer_t( "IPage", ::boost::python::init< ::boost::shared_ptr< osiris::HttpSession > >(( ::boost::python::arg("session") )) );
        ::boost::python::scope IPage_scope( IPage_exposer );
        ::boost::python::enum_< ::osiris::IPage::RequestSource>("RequestSource")
            .value("rsOsiris", ::osiris::IPage::rsOsiris)
            .value("rsIsis", ::osiris::IPage::rsIsis)
            .export_values()
            ;
        ::boost::python::implicitly_convertible< ::boost::shared_ptr< osiris::HttpSession >, ::osiris::IPage >();
        { //::osiris::IPage::getTemplate
        
            typedef boost::python::object ( *getTemplate_function_type )( ::osiris::IPage const & );
            
            IPage_exposer.def( 
                "getTemplate"
                , getTemplate_function_type( &IPage_wrapper::getTemplate ) );
        
        }
        { //::osiris::IPage::getRequestSource
        
            typedef boost::python::object ( *getRequestSource_function_type )( ::osiris::IPage const & );
            
            IPage_exposer.def( 
                "getRequestSource"
                , getRequestSource_function_type( &IPage_wrapper::getRequestSource ) );
        
        }
        { //::osiris::IPage::getMcpMode
        
            typedef boost::python::object ( *getMcpMode_function_type )( ::osiris::IPage const & );
            
            IPage_exposer.def( 
                "getMcpMode"
                , getMcpMode_function_type( &IPage_wrapper::getMcpMode ) );
        
        }
        { //::osiris::IPage::getSessionAccount
        
            typedef boost::python::object ( *getSessionAccount_function_type )( ::osiris::IPage const & );
            
            IPage_exposer.def( 
                "getSessionAccount"
                , getSessionAccount_function_type( &IPage_wrapper::getSessionAccount ) );
        
        }
        { //::osiris::IPage::getLanguage
        
            typedef ::osiris::String ( ::osiris::IPage::*getLanguage_function_type )(  ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_getLanguage_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getLanguage"
                , getLanguage_function_type(&::osiris::IPage::getLanguage)
                , default_getLanguage_function_type(&IPage_wrapper::default_getLanguage) );
        
        }
        { //::osiris::IPage::getTimeOffset
        
            typedef ::osiris::int32 ( ::osiris::IPage::*getTimeOffset_function_type )(  ) const;
            typedef ::osiris::int32 ( IPage_wrapper::*default_getTimeOffset_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getTimeOffset"
                , getTimeOffset_function_type(&::osiris::IPage::getTimeOffset)
                , default_getTimeOffset_function_type(&IPage_wrapper::default_getTimeOffset) );
        
        }
        { //::osiris::IPage::getTimeDST
        
            typedef ::osiris::int32 ( ::osiris::IPage::*getTimeDST_function_type )(  ) const;
            typedef ::osiris::int32 ( IPage_wrapper::*default_getTimeDST_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getTimeDST"
                , getTimeDST_function_type(&::osiris::IPage::getTimeDST)
                , default_getTimeDST_function_type(&IPage_wrapper::default_getTimeDST) );
        
        }
        { //::osiris::IPage::formatDate
        
            typedef ::osiris::String ( ::osiris::IPage::*formatDate_function_type )( ::osiris::DateTime const &,::osiris::DateTime::DateTimePattern const & ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_formatDate_function_type )( ::osiris::DateTime const &,::osiris::DateTime::DateTimePattern const & ) const;
            
            IPage_exposer.def( 
                "formatDate"
                , formatDate_function_type(&::osiris::IPage::formatDate)
                , default_formatDate_function_type(&IPage_wrapper::default_formatDate)
                , ( ::boost::python::arg("dt"), ::boost::python::arg("pattern") ) );
        
        }
        { //::osiris::IPage::formatDate
        
            typedef ::osiris::String ( ::osiris::IPage::*formatDate_function_type )( ::osiris::DateTime const &,::osiris::String const & ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_formatDate_function_type )( ::osiris::DateTime const &,::osiris::String const & ) const;
            
            IPage_exposer.def( 
                "formatDate"
                , formatDate_function_type(&::osiris::IPage::formatDate)
                , default_formatDate_function_type(&IPage_wrapper::default_formatDate)
                , ( ::boost::python::arg("dt"), ::boost::python::arg("pattern") ) );
        
        }
        { //::osiris::IPage::parseOmlEx
        
            typedef ::boost::shared_ptr< osiris::OMLContext > ( ::osiris::IPage::*parseOmlEx_function_type )( ::osiris::String const &,bool,bool,bool,bool,::osiris::OMLRenderMode,::osiris::String const &,::osiris::String const & ) ;
            typedef ::boost::shared_ptr< osiris::OMLContext > ( IPage_wrapper::*default_parseOmlEx_function_type )( ::osiris::String const &,bool,bool,bool,bool,::osiris::OMLRenderMode,::osiris::String const &,::osiris::String const & ) ;
            
            IPage_exposer.def( 
                "parseOmlEx"
                , parseOmlEx_function_type(&::osiris::IPage::parseOmlEx)
                , default_parseOmlEx_function_type(&IPage_wrapper::default_parseOmlEx)
                , ( ::boost::python::arg("text"), ::boost::python::arg("enableWarning"), ::boost::python::arg("full"), ::boost::python::arg("secure"), ::boost::python::arg("row"), ::boost::python::arg("mode")=(::osiris::omlRenderModeOsiris), ::boost::python::arg("refID")=(osiris::String::EMPTY), ::boost::python::arg("fullUrl")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::IPage::getPathway
        
            typedef ::boost::shared_ptr< osiris::IdePathway > ( ::osiris::IPage::*getPathway_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::IdePathway > ( IPage_wrapper::*default_getPathway_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getPathway"
                , getPathway_function_type(&::osiris::IPage::getPathway)
                , default_getPathway_function_type(&IPage_wrapper::default_getPathway) );
        
        }
        { //::osiris::IPage::getSkin
        
            typedef ::boost::shared_ptr< osiris::IdeSkin > ( ::osiris::IPage::*getSkin_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::IdeSkin > ( IPage_wrapper::*default_getSkin_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getSkin"
                , getSkin_function_type(&::osiris::IPage::getSkin)
                , default_getSkin_function_type(&IPage_wrapper::default_getSkin) );
        
        }
        { //::osiris::IPage::getPortalFromUrl
        
            typedef ::boost::shared_ptr< osiris::Portal > ( ::osiris::IPage::*getPortalFromUrl_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::Portal > ( IPage_wrapper::*default_getPortalFromUrl_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getPortalFromUrl"
                , getPortalFromUrl_function_type(&::osiris::IPage::getPortalFromUrl)
                , default_getPortalFromUrl_function_type(&IPage_wrapper::default_getPortalFromUrl) );
        
        }
        { //::osiris::IPage::ensureAccountSession
        
            typedef void ( *ensureAccountSession_function_type )( ::osiris::IPage & );
            
            IPage_exposer.def( 
                "ensureAccountSession"
                , ensureAccountSession_function_type( &IPage_wrapper::ensureAccountSession ) );
        
        }
        { //::osiris::IPage::getPageName
        
            typedef ::osiris::String ( ::osiris::IPage::*getPageName_function_type )(  ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_getPageName_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getPageName"
                , getPageName_function_type(&::osiris::IPage::getPageName)
                , default_getPageName_function_type(&IPage_wrapper::default_getPageName) );
        
        }
        { //::osiris::IPage::onPathway
        
            typedef void ( ::osiris::IPage::*onPathway_function_type )(  ) const;
            typedef void ( IPage_wrapper::*default_onPathway_function_type )(  ) const;
            
            IPage_exposer.def( 
                "onPathway"
                , onPathway_function_type(&::osiris::IPage::onPathway)
                , default_onPathway_function_type(&IPage_wrapper::default_onPathway) );
        
        }
        { //::osiris::IPage::getPagePathway
        
            typedef ::osiris::String ( ::osiris::IPage::*getPagePathway_function_type )(  ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_getPagePathway_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getPagePathway"
                , getPagePathway_function_type(&::osiris::IPage::getPagePathway)
                , default_getPagePathway_function_type(&IPage_wrapper::default_getPagePathway) );
        
        }
        { //::osiris::IPage::createStylesheet
        
            typedef ::boost::shared_ptr< osiris::XMLStylesheet > ( ::osiris::IPage::*createStylesheet_function_type )(  ) ;
            typedef ::boost::shared_ptr< osiris::XMLStylesheet > ( IPage_wrapper::*default_createStylesheet_function_type )(  ) ;
            
            IPage_exposer.def( 
                "createStylesheet"
                , createStylesheet_function_type(&::osiris::IPage::createStylesheet)
                , default_createStylesheet_function_type(&IPage_wrapper::default_createStylesheet) );
        
        }
        { //::osiris::IPage::loginAccountWithName
        
            typedef bool ( ::osiris::IPage::*loginAccountWithName_function_type )( ::osiris::String const &,::osiris::String const &,bool ) ;
            typedef bool ( IPage_wrapper::*default_loginAccountWithName_function_type )( ::osiris::String const &,::osiris::String const &,bool ) ;
            
            IPage_exposer.def( 
                "loginAccountWithName"
                , loginAccountWithName_function_type(&::osiris::IPage::loginAccountWithName)
                , default_loginAccountWithName_function_type(&IPage_wrapper::default_loginAccountWithName)
                , ( ::boost::python::arg("login"), ::boost::python::arg("password"), ::boost::python::arg("save_password")=(bool)(false) ) );
        
        }
        { //::osiris::IPage::loginAccountWithID
        
            typedef bool ( ::osiris::IPage::*loginAccountWithID_function_type )( ::osiris::String const &,::osiris::String const &,bool ) ;
            typedef bool ( IPage_wrapper::*default_loginAccountWithID_function_type )( ::osiris::String const &,::osiris::String const &,bool ) ;
            
            IPage_exposer.def( 
                "loginAccountWithID"
                , loginAccountWithID_function_type(&::osiris::IPage::loginAccountWithID)
                , default_loginAccountWithID_function_type(&IPage_wrapper::default_loginAccountWithID)
                , ( ::boost::python::arg("accountID"), ::boost::python::arg("password"), ::boost::python::arg("save_password")=(bool)(false) ) );
        
        }
        { //::osiris::IPage::isMcpModeRequired
        
            typedef bool ( ::osiris::IPage::*isMcpModeRequired_function_type )(  ) const;
            typedef bool ( IPage_wrapper::*default_isMcpModeRequired_function_type )(  ) const;
            
            IPage_exposer.def( 
                "isMcpModeRequired"
                , isMcpModeRequired_function_type(&::osiris::IPage::isMcpModeRequired)
                , default_isMcpModeRequired_function_type(&IPage_wrapper::default_isMcpModeRequired) );
        
        }
        { //::osiris::IPage::isIsisAllowed
        
            typedef bool ( ::osiris::IPage::*isIsisAllowed_function_type )(  ) const;
            typedef bool ( IPage_wrapper::*default_isIsisAllowed_function_type )(  ) const;
            
            IPage_exposer.def( 
                "isIsisAllowed"
                , isIsisAllowed_function_type(&::osiris::IPage::isIsisAllowed)
                , default_isIsisAllowed_function_type(&IPage_wrapper::default_isIsisAllowed) );
        
        }
        { //::osiris::IPage::transmit
        
            typedef bool ( ::osiris::IPage::*transmit_function_type )(  ) ;
            typedef bool ( IPage_wrapper::*default_transmit_function_type )(  ) ;
            
            IPage_exposer.def( 
                "transmit"
                , transmit_function_type(&::osiris::IPage::transmit)
                , default_transmit_function_type(&IPage_wrapper::default_transmit) );
        
        }
        { //::osiris::IPage::getDatabase
        
            typedef boost::python::object ( *getDatabase_function_type )( ::osiris::IPage const & );
            
            IPage_exposer.def( 
                "getDatabase"
                , getDatabase_function_type( &IPage_wrapper::getDatabase ) );
        
        }
        { //::osiris::IPage::closeDatabase
        
            typedef void ( *closeDatabase_function_type )( ::osiris::IPage &,bool );
            
            IPage_exposer.def( 
                "closeDatabase"
                , closeDatabase_function_type( &IPage_wrapper::closeDatabase )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("commit")=(bool)(true) ) );
        
        }
        { //::osiris::IPage::onLoadResources
        
            typedef void ( IPage_wrapper::*onLoadResources_function_type )(  ) ;
            
            IPage_exposer.def( 
                "onLoadResources"
                , onLoadResources_function_type( &IPage_wrapper::default_onLoadResources ) );
        
        }
        { //::osiris::IPage::onInit
        
            typedef void ( IPage_wrapper::*onInit_function_type )(  ) ;
            
            IPage_exposer.def( 
                "onInit"
                , onInit_function_type( &IPage_wrapper::default_onInit ) );
        
        }
        { //::osiris::IPage::onLoad
        
            typedef void ( IPage_wrapper::*onLoad_function_type )(  ) ;
            
            IPage_exposer.def( 
                "onLoad"
                , onLoad_function_type( &IPage_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IPage::onLogout
        
            typedef void ( IPage_wrapper::*onLogout_function_type )(  ) ;
            
            IPage_exposer.def( 
                "onLogout"
                , onLogout_function_type( &IPage_wrapper::default_onLogout ) );
        
        }
        { //::osiris::IPage::getArea
        
            typedef boost::python::object ( *getArea_function_type )( ::osiris::IPage &,::osiris::PageArea const & );
            
            IPage_exposer.def( 
                "getArea"
                , getArea_function_type( &IPage_wrapper::getArea )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("area") ) );
        
        }
        { //::osiris::IPage::getOption
        
            typedef ::osiris::DataItem ( ::osiris::IPage::*getOption_function_type )( ::osiris::String const & ) const;
            typedef ::osiris::DataItem ( IPage_wrapper::*default_getOption_function_type )( ::osiris::String const & ) const;
            
            IPage_exposer.def( 
                "getOption"
                , getOption_function_type(&::osiris::IPage::getOption)
                , default_getOption_function_type(&IPage_wrapper::default_getOption)
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IPage::getText
        
            typedef ::osiris::String ( ::osiris::IPage::*getText_function_type )( ::osiris::String const & ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_getText_function_type )( ::osiris::String const & ) const;
            
            IPage_exposer.def( 
                "getText"
                , getText_function_type(&::osiris::IPage::getText)
                , default_getText_function_type(&IPage_wrapper::default_getText)
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IPage::getText
        
            typedef ::osiris::String ( ::osiris::IPage::*getText_function_type )( ::osiris::LanguageResult const & ) const;
            typedef ::osiris::String ( IPage_wrapper::*default_getText_function_type )( ::osiris::LanguageResult const & ) const;
            
            IPage_exposer.def( 
                "getText"
                , getText_function_type(&::osiris::IPage::getText)
                , default_getText_function_type(&IPage_wrapper::default_getText)
                , ( ::boost::python::arg("result") ) );
        
        }
        { //::osiris::IPage::helpLink
        
            typedef boost::python::object ( *helpLink_function_type )( ::osiris::IPage const &,::osiris::String const & );
            
            IPage_exposer.def( 
                "helpLink"
                , helpLink_function_type( &IPage_wrapper::helpLink )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::IPage::initStylesheet
        
            typedef void ( ::osiris::IPage::*initStylesheet_function_type )( ::boost::shared_ptr< osiris::XMLStylesheet > ) ;
            typedef void ( IPage_wrapper::*default_initStylesheet_function_type )( ::boost::shared_ptr< osiris::XMLStylesheet > ) ;
            
            IPage_exposer.def( 
                "initStylesheet"
                , initStylesheet_function_type(&::osiris::IPage::initStylesheet)
                , default_initStylesheet_function_type(&IPage_wrapper::default_initStylesheet)
                , ( ::boost::python::arg("stylesheet") ) );
        
        }
        { //::osiris::IPage::loadStylesheet
        
            typedef ::boost::shared_ptr< osiris::XMLStylesheet > ( ::osiris::IPage::*loadStylesheet_function_type )( ::osiris::String const & ) ;
            typedef ::boost::shared_ptr< osiris::XMLStylesheet > ( IPage_wrapper::*default_loadStylesheet_function_type )( ::osiris::String const & ) ;
            
            IPage_exposer.def( 
                "loadStylesheet"
                , loadStylesheet_function_type(&::osiris::IPage::loadStylesheet)
                , default_loadStylesheet_function_type(&IPage_wrapper::default_loadStylesheet)
                , ( ::boost::python::arg("pathname") ) );
        
        }
        { //::osiris::IPage::onRender
        
            typedef void ( IPage_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "onRender"
                , onRender_function_type( &IPage_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IPage::onRenderActions
        
            typedef void ( IPage_wrapper::*onRenderActions_function_type )( ::boost::shared_ptr< osiris::XMLNode > ) ;
            
            IPage_exposer.def( 
                "onRenderActions"
                , onRenderActions_function_type( &IPage_wrapper::default_onRenderActions )
                , ( ::boost::python::arg("node") ) );
        
        }
        { //::osiris::IPage::onRenderDocument
        
            typedef void ( IPage_wrapper::*onRenderDocument_function_type )( ::boost::shared_ptr< osiris::XMLNode > ) ;
            
            IPage_exposer.def( 
                "onRenderDocument"
                , onRenderDocument_function_type( &IPage_wrapper::default_onRenderDocument )
                , ( ::boost::python::arg("nodeRoot") ) );
        
        }
        { //::osiris::IPage::onRenderInformations
        
            typedef void ( IPage_wrapper::*onRenderInformations_function_type )( ::boost::shared_ptr< osiris::XMLNode > ) ;
            
            IPage_exposer.def( 
                "onRenderInformations"
                , onRenderInformations_function_type( &IPage_wrapper::default_onRenderInformations )
                , ( ::boost::python::arg("node") ) );
        
        }
        { //::osiris::IPage::onRenderMessages
        
            typedef void ( IPage_wrapper::*onRenderMessages_function_type )( ::boost::shared_ptr< osiris::XMLNode > ) ;
            
            IPage_exposer.def( 
                "onRenderMessages"
                , onRenderMessages_function_type( &IPage_wrapper::default_onRenderMessages )
                , ( ::boost::python::arg("node") ) );
        
        }
        { //::osiris::IPage::onRenderPathWay
        
            typedef void ( IPage_wrapper::*onRenderPathWay_function_type )( ::boost::shared_ptr< osiris::XMLNode > ) ;
            
            IPage_exposer.def( 
                "onRenderPathWay"
                , onRenderPathWay_function_type( &IPage_wrapper::default_onRenderPathWay )
                , ( ::boost::python::arg("node") ) );
        
        }
        { //::osiris::IPage::onXSLError
        
            typedef void ( IPage_wrapper::*onXSLError_function_type )( ::osiris::String const & ) ;
            
            IPage_exposer.def( 
                "onXSLError"
                , onXSLError_function_type( &IPage_wrapper::default_onXSLError )
                , ( ::boost::python::arg("description") ) );
        
        }
        { //::osiris::IPage::parseOml
        
            typedef boost::python::object ( *parseOml_function_type )( ::osiris::IPage &,::osiris::String const &,bool,bool,bool,::osiris::OMLRenderMode,::osiris::String const &,::osiris::String const & );
            
            IPage_exposer.def( 
                "parseOml"
                , parseOml_function_type( &IPage_wrapper::parseOml )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("text"), ::boost::python::arg("full")=(bool)(true), ::boost::python::arg("secure")=(bool)(false), ::boost::python::arg("row")=(bool)(false), ::boost::python::arg("mode")=(::osiris::omlRenderModeOsiris), ::boost::python::arg("refID")=(osiris::String::EMPTY), ::boost::python::arg("fullUrl")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::IPage::redirect
        
            typedef void ( ::osiris::IPage::*redirect_function_type )( ::std::string const & ) ;
            typedef void ( IPage_wrapper::*default_redirect_function_type )( ::std::string const & ) ;
            
            IPage_exposer.def( 
                "redirect"
                , redirect_function_type(&::osiris::IPage::redirect)
                , default_redirect_function_type(&IPage_wrapper::default_redirect)
                , ( ::boost::python::arg("url") ) );
        
        }
        { //::osiris::IPage::renderLinktags
        
            typedef void ( ::osiris::IPage::*renderLinktags_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IPage_wrapper::*default_renderLinktags_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderLinktags"
                , renderLinktags_function_type(&::osiris::IPage::renderLinktags)
                , default_renderLinktags_function_type(&IPage_wrapper::default_renderLinktags)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IPage::setMcpMode
        
            typedef void ( *setMcpMode_function_type )( ::osiris::IPage &,bool );
            
            IPage_exposer.def( 
                "setMcpMode"
                , setMcpMode_function_type( &IPage_wrapper::setMcpMode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("mcpMode") ) );
        
        }
        { //::osiris::IPage::showError
        
            typedef void ( *showError_function_type )( ::osiris::IPage &,::osiris::String const &,::osiris::String const & );
            
            IPage_exposer.def( 
                "showError"
                , showError_function_type( &IPage_wrapper::showError )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("description"), ::boost::python::arg("title")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::IPage::showMessage
        
            typedef void ( *showMessage_function_type )( ::osiris::IPage &,::osiris::String const &,::osiris::String const & );
            
            IPage_exposer.def( 
                "showMessage"
                , showMessage_function_type( &IPage_wrapper::showMessage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("description"), ::boost::python::arg("title")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::IPage::showWarning
        
            typedef void ( *showWarning_function_type )( ::osiris::IPage &,::osiris::String const &,::osiris::String const & );
            
            IPage_exposer.def( 
                "showWarning"
                , showWarning_function_type( &IPage_wrapper::showWarning )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("description"), ::boost::python::arg("title")=(osiris::String::EMPTY) ) );
        
        }
        IPage_exposer.def_readonly( "EVENT_ONLOGOUT", ::osiris::IPage::EVENT_ONLOGOUT );
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( IPage_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            IPage_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &IPage_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( IPage_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            IPage_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &IPage_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(nullptr) ) );
        
        }
        { //::osiris::HtmlPage::formatTitle
        
            typedef ::osiris::String ( IPage_wrapper::*formatTitle_function_type )(  ) ;
            
            IPage_exposer.def( 
                "formatTitle"
                , formatTitle_function_type( &IPage_wrapper::default_formatTitle ) );
        
        }
        { //::osiris::HtmlPage::getBaseTitle
        
            typedef ::osiris::String ( IPage_wrapper::*getBaseTitle_function_type )(  ) ;
            
            IPage_exposer.def( 
                "getBaseTitle"
                , getBaseTitle_function_type( &IPage_wrapper::default_getBaseTitle ) );
        
        }
        { //::osiris::HtmlPage::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::HtmlPage::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( IPage_wrapper::*default_getSession_function_type )(  ) const;
            
            IPage_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::HtmlPage::getSession)
                , default_getSession_function_type(&IPage_wrapper::default_getSession) );
        
        }
        { //::osiris::HtmlPage::loadViewState
        
            typedef void ( IPage_wrapper::*loadViewState_function_type )(  ) ;
            
            IPage_exposer.def( 
                "loadViewState"
                , loadViewState_function_type( &IPage_wrapper::default_loadViewState ) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( IPage_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            IPage_exposer.def( 
                "onEvent"
                , onEvent_function_type( &IPage_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(nullptr) ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( IPage_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            IPage_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &IPage_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::HtmlPage::onPreRender
        
            typedef void ( IPage_wrapper::*onPreRender_function_type )(  ) ;
            
            IPage_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &IPage_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( IPage_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IPage_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &IPage_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::HtmlPage::onTransmit
        
            typedef bool ( IPage_wrapper::*onTransmit_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "onTransmit"
                , onTransmit_function_type( &IPage_wrapper::default_onTransmit )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::raiseEvents
        
            typedef void ( IPage_wrapper::*raiseEvents_function_type )(  ) ;
            
            IPage_exposer.def( 
                "raiseEvents"
                , raiseEvents_function_type( &IPage_wrapper::default_raiseEvents ) );
        
        }
        { //::osiris::IHtmlControl::renderAttributes
        
            typedef void ( ::osiris::IHtmlControl::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IPage_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::IHtmlControl::renderAttributes)
                , default_renderAttributes_function_type(&IPage_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderBody
        
            typedef void ( IPage_wrapper::*renderBody_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderBody"
                , renderBody_function_type( &IPage_wrapper::default_renderBody )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( IPage_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&IPage_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderContent
        
            typedef void ( IPage_wrapper::*renderContent_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderContent"
                , renderContent_function_type( &IPage_wrapper::default_renderContent )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderCss
        
            typedef void ( IPage_wrapper::*renderCss_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderCss"
                , renderCss_function_type( &IPage_wrapper::default_renderCss )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderForm
        
            typedef void ( IPage_wrapper::*renderForm_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderForm"
                , renderForm_function_type( &IPage_wrapper::default_renderForm )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderHead
        
            typedef void ( IPage_wrapper::*renderHead_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderHead"
                , renderHead_function_type( &IPage_wrapper::default_renderHead )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderHeader
        
            typedef void ( IPage_wrapper::*renderHeader_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderHeader"
                , renderHeader_function_type( &IPage_wrapper::default_renderHeader )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderJavascripts
        
            typedef void ( IPage_wrapper::*renderJavascripts_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderJavascripts"
                , renderJavascripts_function_type( &IPage_wrapper::default_renderJavascripts )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderMetatags
        
            typedef void ( IPage_wrapper::*renderMetatags_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderMetatags"
                , renderMetatags_function_type( &IPage_wrapper::default_renderMetatags )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::renderViewState
        
            typedef void ( IPage_wrapper::*renderViewState_function_type )( ::osiris::HtmlWriter & ) ;
            
            IPage_exposer.def( 
                "renderViewState"
                , renderViewState_function_type( &IPage_wrapper::default_renderViewState )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlPage::reportError
        
            typedef void ( ::osiris::HtmlPage::*reportError_function_type )( ::osiris::HttpStatusCode ) ;
            typedef void ( IPage_wrapper::*default_reportError_function_type )( ::osiris::HttpStatusCode ) ;
            
            IPage_exposer.def( 
                "reportError"
                , reportError_function_type(&::osiris::HtmlPage::reportError)
                , default_reportError_function_type(&IPage_wrapper::default_reportError)
                , ( ::boost::python::arg("status") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( IPage_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            IPage_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &IPage_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "mcpMode"[fget=::osiris::IPage::getMcpMode, fset=::osiris::IPage::setMcpMode]
        
            typedef bool ( ::osiris::IPage::*fget )(  ) const;
            typedef void ( ::osiris::IPage::*fset )( bool ) ;
            
            IPage_exposer.add_property( 
                "mcpMode"
                , fget( &::osiris::IPage::getMcpMode )
                , fset( &::osiris::IPage::setMcpMode )
                , "get\\set property, built on top of \"bool osiris::IPage::getMcpMode() const [member function]\" and \"void osiris::IPage::setMcpMode(bool mcpMode) [member function]\"" );
        
        }
        { //property "template"[fget=::osiris::IPage::getTemplate]
        
            typedef ::boost::shared_ptr<osiris::HtmlXSLControl> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "template"
                , fget( &::osiris::IPage::getTemplate )
                , "get property, built on top of \"boost::shared_ptr<osiris::HtmlXSLControl> osiris::IPage::getTemplate() const [member function]\"" );
        
        }
        { //property "requestSource"[fget=::osiris::IPage::getRequestSource]
        
            typedef ::osiris::IPage::RequestSource ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "requestSource"
                , fget( &::osiris::IPage::getRequestSource )
                , "get property, built on top of \"osiris::IPage::RequestSource osiris::IPage::getRequestSource() const [member function]\"" );
        
        }
        { //property "sessionAccount"[fget=::osiris::IPage::getSessionAccount]
        
            typedef ::boost::shared_ptr<osiris::IdeSession> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "sessionAccount"
                , fget( &::osiris::IPage::getSessionAccount )
                , "get property, built on top of \"boost::shared_ptr<osiris::IdeSession> osiris::IPage::getSessionAccount() const [member function]\"" );
        
        }
        { //property "language"[fget=::osiris::IPage::getLanguage]
        
            typedef ::osiris::String ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "language"
                , fget( &::osiris::IPage::getLanguage )
                , "get property, built on top of \"osiris::String osiris::IPage::getLanguage() const [member function]\"" );
        
        }
        { //property "timeOffset"[fget=::osiris::IPage::getTimeOffset]
        
            typedef ::osiris::int32 ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "timeOffset"
                , fget( &::osiris::IPage::getTimeOffset )
                , "get property, built on top of \"osiris::int32 osiris::IPage::getTimeOffset() const [member function]\"" );
        
        }
        { //property "timeDST"[fget=::osiris::IPage::getTimeDST]
        
            typedef ::osiris::int32 ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "timeDST"
                , fget( &::osiris::IPage::getTimeDST )
                , "get property, built on top of \"osiris::int32 osiris::IPage::getTimeDST() const [member function]\"" );
        
        }
        { //property "pathway"[fget=::osiris::IPage::getPathway]
        
            typedef ::boost::shared_ptr<osiris::IdePathway> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "pathway"
                , fget( &::osiris::IPage::getPathway )
                , "get property, built on top of \"boost::shared_ptr<osiris::IdePathway> osiris::IPage::getPathway() const [member function]\"" );
        
        }
        { //property "skin"[fget=::osiris::IPage::getSkin]
        
            typedef ::boost::shared_ptr<osiris::IdeSkin> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "skin"
                , fget( &::osiris::IPage::getSkin )
                , "get property, built on top of \"boost::shared_ptr<osiris::IdeSkin> osiris::IPage::getSkin() const [member function]\"" );
        
        }
        { //property "portalFromUrl"[fget=::osiris::IPage::getPortalFromUrl]
        
            typedef ::boost::shared_ptr<osiris::Portal> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "portalFromUrl"
                , fget( &::osiris::IPage::getPortalFromUrl )
                , "get property, built on top of \"boost::shared_ptr<osiris::Portal> osiris::IPage::getPortalFromUrl() const [member function]\"" );
        
        }
        { //property "pageName"[fget=::osiris::IPage::getPageName]
        
            typedef ::osiris::String ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "pageName"
                , fget( &::osiris::IPage::getPageName )
                , "get property, built on top of \"osiris::String osiris::IPage::getPageName() const [member function]\"" );
        
        }
        { //property "pagePathway"[fget=::osiris::IPage::getPagePathway]
        
            typedef ::osiris::String ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "pagePathway"
                , fget( &::osiris::IPage::getPagePathway )
                , "get property, built on top of \"osiris::String osiris::IPage::getPagePathway() const [member function]\"" );
        
        }
        { //property "database"[fget=::osiris::IPage::getDatabase]
        
            typedef ::boost::shared_ptr<osiris::IPortalDatabase> ( ::osiris::IPage::*fget )(  ) const;
            
            IPage_exposer.add_property( 
                "database"
                , fget( &::osiris::IPage::getDatabase )
                , "get property, built on top of \"boost::shared_ptr<osiris::IPortalDatabase> osiris::IPage::getDatabase() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPage >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPage >, boost::shared_ptr< ::boost::signals::trackable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPage >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IHtmlControl > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPage >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IPortalPage >, boost::shared_ptr< ::osiris::IPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IMainPage >, boost::shared_ptr< ::osiris::IPage > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlVirtualPage< osiris::IMainPage > >, boost::shared_ptr< ::osiris::IPage > >();
    }

}
