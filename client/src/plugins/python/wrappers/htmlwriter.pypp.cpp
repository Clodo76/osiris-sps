// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmlwriter.h"
#include "htmlwriter.pypp.hpp"

namespace bp = boost::python;

struct HtmlWriter_wrapper : ::osiris::HtmlWriter, ::osiris::PythonWrapper< ::osiris::HtmlWriter > {

    HtmlWriter_wrapper(::osiris::HtmlWriter const & arg )
    : ::osiris::HtmlWriter( arg )
      , ::osiris::PythonWrapper< ::osiris::HtmlWriter >(){
        // copy constructor
        
    }

    HtmlWriter_wrapper( )
    : ::osiris::HtmlWriter( )
      , ::osiris::PythonWrapper< ::osiris::HtmlWriter >(){
        // nullptr constructor
    
    }

    static boost::python::object getHtml( ::osiris::HtmlWriter const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getHtml();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getURL( ::osiris::HtmlWriter const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getURL();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getError( ::osiris::HtmlWriter const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getError();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static void writeLine_139e4c71f4ef2057dad10d7dfb730427( ::osiris::HtmlWriter & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.writeLine();
        __pythreadSaver.restore();
    }

    static void writeAttribute( ::osiris::HtmlWriter & inst, ::osiris::String const & name, ::osiris::String const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.writeAttribute(name, value);
        __pythreadSaver.restore();
    }

    static void writeText( ::osiris::HtmlWriter & inst, ::osiris::String const & tag, ::osiris::String const & text ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.writeText(tag, text);
        __pythreadSaver.restore();
    }

    static void br( ::osiris::HtmlWriter & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.br();
        __pythreadSaver.restore();
    }

    static void indent( ::osiris::HtmlWriter & inst, ::osiris::uint16 level=1 ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.indent(level);
        __pythreadSaver.restore();
    }

    static void unindent( ::osiris::HtmlWriter & inst, ::osiris::uint16 level=1 ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.unindent(level);
        __pythreadSaver.restore();
    }

    static void endTag( ::osiris::HtmlWriter & inst, bool unindentate=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.endTag(unindentate);
        __pythreadSaver.restore();
    }

    static void closeTag_4b7660fea0e8cd67371db2757ea8d827( ::osiris::HtmlWriter & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.closeTag();
        __pythreadSaver.restore();
    }

    static void selfCloseTag( ::osiris::HtmlWriter & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.selfCloseTag();
        __pythreadSaver.restore();
    }

    void _writeIndent(  ){
        ::osiris::HtmlWriter::_writeIndent(  );
    }

    void _add( ::osiris::String const & html ){
        ::osiris::HtmlWriter::_add( boost::ref(html) );
    }

    static void add( ::osiris::HtmlWriter & inst, ::osiris::String const & html ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.add(html);
        __pythreadSaver.restore();
    }

    static void beginTag( ::osiris::HtmlWriter & inst, ::osiris::String const & name, bool indentate=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.beginTag(name, indentate);
        __pythreadSaver.restore();
    }

    static void closeTag_b3c462ec28281990d02dba069320de7c( ::osiris::HtmlWriter & inst, ::osiris::String const & name, bool indentated=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.closeTag(name, indentated);
        __pythreadSaver.restore();
    }

    static ::osiris::String makeTagBegin( ::osiris::String const & name ){
        return ::osiris::HtmlWriter::makeTagBegin( boost::ref(name) );
    }

    static ::osiris::String makeTagEnd( ::osiris::String const & name ){
        return ::osiris::HtmlWriter::makeTagEnd( boost::ref(name) );
    }

    static void openTag( ::osiris::HtmlWriter & inst, ::osiris::String const & name, bool indentated=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.openTag(name, indentated);
        __pythreadSaver.restore();
    }

    static void setError( ::osiris::HtmlWriter & inst, ::osiris::String const & error ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setError(error);
        __pythreadSaver.restore();
    }

    static void setHtml( ::osiris::HtmlWriter & inst, ::osiris::String const & html ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHtml(html);
        __pythreadSaver.restore();
    }

    static void setURL( ::osiris::HtmlWriter & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setURL(url);
        __pythreadSaver.restore();
    }

    static void write( ::osiris::HtmlWriter & inst, ::osiris::String const & html ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.write(html);
        __pythreadSaver.restore();
    }

    static void writeLine_0488305f9b7348a8fe48cb6482973837( ::osiris::HtmlWriter & inst, ::osiris::String const & html ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.writeLine(html);
        __pythreadSaver.restore();
    }

};

void register_HtmlWriter_class(){

    { //::osiris::HtmlWriter
        typedef ::boost::python::class_< HtmlWriter_wrapper, ::boost::noncopyable > HtmlWriter_exposer_t;
        HtmlWriter_exposer_t HtmlWriter_exposer = HtmlWriter_exposer_t( "HtmlWriter", ::boost::python::no_init );
        ::boost::python::scope HtmlWriter_scope( HtmlWriter_exposer );
        HtmlWriter_exposer.def( ::boost::python::init< >() );
        { //::osiris::HtmlWriter::getHtml
        
            typedef boost::python::object ( *getHtml_function_type )( ::osiris::HtmlWriter const & );
            
            HtmlWriter_exposer.def( 
                "getHtml"
                , getHtml_function_type( &HtmlWriter_wrapper::getHtml ) );
        
        }
        { //::osiris::HtmlWriter::getURL
        
            typedef boost::python::object ( *getURL_function_type )( ::osiris::HtmlWriter const & );
            
            HtmlWriter_exposer.def( 
                "getURL"
                , getURL_function_type( &HtmlWriter_wrapper::getURL ) );
        
        }
        { //::osiris::HtmlWriter::getError
        
            typedef boost::python::object ( *getError_function_type )( ::osiris::HtmlWriter const & );
            
            HtmlWriter_exposer.def( 
                "getError"
                , getError_function_type( &HtmlWriter_wrapper::getError ) );
        
        }
        { //::osiris::HtmlWriter::writeLine
        
            typedef void ( *writeLine_function_type )( ::osiris::HtmlWriter & );
            
            HtmlWriter_exposer.def( 
                "writeLine"
                , writeLine_function_type( &HtmlWriter_wrapper::writeLine_139e4c71f4ef2057dad10d7dfb730427 ) );
        
        }
        { //::osiris::HtmlWriter::writeAttribute
        
            typedef void ( *writeAttribute_function_type )( ::osiris::HtmlWriter &,::osiris::String const &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "writeAttribute"
                , writeAttribute_function_type( &HtmlWriter_wrapper::writeAttribute )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HtmlWriter::writeText
        
            typedef void ( *writeText_function_type )( ::osiris::HtmlWriter &,::osiris::String const &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "writeText"
                , writeText_function_type( &HtmlWriter_wrapper::writeText )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("tag"), ::boost::python::arg("text") ) );
        
        }
        { //::osiris::HtmlWriter::br
        
            typedef void ( *br_function_type )( ::osiris::HtmlWriter & );
            
            HtmlWriter_exposer.def( 
                "br"
                , br_function_type( &HtmlWriter_wrapper::br ) );
        
        }
        { //::osiris::HtmlWriter::indent
        
            typedef void ( *indent_function_type )( ::osiris::HtmlWriter &,::osiris::uint16 );
            
            HtmlWriter_exposer.def( 
                "indent"
                , indent_function_type( &HtmlWriter_wrapper::indent )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("level")=(::osiris::uint16)(1) ) );
        
        }
        { //::osiris::HtmlWriter::unindent
        
            typedef void ( *unindent_function_type )( ::osiris::HtmlWriter &,::osiris::uint16 );
            
            HtmlWriter_exposer.def( 
                "unindent"
                , unindent_function_type( &HtmlWriter_wrapper::unindent )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("level")=(::osiris::uint16)(1) ) );
        
        }
        { //::osiris::HtmlWriter::endTag
        
            typedef void ( *endTag_function_type )( ::osiris::HtmlWriter &,bool );
            
            HtmlWriter_exposer.def( 
                "endTag"
                , endTag_function_type( &HtmlWriter_wrapper::endTag )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("unindentate")=(bool)(true) ) );
        
        }
        { //::osiris::HtmlWriter::closeTag
        
            typedef void ( *closeTag_function_type )( ::osiris::HtmlWriter & );
            
            HtmlWriter_exposer.def( 
                "closeTag"
                , closeTag_function_type( &HtmlWriter_wrapper::closeTag_4b7660fea0e8cd67371db2757ea8d827 ) );
        
        }
        { //::osiris::HtmlWriter::selfCloseTag
        
            typedef void ( *selfCloseTag_function_type )( ::osiris::HtmlWriter & );
            
            HtmlWriter_exposer.def( 
                "selfCloseTag"
                , selfCloseTag_function_type( &HtmlWriter_wrapper::selfCloseTag ) );
        
        }
        { //::osiris::HtmlWriter::_writeIndent
        
            typedef void ( HtmlWriter_wrapper::*_writeIndent_function_type )(  ) ;
            
            HtmlWriter_exposer.def( 
                "_writeIndent"
                , _writeIndent_function_type( &HtmlWriter_wrapper::_writeIndent ) );
        
        }
        { //::osiris::HtmlWriter::_add
        
            typedef void ( HtmlWriter_wrapper::*_add_function_type )( ::osiris::String const & ) ;
            
            HtmlWriter_exposer.def( 
                "_add"
                , _add_function_type( &HtmlWriter_wrapper::_add )
                , ( ::boost::python::arg("html") ) );
        
        }
        { //::osiris::HtmlWriter::add
        
            typedef void ( *add_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "add"
                , add_function_type( &HtmlWriter_wrapper::add )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) );
        
        }
        { //::osiris::HtmlWriter::beginTag
        
            typedef void ( *beginTag_function_type )( ::osiris::HtmlWriter &,::osiris::String const &,bool );
            
            HtmlWriter_exposer.def( 
                "beginTag"
                , beginTag_function_type( &HtmlWriter_wrapper::beginTag )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("indentate")=(bool)(true) ) );
        
        }
        { //::osiris::HtmlWriter::closeTag
        
            typedef void ( *closeTag_function_type )( ::osiris::HtmlWriter &,::osiris::String const &,bool );
            
            HtmlWriter_exposer.def( 
                "closeTag"
                , closeTag_function_type( &HtmlWriter_wrapper::closeTag_b3c462ec28281990d02dba069320de7c )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("indentated")=(bool)(true) ) );
        
        }
        { //::osiris::HtmlWriter::makeTagBegin
        
            typedef ::osiris::String ( *makeTagBegin_function_type )( ::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "makeTagBegin"
                , makeTagBegin_function_type( &HtmlWriter_wrapper::makeTagBegin )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HtmlWriter::makeTagEnd
        
            typedef ::osiris::String ( *makeTagEnd_function_type )( ::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "makeTagEnd"
                , makeTagEnd_function_type( &HtmlWriter_wrapper::makeTagEnd )
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HtmlWriter::openTag
        
            typedef void ( *openTag_function_type )( ::osiris::HtmlWriter &,::osiris::String const &,bool );
            
            HtmlWriter_exposer.def( 
                "openTag"
                , openTag_function_type( &HtmlWriter_wrapper::openTag )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("indentated")=(bool)(true) ) );
        
        }
        { //::osiris::HtmlWriter::setError
        
            typedef void ( *setError_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "setError"
                , setError_function_type( &HtmlWriter_wrapper::setError )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("error") ) );
        
        }
        { //::osiris::HtmlWriter::setHtml
        
            typedef void ( *setHtml_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "setHtml"
                , setHtml_function_type( &HtmlWriter_wrapper::setHtml )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) );
        
        }
        { //::osiris::HtmlWriter::setURL
        
            typedef void ( *setURL_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "setURL"
                , setURL_function_type( &HtmlWriter_wrapper::setURL )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HtmlWriter::write
        
            typedef void ( *write_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "write"
                , write_function_type( &HtmlWriter_wrapper::write )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) );
        
        }
        { //::osiris::HtmlWriter::writeLine
        
            typedef void ( *writeLine_function_type )( ::osiris::HtmlWriter &,::osiris::String const & );
            
            HtmlWriter_exposer.def( 
                "writeLine"
                , writeLine_function_type( &HtmlWriter_wrapper::writeLine_0488305f9b7348a8fe48cb6482973837 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html") ) );
        
        }
        HtmlWriter_exposer.def_readonly( "BLANK", ::osiris::HtmlWriter::BLANK );
        HtmlWriter_exposer.def_readonly( "BR", ::osiris::HtmlWriter::BR );
        HtmlWriter_exposer.def_readonly( "INDENT", ::osiris::HtmlWriter::INDENT );
        HtmlWriter_exposer.def_readonly( "NEW_LINE", ::osiris::HtmlWriter::NEW_LINE );
        HtmlWriter_exposer.def_readonly( "SPACE", ::osiris::HtmlWriter::SPACE );
        HtmlWriter_exposer.def_readonly( "TAG_END_LEFT", ::osiris::HtmlWriter::TAG_END_LEFT );
        HtmlWriter_exposer.def_readonly( "TAG_LEFT", ::osiris::HtmlWriter::TAG_LEFT );
        HtmlWriter_exposer.def_readonly( "TAG_RIGHT", ::osiris::HtmlWriter::TAG_RIGHT );
        HtmlWriter_exposer.def_readonly( "TAG_SELF_CLOSE", ::osiris::HtmlWriter::TAG_SELF_CLOSE );
        HtmlWriter_exposer.staticmethod( "makeTagBegin" );
        HtmlWriter_exposer.staticmethod( "makeTagEnd" );
        { //property "html"[fget=::osiris::HtmlWriter::getHtml, fset=::osiris::HtmlWriter::setHtml]
        
            typedef ::osiris::String const & ( ::osiris::HtmlWriter::*fget )(  ) const;
            typedef void ( ::osiris::HtmlWriter::*fset )( ::osiris::String const & ) ;
            
            HtmlWriter_exposer.add_property( 
                "html"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlWriter::getHtml )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlWriter::setHtml )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlWriter::getHtml() const [member function]\" and \"void osiris::HtmlWriter::setHtml(osiris::String const & html) [member function]\"" );
        
        }
        { //property "url"[fget=::osiris::HtmlWriter::getURL, fset=::osiris::HtmlWriter::setURL]
        
            typedef ::osiris::String const & ( ::osiris::HtmlWriter::*fget )(  ) const;
            typedef void ( ::osiris::HtmlWriter::*fset )( ::osiris::String const & ) ;
            
            HtmlWriter_exposer.add_property( 
                "url"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlWriter::getURL )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlWriter::setURL )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlWriter::getURL() const [member function]\" and \"void osiris::HtmlWriter::setURL(osiris::String const & url) [member function]\"" );
        
        }
        { //property "error"[fget=::osiris::HtmlWriter::getError, fset=::osiris::HtmlWriter::setError]
        
            typedef ::osiris::String const & ( ::osiris::HtmlWriter::*fget )(  ) const;
            typedef void ( ::osiris::HtmlWriter::*fset )( ::osiris::String const & ) ;
            
            HtmlWriter_exposer.add_property( 
                "error"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlWriter::getError )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlWriter::setError )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlWriter::getError() const [member function]\" and \"void osiris::HtmlWriter::setError(osiris::String const & error) [member function]\"" );
        
        }
    }

}
