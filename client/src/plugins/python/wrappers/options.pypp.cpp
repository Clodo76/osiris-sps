// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "options.h"
#include "options.pypp.hpp"

namespace bp = boost::python;

struct Options_wrapper : ::osiris::Options, ::osiris::PythonWrapper< ::osiris::Options > {

    Options_wrapper( )
    : ::osiris::Options( )
      , ::osiris::PythonWrapper< ::osiris::Options >(){
        // null constructor
    
    }

    static boost::python::object getOptions( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::LockPtr<const std::map<osiris::String, boost::shared_ptr<osiris::Option>, std::less<osiris::String>, osiris::StdAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> >, osiris::SysAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> > > > >,boost::shared_mutex,boost::shared_lock<boost::shared_mutex> > result = inst.getOptions();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object setOptionValue( ::osiris::Options & inst, ::osiris::String const & name, ::osiris::DataItem const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.setOptionValue(name, value);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setOptionBool( ::osiris::Options & inst, ::osiris::String const & name, bool const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOptionBool(name, value);
        __pythreadSaver.restore();
    }

    static void setOptionString( ::osiris::Options & inst, ::osiris::String const & name, ::osiris::String const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOptionString(name, value);
        __pythreadSaver.restore();
    }

    static void setOptionUInt32( ::osiris::Options & inst, ::osiris::String const & name, ::osiris::uint32 const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setOptionUInt32(name, value);
        __pythreadSaver.restore();
    }

    static boost::python::object getRootPath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getRootPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getSharePath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getSharePath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDataPath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getDataPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getTempPath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getTempPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getLogPath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getLogPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getConfigPath( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getConfigPath();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDefaultLanguage( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getDefaultLanguage();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIsisLink_6edb0d975b2332fb30218e398b0f5732( ::osiris::Options const & inst, ::std::string const & url, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getIsisLink(url, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIsisSecureLink_e94426d8c0e3fac02940e95b26d7d1e4( ::osiris::Options const & inst, ::std::string const & url, ::osiris::ordered_map< std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > >, std::basic_string< wchar_t, std::char_traits< wchar_t >, std::allocator< wchar_t > > > const & params ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getIsisSecureLink(url, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getServerPort( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getServerPort();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getHardwareConcurrency( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getHardwareConcurrency();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getWebMcpPassword( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getWebMcpPassword();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getWebDefaultPortal( ::osiris::Options const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getWebDefaultPortal();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setHelpTipStatus( ::osiris::Options & inst, ::osiris::String const & id, bool status ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setHelpTipStatus(id, status);
        __pythreadSaver.restore();
    }

    static boost::python::object isFirstRun( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isFirstRun();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object isLastVersionCurrent( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.isLastVersionCurrent();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object save( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.save();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void update( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.update();
        __pythreadSaver.restore();
    }

    static void cleanup( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.cleanup();
        __pythreadSaver.restore();
    }

    static void toDefault( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.toDefault();
        __pythreadSaver.restore();
    }

    static boost::python::object ensureOptionValue( ::osiris::Options & inst, ::osiris::String const & name, ::osiris::DataItem const & value, bool publicOption, ::boost::shared_ptr< osiris::IOptionValidator > validator=(nullptr) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.ensureOptionValue(name, value, publicOption, validator);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object lock( ::osiris::Options & inst, bool acquireLocked=true ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<boost::unique_lock<boost::recursive_mutex> > result = inst.lock(acquireLocked);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object createTemporaryFile( ::osiris::Options & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::TemporaryFile> result = inst.createTemporaryFile();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object exists( ::osiris::Options const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.exists(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getHelpTipStatus( ::osiris::Options const & inst, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getHelpTipStatus(id);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIsisLink_68d47d5436621e9c18b7f5a2e36035dc( ::osiris::Options const & inst, ::std::string const & url, ::std::string const & params=(osiris::constants::empty_string) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getIsisLink(url, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getIsisSecureLink_16e89a81ffca64bf3434e7aea6323518( ::osiris::Options const & inst, ::std::string const & url, ::std::string const & params=(osiris::constants::empty_string) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getIsisSecureLink(url, params);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOptionBool( ::osiris::Options const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getOptionBool(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOptionString( ::osiris::Options const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getOptionString(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOptionUInt32( ::osiris::Options const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getOptionUInt32(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getOptionValue( ::osiris::Options const & inst, ::osiris::String const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DataItem result = inst.getOptionValue(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object load( ::osiris::Options & inst, ::osiris::String const & rootPath ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.load(rootPath);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setWebDefaultPortal( ::osiris::Options & inst, ::osiris::String const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setWebDefaultPortal(id);
        __pythreadSaver.restore();
    }

};

void register_Options_class(){

    { //::osiris::Options
        typedef ::boost::python::class_< Options_wrapper, ::boost::python::bases< ::osiris::StaticSingleton< osiris::Options, true > >, ::boost::noncopyable > Options_exposer_t;
        Options_exposer_t Options_exposer = Options_exposer_t( "Options", ::boost::python::no_init );
        ::boost::python::scope Options_scope( Options_exposer );
        ::boost::python::class_< ::osiris::Options::anonymity_options >( "anonymity_options" )    
            .def_readonly( "object_mode", ::osiris::Options::anonymity_options::object_mode )    
            .def_readonly( "object_trusted_domains", ::osiris::Options::anonymity_options::object_trusted_domains )    
            .def_readonly( "object_trusted_types", ::osiris::Options::anonymity_options::object_trusted_types );
        ::boost::python::class_< ::osiris::Options::db_options >( "db_options" )    
            .def_readonly( "default_driver", ::osiris::Options::db_options::default_driver );
        ::boost::python::class_< ::osiris::Options::folders_options >( "folders_options" )    
            .def_readonly( "data", ::osiris::Options::folders_options::data )    
            .def_readonly( "log", ::osiris::Options::folders_options::log )    
            .def_readonly( "share", ::osiris::Options::folders_options::share )    
            .def_readonly( "temp", ::osiris::Options::folders_options::temp );
        ::boost::python::class_< ::osiris::Options::ide_options >( "ide_options" )    
            .def_readonly( "objects_hot_state_threshold", ::osiris::Options::ide_options::objects_hot_state_threshold )    
            .def_readonly( "pager_items", ::osiris::Options::ide_options::pager_items )    
            .def_readonly( "pager_pages", ::osiris::Options::ide_options::pager_pages )    
            .def_readonly( "skin_id", ::osiris::Options::ide_options::skin_id );
        ::boost::python::class_< ::osiris::Options::isis_options >( "isis_options" )    
            .def_readonly( "enable", ::osiris::Options::isis_options::enable );
        ::boost::python::class_< ::osiris::Options::language_options >( "language_options" )    
            .def_readonly( "alternative", ::osiris::Options::language_options::alternative )    
            .def_readonly( "id", ::osiris::Options::language_options::id )    
            .def_readonly( "time_dst", ::osiris::Options::language_options::time_dst )    
            .def_readonly( "time_offset", ::osiris::Options::language_options::time_offset );
        ::boost::python::class_< ::osiris::Options::log_options >( "log_options" )    
            .def_readonly( "enable", ::osiris::Options::log_options::enable )    
            .def_readonly( "level", ::osiris::Options::log_options::level )    
            .def_readonly( "serialize", ::osiris::Options::log_options::serialize );
        ::boost::python::class_< ::osiris::Options::net_options >( "net_options" )    
            .def_readonly( "connection_timeout", ::osiris::Options::net_options::connection_timeout )    
            .def_readonly( "max_download", ::osiris::Options::net_options::max_download )    
            .def_readonly( "max_upload", ::osiris::Options::net_options::max_upload )    
            .def_readonly( "proxy_host", ::osiris::Options::net_options::proxy_host )    
            .def_readonly( "proxy_password", ::osiris::Options::net_options::proxy_password )    
            .def_readonly( "proxy_port", ::osiris::Options::net_options::proxy_port )    
            .def_readonly( "proxy_restrict_to_unsafe_connections", ::osiris::Options::net_options::proxy_restrict_to_unsafe_connections )    
            .def_readonly( "proxy_type", ::osiris::Options::net_options::proxy_type )    
            .def_readonly( "proxy_username", ::osiris::Options::net_options::proxy_username );
        ::boost::python::class_< ::osiris::Options::p2p_options >( "p2p_options" )    
            .def_readonly( "bootstrap_notify_delay", ::osiris::Options::p2p_options::bootstrap_notify_delay )    
            .def_readonly( "bootstrap_request_delay", ::osiris::Options::p2p_options::bootstrap_request_delay )    
            .def_readonly( "enable", ::osiris::Options::p2p_options::enable )    
            .def_readonly( "max_incoming_connections", ::osiris::Options::p2p_options::max_incoming_connections )    
            .def_readonly( "max_outgoing_connections", ::osiris::Options::p2p_options::max_outgoing_connections )    
            .def_readonly( "server_bind_ip", ::osiris::Options::p2p_options::server_bind_ip )    
            .def_readonly( "server_enable_upnp", ::osiris::Options::p2p_options::server_enable_upnp )    
            .def_readonly( "server_port", ::osiris::Options::p2p_options::server_port );
        ::boost::python::class_< ::osiris::Options::portals_options >( "portals_options" )    
            .def_readonly( "databases_cache_size", ::osiris::Options::portals_options::databases_cache_size )    
            .def_readonly( "objects_step", ::osiris::Options::portals_options::objects_step )    
            .def_readonly( "peers_cache_size", ::osiris::Options::portals_options::peers_cache_size )    
            .def_readonly( "peers_contact_date_check", ::osiris::Options::portals_options::peers_contact_date_check )    
            .def_readonly( "search_level", ::osiris::Options::portals_options::search_level )    
            .def_readonly( "search_limit", ::osiris::Options::portals_options::search_limit )    
            .def_readonly( "stability_delta", ::osiris::Options::portals_options::stability_delta );
        ::boost::python::class_< ::osiris::Options::privacy_options >( "privacy_options" )    
            .def_readonly( "allow_external_images", ::osiris::Options::privacy_options::allow_external_images )    
            .def_readonly( "allow_external_urls", ::osiris::Options::privacy_options::allow_external_urls );
        ::boost::python::class_< ::osiris::Options::system_options >( "system_options" )    
            .def_readonly( "background_tasks", ::osiris::Options::system_options::background_tasks )    
            .def_readonly( "clock_synchronization_method", ::osiris::Options::system_options::clock_synchronization_method )    
            .def_readonly( "hardware_concurrency", ::osiris::Options::system_options::hardware_concurrency )    
            .def_readonly( "instance_name", ::osiris::Options::system_options::instance_name )    
            .def_readonly( "isis", ::osiris::Options::system_options::isis )    
            .def_readonly( "isis_enable_ssl", ::osiris::Options::system_options::isis_enable_ssl )    
            .def_readonly( "isis_port", ::osiris::Options::system_options::isis_port )    
            .def_readonly( "isis_port_ssl", ::osiris::Options::system_options::isis_port_ssl )    
            .def_readonly( "last_version_major", ::osiris::Options::system_options::last_version_major )    
            .def_readonly( "last_version_minor", ::osiris::Options::system_options::last_version_minor );
        ::boost::python::class_< ::osiris::Options::ui_options >( "ui_options" )    
            .def_readonly( "exit_confirm", ::osiris::Options::ui_options::exit_confirm )    
            .def_readonly( "start_minimized", ::osiris::Options::ui_options::start_minimized )    
            .def_readonly( "tray_always", ::osiris::Options::ui_options::tray_always )    
            .def_readonly( "tray_balloon", ::osiris::Options::ui_options::tray_balloon )    
            .def_readonly( "tray_minimize", ::osiris::Options::ui_options::tray_minimize );
        ::boost::python::class_< ::osiris::Options::url_options >( "url_options" )    
            .def_readonly( "protocols_collect", ::osiris::Options::url_options::protocols_collect )    
            .def_readonly( "protocols_find_link", ::osiris::Options::url_options::protocols_find_link )    
            .def_readonly( "protocols_no_confirm", ::osiris::Options::url_options::protocols_no_confirm )    
            .def_readonly( "protocols_no_redirect", ::osiris::Options::url_options::protocols_no_redirect );
        ::boost::python::class_< ::osiris::Options::web_options >( "web_options" )    
            .def_readonly( "allow_remote_connections", ::osiris::Options::web_options::allow_remote_connections )    
            .def_readonly( "browser", ::osiris::Options::web_options::browser )    
            .def_readonly( "cache_size", ::osiris::Options::web_options::cache_size )    
            .def_readonly( "default_portal", ::osiris::Options::web_options::default_portal )    
            .def_readonly( "enable", ::osiris::Options::web_options::enable )    
            .def_readonly( "mcp_password", ::osiris::Options::web_options::mcp_password )    
            .def_readonly( "redirect_url", ::osiris::Options::web_options::redirect_url )    
            .def_readonly( "server_bind_ip", ::osiris::Options::web_options::server_bind_ip )    
            .def_readonly( "server_enable_upnp", ::osiris::Options::web_options::server_enable_upnp )    
            .def_readonly( "server_port", ::osiris::Options::web_options::server_port )    
            .def_readonly( "session_duration", ::osiris::Options::web_options::session_duration );
        Options_exposer.def( ::boost::python::init< >() );
        { //::osiris::Options::getOptions
        
            typedef boost::python::object ( *getOptions_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getOptions"
                , getOptions_function_type( &Options_wrapper::getOptions ) );
        
        }
        { //::osiris::Options::setOptionValue
        
            typedef boost::python::object ( *setOptionValue_function_type )( ::osiris::Options &,::osiris::String const &,::osiris::DataItem const & );
            
            Options_exposer.def( 
                "setOptionValue"
                , setOptionValue_function_type( &Options_wrapper::setOptionValue )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::Options::setOptionBool
        
            typedef void ( *setOptionBool_function_type )( ::osiris::Options &,::osiris::String const &,bool const & );
            
            Options_exposer.def( 
                "setOptionBool"
                , setOptionBool_function_type( &Options_wrapper::setOptionBool )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::Options::setOptionString
        
            typedef void ( *setOptionString_function_type )( ::osiris::Options &,::osiris::String const &,::osiris::String const & );
            
            Options_exposer.def( 
                "setOptionString"
                , setOptionString_function_type( &Options_wrapper::setOptionString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::Options::setOptionUInt32
        
            typedef void ( *setOptionUInt32_function_type )( ::osiris::Options &,::osiris::String const &,::osiris::uint32 const & );
            
            Options_exposer.def( 
                "setOptionUInt32"
                , setOptionUInt32_function_type( &Options_wrapper::setOptionUInt32 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::Options::getRootPath
        
            typedef boost::python::object ( *getRootPath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getRootPath"
                , getRootPath_function_type( &Options_wrapper::getRootPath ) );
        
        }
        { //::osiris::Options::getSharePath
        
            typedef boost::python::object ( *getSharePath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getSharePath"
                , getSharePath_function_type( &Options_wrapper::getSharePath ) );
        
        }
        { //::osiris::Options::getDataPath
        
            typedef boost::python::object ( *getDataPath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getDataPath"
                , getDataPath_function_type( &Options_wrapper::getDataPath ) );
        
        }
        { //::osiris::Options::getTempPath
        
            typedef boost::python::object ( *getTempPath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getTempPath"
                , getTempPath_function_type( &Options_wrapper::getTempPath ) );
        
        }
        { //::osiris::Options::getLogPath
        
            typedef boost::python::object ( *getLogPath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getLogPath"
                , getLogPath_function_type( &Options_wrapper::getLogPath ) );
        
        }
        { //::osiris::Options::getConfigPath
        
            typedef boost::python::object ( *getConfigPath_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getConfigPath"
                , getConfigPath_function_type( &Options_wrapper::getConfigPath ) );
        
        }
        { //::osiris::Options::getDefaultLanguage
        
            typedef boost::python::object ( *getDefaultLanguage_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getDefaultLanguage"
                , getDefaultLanguage_function_type( &Options_wrapper::getDefaultLanguage ) );
        
        }
        { //::osiris::Options::getIsisLink
        
            typedef boost::python::object ( *getIsisLink_function_type )( ::osiris::Options const &,::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            Options_exposer.def( 
                "getIsisLink"
                , getIsisLink_function_type( &Options_wrapper::getIsisLink_6edb0d975b2332fb30218e398b0f5732 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("params") ) );
        
        }
        { //::osiris::Options::getIsisSecureLink
        
            typedef boost::python::object ( *getIsisSecureLink_function_type )( ::osiris::Options const &,::std::string const &,::osiris::ordered_map<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > > const & );
            
            Options_exposer.def( 
                "getIsisSecureLink"
                , getIsisSecureLink_function_type( &Options_wrapper::getIsisSecureLink_e94426d8c0e3fac02940e95b26d7d1e4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("params") ) );
        
        }
        { //::osiris::Options::getServerPort
        
            typedef boost::python::object ( *getServerPort_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getServerPort"
                , getServerPort_function_type( &Options_wrapper::getServerPort ) );
        
        }
        { //::osiris::Options::getHardwareConcurrency
        
            typedef boost::python::object ( *getHardwareConcurrency_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getHardwareConcurrency"
                , getHardwareConcurrency_function_type( &Options_wrapper::getHardwareConcurrency ) );
        
        }
        { //::osiris::Options::getWebMcpPassword
        
            typedef boost::python::object ( *getWebMcpPassword_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getWebMcpPassword"
                , getWebMcpPassword_function_type( &Options_wrapper::getWebMcpPassword ) );
        
        }
        { //::osiris::Options::getWebDefaultPortal
        
            typedef boost::python::object ( *getWebDefaultPortal_function_type )( ::osiris::Options const & );
            
            Options_exposer.def( 
                "getWebDefaultPortal"
                , getWebDefaultPortal_function_type( &Options_wrapper::getWebDefaultPortal ) );
        
        }
        { //::osiris::Options::setHelpTipStatus
        
            typedef void ( *setHelpTipStatus_function_type )( ::osiris::Options &,::osiris::String const &,bool );
            
            Options_exposer.def( 
                "setHelpTipStatus"
                , setHelpTipStatus_function_type( &Options_wrapper::setHelpTipStatus )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id"), ::boost::python::arg("status") ) );
        
        }
        { //::osiris::Options::isFirstRun
        
            typedef boost::python::object ( *isFirstRun_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "isFirstRun"
                , isFirstRun_function_type( &Options_wrapper::isFirstRun ) );
        
        }
        { //::osiris::Options::isLastVersionCurrent
        
            typedef boost::python::object ( *isLastVersionCurrent_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "isLastVersionCurrent"
                , isLastVersionCurrent_function_type( &Options_wrapper::isLastVersionCurrent ) );
        
        }
        { //::osiris::Options::save
        
            typedef boost::python::object ( *save_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "save"
                , save_function_type( &Options_wrapper::save ) );
        
        }
        { //::osiris::Options::update
        
            typedef void ( *update_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "update"
                , update_function_type( &Options_wrapper::update ) );
        
        }
        { //::osiris::Options::cleanup
        
            typedef void ( *cleanup_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "cleanup"
                , cleanup_function_type( &Options_wrapper::cleanup ) );
        
        }
        { //::osiris::Options::toDefault
        
            typedef void ( *toDefault_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "toDefault"
                , toDefault_function_type( &Options_wrapper::toDefault ) );
        
        }
        { //::osiris::Options::ensureOptionValue
        
            typedef boost::python::object ( *ensureOptionValue_function_type )( ::osiris::Options &,::osiris::String const &,::osiris::DataItem const &,bool,::boost::shared_ptr<osiris::IOptionValidator> );
            
            Options_exposer.def( 
                "ensureOptionValue"
                , ensureOptionValue_function_type( &Options_wrapper::ensureOptionValue )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value"), ::boost::python::arg("publicOption"), ::boost::python::arg("validator")=(nullptr) ) );
        
        }
        { //::osiris::Options::lock
        
            typedef boost::python::object ( *lock_function_type )( ::osiris::Options &,bool );
            
            Options_exposer.def( 
                "lock"
                , lock_function_type( &Options_wrapper::lock )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("acquireLocked")=(bool)(true) ) );
        
        }
        { //::osiris::Options::createTemporaryFile
        
            typedef boost::python::object ( *createTemporaryFile_function_type )( ::osiris::Options & );
            
            Options_exposer.def( 
                "createTemporaryFile"
                , createTemporaryFile_function_type( &Options_wrapper::createTemporaryFile ) );
        
        }
        { //::osiris::Options::exists
        
            typedef boost::python::object ( *exists_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "exists"
                , exists_function_type( &Options_wrapper::exists )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::Options::getHelpTipStatus
        
            typedef boost::python::object ( *getHelpTipStatus_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "getHelpTipStatus"
                , getHelpTipStatus_function_type( &Options_wrapper::getHelpTipStatus )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::Options::getIsisLink
        
            typedef boost::python::object ( *getIsisLink_function_type )( ::osiris::Options const &,::std::string const &,::std::string const & );
            
            Options_exposer.def( 
                "getIsisLink"
                , getIsisLink_function_type( &Options_wrapper::getIsisLink_68d47d5436621e9c18b7f5a2e36035dc )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("params")=(osiris::constants::empty_string) ) );
        
        }
        { //::osiris::Options::getIsisSecureLink
        
            typedef boost::python::object ( *getIsisSecureLink_function_type )( ::osiris::Options const &,::std::string const &,::std::string const & );
            
            Options_exposer.def( 
                "getIsisSecureLink"
                , getIsisSecureLink_function_type( &Options_wrapper::getIsisSecureLink_16e89a81ffca64bf3434e7aea6323518 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url"), ::boost::python::arg("params")=(osiris::constants::empty_string) ) );
        
        }
        { //::osiris::Options::getOptionBool
        
            typedef boost::python::object ( *getOptionBool_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "getOptionBool"
                , getOptionBool_function_type( &Options_wrapper::getOptionBool )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::Options::getOptionString
        
            typedef boost::python::object ( *getOptionString_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "getOptionString"
                , getOptionString_function_type( &Options_wrapper::getOptionString )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::Options::getOptionUInt32
        
            typedef boost::python::object ( *getOptionUInt32_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "getOptionUInt32"
                , getOptionUInt32_function_type( &Options_wrapper::getOptionUInt32 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::Options::getOptionValue
        
            typedef boost::python::object ( *getOptionValue_function_type )( ::osiris::Options const &,::osiris::String const & );
            
            Options_exposer.def( 
                "getOptionValue"
                , getOptionValue_function_type( &Options_wrapper::getOptionValue )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::Options::load
        
            typedef boost::python::object ( *load_function_type )( ::osiris::Options &,::osiris::String const & );
            
            Options_exposer.def( 
                "load"
                , load_function_type( &Options_wrapper::load )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("rootPath") ) );
        
        }
        { //::osiris::Options::setWebDefaultPortal
        
            typedef void ( *setWebDefaultPortal_function_type )( ::osiris::Options &,::osiris::String const & );
            
            Options_exposer.def( 
                "setWebDefaultPortal"
                , setWebDefaultPortal_function_type( &Options_wrapper::setWebDefaultPortal )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //property "webDefaultPortal"[fget=::osiris::Options::getWebDefaultPortal, fset=::osiris::Options::setWebDefaultPortal]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            typedef void ( ::osiris::Options::*fset )( ::osiris::String const & ) ;
            
            Options_exposer.add_property( 
                "webDefaultPortal"
                , fget( &::osiris::Options::getWebDefaultPortal )
                , fset( &::osiris::Options::setWebDefaultPortal )
                , "get\\set property, built on top of \"osiris::String osiris::Options::getWebDefaultPortal() const [member function]\" and \"void osiris::Options::setWebDefaultPortal(osiris::String const & id) [member function]\"" );
        
        }
        { //property "options"[fget=::osiris::Options::getOptions]
        
            typedef ::osiris::LockPtr<const std::map<osiris::String, boost::shared_ptr<osiris::Option>, std::less<osiris::String>, osiris::StdAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> >, osiris::SysAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> > > > >,boost::shared_mutex,boost::shared_lock<boost::shared_mutex> > ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "options"
                , fget( &::osiris::Options::getOptions )
                , "get property, built on top of \"osiris::LockPtr<const std::map<osiris::String, boost::shared_ptr<osiris::Option>, std::less<osiris::String>, osiris::StdAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> >, osiris::SysAllocator<std::pair<const osiris::String, boost::shared_ptr<osiris::Option> > > > >,boost::shared_mutex,boost::shared_lock<boost::shared_mutex> > osiris::Options::getOptions() const [member function]\"" );
        
        }
        { //property "rootPath"[fget=::osiris::Options::getRootPath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "rootPath"
                , fget( &::osiris::Options::getRootPath )
                , "get property, built on top of \"osiris::String osiris::Options::getRootPath() const [member function]\"" );
        
        }
        { //property "sharePath"[fget=::osiris::Options::getSharePath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "sharePath"
                , fget( &::osiris::Options::getSharePath )
                , "get property, built on top of \"osiris::String osiris::Options::getSharePath() const [member function]\"" );
        
        }
        { //property "dataPath"[fget=::osiris::Options::getDataPath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "dataPath"
                , fget( &::osiris::Options::getDataPath )
                , "get property, built on top of \"osiris::String osiris::Options::getDataPath() const [member function]\"" );
        
        }
        { //property "tempPath"[fget=::osiris::Options::getTempPath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "tempPath"
                , fget( &::osiris::Options::getTempPath )
                , "get property, built on top of \"osiris::String osiris::Options::getTempPath() const [member function]\"" );
        
        }
        { //property "logPath"[fget=::osiris::Options::getLogPath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "logPath"
                , fget( &::osiris::Options::getLogPath )
                , "get property, built on top of \"osiris::String osiris::Options::getLogPath() const [member function]\"" );
        
        }
        { //property "configPath"[fget=::osiris::Options::getConfigPath]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "configPath"
                , fget( &::osiris::Options::getConfigPath )
                , "get property, built on top of \"osiris::String osiris::Options::getConfigPath() const [member function]\"" );
        
        }
        { //property "defaultLanguage"[fget=::osiris::Options::getDefaultLanguage]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "defaultLanguage"
                , fget( &::osiris::Options::getDefaultLanguage )
                , "get property, built on top of \"osiris::String osiris::Options::getDefaultLanguage() const [member function]\"" );
        
        }
        { //property "serverPort"[fget=::osiris::Options::getServerPort]
        
            typedef ::osiris::uint32 ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "serverPort"
                , fget( &::osiris::Options::getServerPort )
                , "get property, built on top of \"osiris::uint32 osiris::Options::getServerPort() const [member function]\"" );
        
        }
        { //property "hardwareConcurrency"[fget=::osiris::Options::getHardwareConcurrency]
        
            typedef ::osiris::uint32 ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "hardwareConcurrency"
                , fget( &::osiris::Options::getHardwareConcurrency )
                , "get property, built on top of \"osiris::uint32 osiris::Options::getHardwareConcurrency() const [member function]\"" );
        
        }
        { //property "webMcpPassword"[fget=::osiris::Options::getWebMcpPassword]
        
            typedef ::osiris::String ( ::osiris::Options::*fget )(  ) const;
            
            Options_exposer.add_property( 
                "webMcpPassword"
                , fget( &::osiris::Options::getWebMcpPassword )
                , "get property, built on top of \"osiris::String osiris::Options::getWebMcpPassword() const [member function]\"" );
        
        }
    }

}
