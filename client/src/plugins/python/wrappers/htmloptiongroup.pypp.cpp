// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "htmloptiongroup.h"
#include "htmloption.h"
#include "datatree.h"
#include "htmlattributes.h"
#include "htmlevent.h"
#include "eventssource.h"
#include "htmlvirtualpage.h"
#include "htmlwriter.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsession.h"
#include "htmloptiongroup.pypp.hpp"

namespace bp = boost::python;

struct HtmlOptionGroup_wrapper : ::osiris::HtmlOptionGroup, ::osiris::PythonWrapper< ::osiris::HtmlOptionGroup > {

    HtmlOptionGroup_wrapper(::osiris::String const & label=osiris::String::EMPTY )
    : ::osiris::HtmlOptionGroup( boost::ref(label) )
      , ::osiris::PythonWrapper< ::osiris::HtmlOptionGroup >(){
        // constructor
    
    }

    static boost::python::object getLabel( ::osiris::HtmlOptionGroup const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getLabel();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getSelected( ::osiris::HtmlOptionGroup const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlOption> result = inst.getSelected();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object addOption( ::osiris::HtmlOptionGroup & inst, ::osiris::String const & label=(osiris::String::EMPTY), ::osiris::String const & value=(osiris::String::EMPTY) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HtmlOption> result = inst.addOption(label, value);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onRender = this->get_override( "onRender" ) )
            func_onRender( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlOptionGroup::onRender( boost::ref(writer) );
        }
    }
    
    virtual void default_onRender( ::osiris::HtmlWriter & writer ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlOptionGroup::onRender( boost::ref(writer) );
    }

    virtual void renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderAttributes = this->get_override( "renderAttributes" ) )
            func_renderAttributes( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::HtmlOptionGroup::renderAttributes( boost::ref(writer) );
        }
    }
    
    void default_renderAttributes( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HtmlOptionGroup::renderAttributes( boost::ref(writer) );
    }

    static void setLabel( ::osiris::HtmlOptionGroup & inst, ::osiris::String const & label ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLabel(label);
        __pythreadSaver.restore();
    }

    static void setSelectedByValue( ::osiris::HtmlOptionGroup & inst, ::osiris::String const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setSelectedByValue(value);
        __pythreadSaver.restore();
    }

    bool decodeEvent( ::osiris::String const & command, ::osiris::String & eventName, ::osiris::HtmlEvent & e ) const {
        return ::osiris::IHtmlControl::decodeEvent( boost::ref(command), boost::ref(eventName), boost::ref(e) );
    }

    ::osiris::String encodeEvent( ::osiris::String const & eventName, ::osiris::HtmlEvent const * e=(osiris::null) ) const {
        return ::osiris::IHtmlControl::encodeEvent( boost::ref(eventName), boost::python::ptr(e) );
    }

    virtual ::boost::shared_ptr< osiris::HttpSession > getSession(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getSession = this->get_override( "getSession" ) )
            return func_getSession(  );
        else{
            __pystate.leave();
            return this->::osiris::IHtmlControl::getSession(  );
        }
    }
    
    ::boost::shared_ptr< osiris::HttpSession > default_getSession(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHtmlControl::getSession( );
    }

    virtual void onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onEvent = this->get_override( "onEvent" ) )
            func_onEvent( boost::ref(name), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
        }
    }
    
    virtual void default_onEvent( ::osiris::String const & name, ::osiris::IEvent * e=(osiris::null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onEvent( boost::ref(name), boost::python::ptr(e) );
    }

    virtual void onInit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onInit = this->get_override( "onInit" ) )
            func_onInit(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onInit(  );
        }
    }
    
    virtual void default_onInit(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onInit( );
    }

    virtual void onLoad(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoad = this->get_override( "onLoad" ) )
            func_onLoad(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoad(  );
        }
    }
    
    virtual void default_onLoad(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoad( );
    }

    virtual void onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onLoadViewState = this->get_override( "onLoadViewState" ) )
            func_onLoadViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onLoadViewState( ::osiris::DataTree const & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onLoadViewState( boost::ref(state) );
    }

    virtual void onPreRender(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onPreRender = this->get_override( "onPreRender" ) )
            func_onPreRender(  );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onPreRender(  );
        }
    }
    
    virtual void default_onPreRender(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onPreRender( );
    }

    virtual void onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onSaveViewState = this->get_override( "onSaveViewState" ) )
            func_onSaveViewState( boost::ref(state) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
        }
    }
    
    virtual void default_onSaveViewState( ::osiris::DataTree & state ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::onSaveViewState( boost::ref(state) );
    }

    virtual void renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_renderChilds = this->get_override( "renderChilds" ) )
            func_renderChilds( boost::ref(writer) );
        else{
            __pystate.leave();
            this->::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
        }
    }
    
    void default_renderChilds( ::osiris::HtmlWriter & writer ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IHtmlControl::renderChilds( boost::ref(writer) );
    }

    void saveViewState( ::osiris::DataTree & states ){
        ::osiris::IHtmlControl::saveViewState( boost::ref(states) );
    }

};

void register_HtmlOptionGroup_class(){

    { //::osiris::HtmlOptionGroup
        typedef ::boost::python::class_< HtmlOptionGroup_wrapper, ::boost::python::bases< ::osiris::IHtmlControl >, ::boost::noncopyable > HtmlOptionGroup_exposer_t;
        HtmlOptionGroup_exposer_t HtmlOptionGroup_exposer = HtmlOptionGroup_exposer_t( "HtmlOptionGroup", ::boost::python::init< ::boost::python::optional< ::osiris::String const & > >(( ::boost::python::arg("label")=osiris::String::EMPTY )) );
        ::boost::python::scope HtmlOptionGroup_scope( HtmlOptionGroup_exposer );
        ::boost::python::implicitly_convertible< ::osiris::String const &, ::osiris::HtmlOptionGroup >();
        { //::osiris::HtmlOptionGroup::getLabel
        
            typedef boost::python::object ( *getLabel_function_type )( ::osiris::HtmlOptionGroup const & );
            
            HtmlOptionGroup_exposer.def( 
                "getLabel"
                , getLabel_function_type( &HtmlOptionGroup_wrapper::getLabel ) );
        
        }
        { //::osiris::HtmlOptionGroup::getSelected
        
            typedef boost::python::object ( *getSelected_function_type )( ::osiris::HtmlOptionGroup const & );
            
            HtmlOptionGroup_exposer.def( 
                "getSelected"
                , getSelected_function_type( &HtmlOptionGroup_wrapper::getSelected ) );
        
        }
        { //::osiris::HtmlOptionGroup::addOption
        
            typedef boost::python::object ( *addOption_function_type )( ::osiris::HtmlOptionGroup &,::osiris::String const &,::osiris::String const & );
            
            HtmlOptionGroup_exposer.def( 
                "addOption"
                , addOption_function_type( &HtmlOptionGroup_wrapper::addOption )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("label")=(osiris::String::EMPTY), ::boost::python::arg("value")=(osiris::String::EMPTY) ) );
        
        }
        { //::osiris::HtmlOptionGroup::onRender
        
            typedef void ( HtmlOptionGroup_wrapper::*onRender_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onRender"
                , onRender_function_type( &HtmlOptionGroup_wrapper::default_onRender )
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlOptionGroup::renderAttributes
        
            typedef void ( ::osiris::HtmlOptionGroup::*renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlOptionGroup_wrapper::*default_renderAttributes_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "renderAttributes"
                , renderAttributes_function_type(&::osiris::HtmlOptionGroup::renderAttributes)
                , default_renderAttributes_function_type(&HtmlOptionGroup_wrapper::default_renderAttributes)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::HtmlOptionGroup::setLabel
        
            typedef void ( *setLabel_function_type )( ::osiris::HtmlOptionGroup &,::osiris::String const & );
            
            HtmlOptionGroup_exposer.def( 
                "setLabel"
                , setLabel_function_type( &HtmlOptionGroup_wrapper::setLabel )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("label") ) );
        
        }
        { //::osiris::HtmlOptionGroup::setSelectedByValue
        
            typedef void ( *setSelectedByValue_function_type )( ::osiris::HtmlOptionGroup &,::osiris::String const & );
            
            HtmlOptionGroup_exposer.def( 
                "setSelectedByValue"
                , setSelectedByValue_function_type( &HtmlOptionGroup_wrapper::setSelectedByValue )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::IHtmlControl::decodeEvent
        
            typedef bool ( HtmlOptionGroup_wrapper::*decodeEvent_function_type )( ::osiris::String const &,::osiris::String &,::osiris::HtmlEvent & ) const;
            
            HtmlOptionGroup_exposer.def( 
                "decodeEvent"
                , decodeEvent_function_type( &HtmlOptionGroup_wrapper::decodeEvent )
                , ( ::boost::python::arg("command"), ::boost::python::arg("eventName"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IHtmlControl::encodeEvent
        
            typedef ::osiris::String ( HtmlOptionGroup_wrapper::*encodeEvent_function_type )( ::osiris::String const &,::osiris::HtmlEvent const * ) const;
            
            HtmlOptionGroup_exposer.def( 
                "encodeEvent"
                , encodeEvent_function_type( &HtmlOptionGroup_wrapper::encodeEvent )
                , ( ::boost::python::arg("eventName"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::getSession
        
            typedef ::boost::shared_ptr< osiris::HttpSession > ( ::osiris::IHtmlControl::*getSession_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::HttpSession > ( HtmlOptionGroup_wrapper::*default_getSession_function_type )(  ) const;
            
            HtmlOptionGroup_exposer.def( 
                "getSession"
                , getSession_function_type(&::osiris::IHtmlControl::getSession)
                , default_getSession_function_type(&HtmlOptionGroup_wrapper::default_getSession) );
        
        }
        { //::osiris::IHtmlControl::onEvent
        
            typedef void ( HtmlOptionGroup_wrapper::*onEvent_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onEvent"
                , onEvent_function_type( &HtmlOptionGroup_wrapper::default_onEvent )
                , ( ::boost::python::arg("name"), ::boost::python::arg("e")=(osiris::null) ) );
        
        }
        { //::osiris::IHtmlControl::onInit
        
            typedef void ( HtmlOptionGroup_wrapper::*onInit_function_type )(  ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onInit"
                , onInit_function_type( &HtmlOptionGroup_wrapper::default_onInit ) );
        
        }
        { //::osiris::IHtmlControl::onLoad
        
            typedef void ( HtmlOptionGroup_wrapper::*onLoad_function_type )(  ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onLoad"
                , onLoad_function_type( &HtmlOptionGroup_wrapper::default_onLoad ) );
        
        }
        { //::osiris::IHtmlControl::onLoadViewState
        
            typedef void ( HtmlOptionGroup_wrapper::*onLoadViewState_function_type )( ::osiris::DataTree const & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onLoadViewState"
                , onLoadViewState_function_type( &HtmlOptionGroup_wrapper::default_onLoadViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::onPreRender
        
            typedef void ( HtmlOptionGroup_wrapper::*onPreRender_function_type )(  ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onPreRender"
                , onPreRender_function_type( &HtmlOptionGroup_wrapper::default_onPreRender ) );
        
        }
        { //::osiris::IHtmlControl::onSaveViewState
        
            typedef void ( HtmlOptionGroup_wrapper::*onSaveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "onSaveViewState"
                , onSaveViewState_function_type( &HtmlOptionGroup_wrapper::default_onSaveViewState )
                , ( ::boost::python::arg("state") ) );
        
        }
        { //::osiris::IHtmlControl::renderChilds
        
            typedef void ( ::osiris::IHtmlControl::*renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            typedef void ( HtmlOptionGroup_wrapper::*default_renderChilds_function_type )( ::osiris::HtmlWriter & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "renderChilds"
                , renderChilds_function_type(&::osiris::IHtmlControl::renderChilds)
                , default_renderChilds_function_type(&HtmlOptionGroup_wrapper::default_renderChilds)
                , ( ::boost::python::arg("writer") ) );
        
        }
        { //::osiris::IHtmlControl::saveViewState
        
            typedef void ( HtmlOptionGroup_wrapper::*saveViewState_function_type )( ::osiris::DataTree & ) ;
            
            HtmlOptionGroup_exposer.def( 
                "saveViewState"
                , saveViewState_function_type( &HtmlOptionGroup_wrapper::saveViewState )
                , ( ::boost::python::arg("states") ) );
        
        }
        { //property "label"[fget=::osiris::HtmlOptionGroup::getLabel, fset=::osiris::HtmlOptionGroup::setLabel]
        
            typedef ::osiris::String const & ( ::osiris::HtmlOptionGroup::*fget )(  ) const;
            typedef void ( ::osiris::HtmlOptionGroup::*fset )( ::osiris::String const & ) ;
            
            HtmlOptionGroup_exposer.add_property( 
                "label"
                , ::boost::python::make_function( 
                      fget( &::osiris::HtmlOptionGroup::getLabel )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , fset( &::osiris::HtmlOptionGroup::setLabel )
                , "get\\set property, built on top of \"osiris::String const & osiris::HtmlOptionGroup::getLabel() const [member function]\" and \"void osiris::HtmlOptionGroup::setLabel(osiris::String const & label) [member function]\"" );
        
        }
        { //property "selected"[fget=::osiris::HtmlOptionGroup::getSelected]
        
            typedef ::boost::shared_ptr<osiris::HtmlOption> ( ::osiris::HtmlOptionGroup::*fget )(  ) const;
            
            HtmlOptionGroup_exposer.add_property( 
                "selected"
                , fget( &::osiris::HtmlOptionGroup::getSelected )
                , "get property, built on top of \"boost::shared_ptr<osiris::HtmlOption> osiris::HtmlOptionGroup::getSelected() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HtmlOptionGroup > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlOptionGroup >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlOptionGroup >, boost::shared_ptr< ::boost::signals::trackable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlOptionGroup >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IHtmlControl > > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HtmlOptionGroup >, boost::shared_ptr< ::osiris::Object > >();
    }

}
