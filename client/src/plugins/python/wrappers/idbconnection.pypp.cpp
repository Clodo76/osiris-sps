// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "idbconnection.h"
#include "idboptions.h"
#include "idbresult.h"
#include "idbstatement.h"
#include "idbconnection.pypp.hpp"

namespace bp = boost::python;

struct IDbConnection_wrapper : ::osiris::IDbConnection, ::osiris::PythonWrapper< ::osiris::IDbConnection > {

    IDbConnection_wrapper(::osiris::String const & database, ::boost::shared_ptr< osiris::IDbOptions > options, ::boost::shared_ptr< osiris::IDbDriver > driver )
    : ::osiris::IDbConnection( boost::ref(database), options, driver )
      , ::osiris::PythonWrapper< ::osiris::IDbConnection >(){
        // constructor
    
    }

    static boost::python::object getDatabase( ::osiris::IDbConnection const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String const & result = inst.getDatabase();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::String const & >( result ) );
    }

    static boost::python::object getOptions( ::osiris::IDbConnection const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbOptions> result = inst.getOptions();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getDriver( ::osiris::IDbConnection const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbDriver> result = inst.getDriver();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void open(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_open = this->get_override( "open" );
        func_open(  );
    }

    virtual void close(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_close = this->get_override( "close" );
        func_close(  );
    }

    virtual void beginTransaction(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_beginTransaction = this->get_override( "beginTransaction" );
        func_beginTransaction(  );
    }

    virtual void commit(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_commit = this->get_override( "commit" );
        func_commit(  );
    }

    virtual void rollback(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_rollback = this->get_override( "rollback" );
        func_rollback(  );
    }

    virtual void _parse( ::boost::shared_ptr< osiris::DbSqlICommand > command, ::osiris::String & sql ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func__parse = this->get_override( "_parse" );
        func__parse( command, boost::ref(sql) );
    }

    virtual void analyze(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_analyze = this->get_override( "analyze" );
        func_analyze(  );
    }

    virtual void reindex(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_reindex = this->get_override( "reindex" );
        func_reindex(  );
    }

    virtual void vacuum(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func_vacuum = this->get_override( "vacuum" );
        func_vacuum(  );
    }

    static void logError( ::osiris::IDbConnection const & inst, ::osiris::String const & sql, ::std::exception & e ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.logError(sql, e);
        __pythreadSaver.restore();
    }

    static boost::python::object executeStatement( ::osiris::IDbConnection & inst, ::osiris::String const & sql, ::osiris::DbSqlValues const & values ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.executeStatement(sql, values);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object query_42663ceab2765dcce97cc2fd2ed979e4( ::osiris::IDbConnection & inst, ::boost::shared_ptr< osiris::DbSqlICommand > select, ::osiris::DataTable & table ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.query(select, table);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object query_04f4da13ae8e3cf73e50ceddce3ca7f9( ::osiris::IDbConnection & inst, ::osiris::String const & sql, ::osiris::DataTable & table ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.query(sql, table);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::osiris::String prepare_insert( ::osiris::String const & table, ::osiris::DbSqlValues const & values ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_prepare_insert = this->get_override( "prepare_insert" ) )
            return func_prepare_insert( boost::ref(table), boost::ref(values) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::prepare_insert( boost::ref(table), boost::ref(values) );
        }
    }
    
    ::osiris::String default_prepare_insert( ::osiris::String const & table, ::osiris::DbSqlValues const & values ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::prepare_insert( boost::ref(table), boost::ref(values) );
    }

    virtual ::osiris::String prepare_update( ::osiris::String const & table, ::osiris::DbSqlValues const & values, ::osiris::String const & field, ::osiris::String const & value ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_prepare_update = this->get_override( "prepare_update" ) )
            return func_prepare_update( boost::ref(table), boost::ref(values), boost::ref(field), boost::ref(value) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::prepare_update( boost::ref(table), boost::ref(values), boost::ref(field), boost::ref(value) );
        }
    }
    
    ::osiris::String default_prepare_update( ::osiris::String const & table, ::osiris::DbSqlValues const & values, ::osiris::String const & field, ::osiris::String const & value ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::prepare_update( boost::ref(table), boost::ref(values), boost::ref(field), boost::ref(value) );
    }

    virtual ::osiris::String prepare_update( ::osiris::String const & table, ::osiris::DbSqlValues const & values, ::osiris::String const & f1, ::osiris::String const & v1, ::osiris::String const & f2, ::osiris::String const & v2 ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_prepare_update = this->get_override( "prepare_update" ) )
            return func_prepare_update( boost::ref(table), boost::ref(values), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::prepare_update( boost::ref(table), boost::ref(values), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
        }
    }
    
    ::osiris::String default_prepare_update( ::osiris::String const & table, ::osiris::DbSqlValues const & values, ::osiris::String const & f1, ::osiris::String const & v1, ::osiris::String const & f2, ::osiris::String const & v2 ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::prepare_update( boost::ref(table), boost::ref(values), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
    }

    virtual ::osiris::String sql_remove( ::osiris::String const & table, ::osiris::String const & field, ::osiris::String const & value ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_sql_remove = this->get_override( "sql_remove" ) )
            return func_sql_remove( boost::ref(table), boost::ref(field), boost::ref(value) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::sql_remove( boost::ref(table), boost::ref(field), boost::ref(value) );
        }
    }
    
    ::osiris::String default_sql_remove( ::osiris::String const & table, ::osiris::String const & field, ::osiris::String const & value ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::sql_remove( boost::ref(table), boost::ref(field), boost::ref(value) );
    }

    virtual ::osiris::String sql_remove( ::osiris::String const & table, ::osiris::String const & f1, ::osiris::String const & v1, ::osiris::String const & f2, ::osiris::String const & v2 ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_sql_remove = this->get_override( "sql_remove" ) )
            return func_sql_remove( boost::ref(table), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::sql_remove( boost::ref(table), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
        }
    }
    
    ::osiris::String default_sql_remove( ::osiris::String const & table, ::osiris::String const & f1, ::osiris::String const & v1, ::osiris::String const & f2, ::osiris::String const & v2 ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::sql_remove( boost::ref(table), boost::ref(f1), boost::ref(v1), boost::ref(f2), boost::ref(v2) );
    }

    virtual ::osiris::uint32 _execute( ::osiris::String const & sql ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func__execute = this->get_override( "_execute" );
        return func__execute( boost::ref(sql) );
    }

    virtual ::boost::shared_ptr< osiris::IDbStatement > _prepare( ::osiris::String const & sql ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func__prepare = this->get_override( "_prepare" );
        return func__prepare( boost::ref(sql) );
    }

    virtual ::boost::shared_ptr< osiris::IDbResult > _query( ::osiris::String const & sql ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        ::osiris::PythonOverride func__query = this->get_override( "_query" );
        return func__query( boost::ref(sql) );
    }

    virtual ::osiris::String escape( ::osiris::String const & name ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_escape = this->get_override( "escape" ) )
            return func_escape( boost::ref(name) );
        else{
            __pystate.leave();
            return this->::osiris::IDbConnection::escape( boost::ref(name) );
        }
    }
    
    ::osiris::String default_escape( ::osiris::String const & name ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IDbConnection::escape( boost::ref(name) );
    }

    static boost::python::object execute_4d7f800b630f1575e8853fe3b759e08b( ::osiris::IDbConnection & inst, ::osiris::String const & sql ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.execute(sql);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object execute_ca19021656a0e3a3d72dc22f3cd1d1e8( ::osiris::IDbConnection & inst, ::boost::shared_ptr< osiris::DbSqlICommand > command ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.execute(command);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object query_95faea188a70f2ffc7dbe23c15dbaf1f( ::osiris::IDbConnection & inst, ::osiris::String const & sql ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbResult> result = inst.query(sql);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object query_0d43599dd29152d95cb0ed3cad88e1a8( ::osiris::IDbConnection & inst, ::boost::shared_ptr< osiris::DbSqlICommand > select ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IDbResult> result = inst.query(select);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object queryValue( ::osiris::IDbConnection & inst, ::osiris::String const & sql ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::DataItem result = inst.queryValue(sql);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object value_of_0067f7624fc7078cc2b0fb254800d9ef( ::osiris::IDbConnection & inst, ::osiris::String const & sql ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.value_of(sql);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object value_of_8c20e56d4990bb70c5fee9512dec8e16( ::osiris::IDbConnection & inst, ::boost::shared_ptr< osiris::DbSqlICommand > command ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.value_of(command);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_IDbConnection_class(){

    { //::osiris::IDbConnection
        typedef ::boost::python::class_< IDbConnection_wrapper, ::boost::noncopyable > IDbConnection_exposer_t;
        IDbConnection_exposer_t IDbConnection_exposer = IDbConnection_exposer_t( "IDbConnection", ::boost::python::init< ::osiris::String const &, ::boost::shared_ptr< osiris::IDbOptions >, ::boost::shared_ptr< osiris::IDbDriver > >(( ::boost::python::arg("database"), ::boost::python::arg("options"), ::boost::python::arg("driver") )) );
        ::boost::python::scope IDbConnection_scope( IDbConnection_exposer );
        { //::osiris::IDbConnection::getDatabase
        
            typedef boost::python::object ( *getDatabase_function_type )( ::osiris::IDbConnection const & );
            
            IDbConnection_exposer.def( 
                "getDatabase"
                , getDatabase_function_type( &IDbConnection_wrapper::getDatabase ) );
        
        }
        { //::osiris::IDbConnection::getOptions
        
            typedef boost::python::object ( *getOptions_function_type )( ::osiris::IDbConnection const & );
            
            IDbConnection_exposer.def( 
                "getOptions"
                , getOptions_function_type( &IDbConnection_wrapper::getOptions ) );
        
        }
        { //::osiris::IDbConnection::getDriver
        
            typedef boost::python::object ( *getDriver_function_type )( ::osiris::IDbConnection const & );
            
            IDbConnection_exposer.def( 
                "getDriver"
                , getDriver_function_type( &IDbConnection_wrapper::getDriver ) );
        
        }
        { //::osiris::IDbConnection::open
        
            typedef void ( ::osiris::IDbConnection::*open_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "open"
                , ( open_function_type(&::osiris::IDbConnection::open) ) );
        
        }
        { //::osiris::IDbConnection::close
        
            typedef void ( ::osiris::IDbConnection::*close_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "close"
                , ( close_function_type(&::osiris::IDbConnection::close) ) );
        
        }
        { //::osiris::IDbConnection::beginTransaction
        
            typedef void ( ::osiris::IDbConnection::*beginTransaction_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "beginTransaction"
                , ( beginTransaction_function_type(&::osiris::IDbConnection::beginTransaction) ) );
        
        }
        { //::osiris::IDbConnection::commit
        
            typedef void ( ::osiris::IDbConnection::*commit_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "commit"
                , ( commit_function_type(&::osiris::IDbConnection::commit) ) );
        
        }
        { //::osiris::IDbConnection::rollback
        
            typedef void ( ::osiris::IDbConnection::*rollback_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "rollback"
                , ( rollback_function_type(&::osiris::IDbConnection::rollback) ) );
        
        }
        { //::osiris::IDbConnection::_parse
        
            typedef void ( ::osiris::IDbConnection::*_parse_function_type )( ::boost::shared_ptr<osiris::DbSqlICommand>,::osiris::String & ) ;
            
            IDbConnection_exposer.def( 
                "_parse"
                , ( _parse_function_type(&::osiris::IDbConnection::_parse) )
                , ( ::boost::python::arg("command"), ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::analyze
        
            typedef void ( ::osiris::IDbConnection::*analyze_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "analyze"
                , ( analyze_function_type(&::osiris::IDbConnection::analyze) ) );
        
        }
        { //::osiris::IDbConnection::reindex
        
            typedef void ( ::osiris::IDbConnection::*reindex_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "reindex"
                , ( reindex_function_type(&::osiris::IDbConnection::reindex) ) );
        
        }
        { //::osiris::IDbConnection::vacuum
        
            typedef void ( ::osiris::IDbConnection::*vacuum_function_type )(  ) ;
            
            IDbConnection_exposer.def( 
                "vacuum"
                , ( vacuum_function_type(&::osiris::IDbConnection::vacuum) ) );
        
        }
        { //::osiris::IDbConnection::logError
        
            typedef void ( *logError_function_type )( ::osiris::IDbConnection const &,::osiris::String const &,::std::exception & );
            
            IDbConnection_exposer.def( 
                "logError"
                , logError_function_type( &IDbConnection_wrapper::logError )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::IDbConnection::executeStatement
        
            typedef boost::python::object ( *executeStatement_function_type )( ::osiris::IDbConnection &,::osiris::String const &,::osiris::DbSqlValues const & );
            
            IDbConnection_exposer.def( 
                "executeStatement"
                , executeStatement_function_type( &IDbConnection_wrapper::executeStatement )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql"), ::boost::python::arg("values") ) );
        
        }
        { //::osiris::IDbConnection::query
        
            typedef boost::python::object ( *query_function_type )( ::osiris::IDbConnection &,::boost::shared_ptr<osiris::DbSqlICommand>,::osiris::DataTable & );
            
            IDbConnection_exposer.def( 
                "query"
                , query_function_type( &IDbConnection_wrapper::query_42663ceab2765dcce97cc2fd2ed979e4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("select"), ::boost::python::arg("table") ) );
        
        }
        { //::osiris::IDbConnection::query
        
            typedef boost::python::object ( *query_function_type )( ::osiris::IDbConnection &,::osiris::String const &,::osiris::DataTable & );
            
            IDbConnection_exposer.def( 
                "query"
                , query_function_type( &IDbConnection_wrapper::query_04f4da13ae8e3cf73e50ceddce3ca7f9 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql"), ::boost::python::arg("table") ) );
        
        }
        { //::osiris::IDbConnection::prepare_insert
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*prepare_insert_function_type )( ::osiris::String const &,::osiris::DbSqlValues const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_prepare_insert_function_type )( ::osiris::String const &,::osiris::DbSqlValues const & ) const;
            
            IDbConnection_exposer.def( 
                "prepare_insert"
                , prepare_insert_function_type(&::osiris::IDbConnection::prepare_insert)
                , default_prepare_insert_function_type(&IDbConnection_wrapper::default_prepare_insert)
                , ( ::boost::python::arg("table"), ::boost::python::arg("values") ) );
        
        }
        { //::osiris::IDbConnection::prepare_update
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*prepare_update_function_type )( ::osiris::String const &,::osiris::DbSqlValues const &,::osiris::String const &,::osiris::String const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_prepare_update_function_type )( ::osiris::String const &,::osiris::DbSqlValues const &,::osiris::String const &,::osiris::String const & ) const;
            
            IDbConnection_exposer.def( 
                "prepare_update"
                , prepare_update_function_type(&::osiris::IDbConnection::prepare_update)
                , default_prepare_update_function_type(&IDbConnection_wrapper::default_prepare_update)
                , ( ::boost::python::arg("table"), ::boost::python::arg("values"), ::boost::python::arg("field"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::IDbConnection::prepare_update
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*prepare_update_function_type )( ::osiris::String const &,::osiris::DbSqlValues const &,::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_prepare_update_function_type )( ::osiris::String const &,::osiris::DbSqlValues const &,::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            
            IDbConnection_exposer.def( 
                "prepare_update"
                , prepare_update_function_type(&::osiris::IDbConnection::prepare_update)
                , default_prepare_update_function_type(&IDbConnection_wrapper::default_prepare_update)
                , ( ::boost::python::arg("table"), ::boost::python::arg("values"), ::boost::python::arg("f1"), ::boost::python::arg("v1"), ::boost::python::arg("f2"), ::boost::python::arg("v2") ) );
        
        }
        { //::osiris::IDbConnection::sql_remove
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*sql_remove_function_type )( ::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_sql_remove_function_type )( ::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            
            IDbConnection_exposer.def( 
                "sql_remove"
                , sql_remove_function_type(&::osiris::IDbConnection::sql_remove)
                , default_sql_remove_function_type(&IDbConnection_wrapper::default_sql_remove)
                , ( ::boost::python::arg("table"), ::boost::python::arg("field"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::IDbConnection::sql_remove
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*sql_remove_function_type )( ::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_sql_remove_function_type )( ::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const &,::osiris::String const & ) const;
            
            IDbConnection_exposer.def( 
                "sql_remove"
                , sql_remove_function_type(&::osiris::IDbConnection::sql_remove)
                , default_sql_remove_function_type(&IDbConnection_wrapper::default_sql_remove)
                , ( ::boost::python::arg("table"), ::boost::python::arg("f1"), ::boost::python::arg("v1"), ::boost::python::arg("f2"), ::boost::python::arg("v2") ) );
        
        }
        { //::osiris::IDbConnection::_execute
        
            typedef ::osiris::uint32 ( ::osiris::IDbConnection::*_execute_function_type )( ::osiris::String const & ) ;
            
            IDbConnection_exposer.def( 
                "_execute"
                , ( _execute_function_type(&::osiris::IDbConnection::_execute) )
                , ( ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::_prepare
        
            typedef ::boost::shared_ptr<osiris::IDbStatement> ( ::osiris::IDbConnection::*_prepare_function_type )( ::osiris::String const & ) ;
            
            IDbConnection_exposer.def( 
                "_prepare"
                , ( _prepare_function_type(&::osiris::IDbConnection::_prepare) )
                , ( ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::_query
        
            typedef ::boost::shared_ptr<osiris::IDbResult> ( ::osiris::IDbConnection::*_query_function_type )( ::osiris::String const & ) ;
            
            IDbConnection_exposer.def( 
                "_query"
                , ( _query_function_type(&::osiris::IDbConnection::_query) )
                , ( ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::escape
        
            typedef ::osiris::String ( ::osiris::IDbConnection::*escape_function_type )( ::osiris::String const & ) const;
            typedef ::osiris::String ( IDbConnection_wrapper::*default_escape_function_type )( ::osiris::String const & ) const;
            
            IDbConnection_exposer.def( 
                "escape"
                , escape_function_type(&::osiris::IDbConnection::escape)
                , default_escape_function_type(&IDbConnection_wrapper::default_escape)
                , ( ::boost::python::arg("name") ) );
        
        }
        { //::osiris::IDbConnection::execute
        
            typedef boost::python::object ( *execute_function_type )( ::osiris::IDbConnection &,::osiris::String const & );
            
            IDbConnection_exposer.def( 
                "execute"
                , execute_function_type( &IDbConnection_wrapper::execute_4d7f800b630f1575e8853fe3b759e08b )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::execute
        
            typedef boost::python::object ( *execute_function_type )( ::osiris::IDbConnection &,::boost::shared_ptr<osiris::DbSqlICommand> );
            
            IDbConnection_exposer.def( 
                "execute"
                , execute_function_type( &IDbConnection_wrapper::execute_ca19021656a0e3a3d72dc22f3cd1d1e8 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("command") ) );
        
        }
        { //::osiris::IDbConnection::query
        
            typedef boost::python::object ( *query_function_type )( ::osiris::IDbConnection &,::osiris::String const & );
            
            IDbConnection_exposer.def( 
                "query"
                , query_function_type( &IDbConnection_wrapper::query_95faea188a70f2ffc7dbe23c15dbaf1f )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::query
        
            typedef boost::python::object ( *query_function_type )( ::osiris::IDbConnection &,::boost::shared_ptr<osiris::DbSqlICommand> );
            
            IDbConnection_exposer.def( 
                "query"
                , query_function_type( &IDbConnection_wrapper::query_0d43599dd29152d95cb0ed3cad88e1a8 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("select") ) );
        
        }
        { //::osiris::IDbConnection::queryValue
        
            typedef boost::python::object ( *queryValue_function_type )( ::osiris::IDbConnection &,::osiris::String const & );
            
            IDbConnection_exposer.def( 
                "queryValue"
                , queryValue_function_type( &IDbConnection_wrapper::queryValue )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::value_of
        
            typedef boost::python::object ( *value_of_function_type )( ::osiris::IDbConnection &,::osiris::String const & );
            
            IDbConnection_exposer.def( 
                "value_of"
                , value_of_function_type( &IDbConnection_wrapper::value_of_0067f7624fc7078cc2b0fb254800d9ef )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sql") ) );
        
        }
        { //::osiris::IDbConnection::value_of
        
            typedef boost::python::object ( *value_of_function_type )( ::osiris::IDbConnection &,::boost::shared_ptr<osiris::DbSqlICommand> );
            
            IDbConnection_exposer.def( 
                "value_of"
                , value_of_function_type( &IDbConnection_wrapper::value_of_8c20e56d4990bb70c5fee9512dec8e16 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("command") ) );
        
        }
        { //property "database"[fget=::osiris::IDbConnection::getDatabase]
        
            typedef ::osiris::String const & ( ::osiris::IDbConnection::*fget )(  ) const;
            
            IDbConnection_exposer.add_property( 
                "database"
                , ::boost::python::make_function( 
                      fget( &::osiris::IDbConnection::getDatabase )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::String const & osiris::IDbConnection::getDatabase() const [member function]\"" );
        
        }
        { //property "options"[fget=::osiris::IDbConnection::getOptions]
        
            typedef ::boost::shared_ptr<osiris::IDbOptions> ( ::osiris::IDbConnection::*fget )(  ) const;
            
            IDbConnection_exposer.add_property( 
                "options"
                , fget( &::osiris::IDbConnection::getOptions )
                , "get property, built on top of \"boost::shared_ptr<osiris::IDbOptions> osiris::IDbConnection::getOptions() const [member function]\"" );
        
        }
        { //property "driver"[fget=::osiris::IDbConnection::getDriver]
        
            typedef ::boost::shared_ptr<osiris::IDbDriver> ( ::osiris::IDbConnection::*fget )(  ) const;
            
            IDbConnection_exposer.add_property( 
                "driver"
                , fget( &::osiris::IDbConnection::getDriver )
                , "get property, built on top of \"boost::shared_ptr<osiris::IDbDriver> osiris::IDbConnection::getDriver() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::IDbConnection > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::IDbConnection >, boost::shared_ptr< ::osiris::Object > >();
    }

}
