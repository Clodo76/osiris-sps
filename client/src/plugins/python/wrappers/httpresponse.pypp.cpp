// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpresponse.h"
#include "buffer.h"
#include "istream.h"
#include "httpcontent.h"
#include "httpdata.h"
#include "httpresponse.pypp.hpp"

namespace bp = boost::python;

struct HttpResponse_wrapper : ::osiris::HttpResponse, ::osiris::PythonWrapper< ::osiris::HttpResponse > {

    HttpResponse_wrapper( )
    : ::osiris::HttpResponse( )
      , ::osiris::PythonWrapper< ::osiris::HttpResponse >(){
        // null constructor
    
    }

    static boost::python::object getCookies( ::osiris::HttpResponse const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::map<std::string, boost::shared_ptr<osiris::HttpCookie>, std::less<std::string>, osiris::StdAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> >, osiris::SysAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> > > > > const & result = inst.getCookies();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::std::map<std::string, boost::shared_ptr<osiris::HttpCookie>, std::less<std::string>, osiris::StdAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> >, osiris::SysAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> > > > > const & >( result ) );
    }

    static boost::python::object getStatusCode( ::osiris::HttpResponse const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::uint32 result = inst.getStatusCode();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setCookie( ::osiris::HttpResponse & inst, ::std::string const & name, ::std::string const & value ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setCookie(name, value);
        __pythreadSaver.restore();
    }

    static boost::python::object getContentType( ::osiris::HttpResponse const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::std::string result = inst.getContentType();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setDateNow( ::osiris::HttpResponse & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setDateNow();
        __pythreadSaver.restore();
    }

    static void setAllowMethods( ::osiris::HttpResponse & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAllowMethods();
        __pythreadSaver.restore();
    }

    static boost::python::object getResponseBuffer( ::osiris::HttpResponse const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::Buffer const & result = inst.getResponseBuffer();
        __pythreadSaver.restore();
        typedef bp::return_value_policy< bp::copy_const_reference > call_policies_t;
        return boost::python::object( pyplusplus::call_policies::make_object< call_policies_t, ::osiris::Buffer const & >( result ) );
    }

    static boost::python::object getResponseStream( ::osiris::HttpResponse const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IStream> result = inst.getResponseStream();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object write_32eb2ccfad46b4718eadc6d90cb8c7f4( ::osiris::HttpResponse & inst, void const * data, ::osiris::uint32 size ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.write(data, size);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::boost::shared_ptr< osiris::HttpData > createHeader( ::boost::shared_ptr< osiris::HttpData > content ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createHeader = this->get_override( "createHeader" ) )
            return func_createHeader( content );
        else{
            __pystate.leave();
            return this->::osiris::HttpResponse::createHeader( content );
        }
    }
    
    virtual ::boost::shared_ptr< osiris::HttpData > default_createHeader( ::boost::shared_ptr< osiris::HttpData > content ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpResponse::createHeader( content );
    }

    virtual bool parseMethod( ::std::string const & header ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseMethod = this->get_override( "parseMethod" ) )
            return func_parseMethod( header );
        else{
            __pystate.leave();
            return this->::osiris::HttpResponse::parseMethod( header );
        }
    }
    
    virtual bool default_parseMethod( ::std::string const & header ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::HttpResponse::parseMethod( header );
    }

    static boost::python::object removeCookie( ::osiris::HttpResponse & inst, ::std::string const & name ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.removeCookie(name);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static void setContentDisposition( ::osiris::HttpResponse & inst, ::std::string const & filename, ::boost::optional< unsigned int > size=(boost::none) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentDisposition(filename, size);
        __pythreadSaver.restore();
    }

    static void setContentEncoding( ::osiris::HttpResponse & inst, ::std::string const & encoding ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentEncoding(encoding);
        __pythreadSaver.restore();
    }

    static void setContentLength( ::osiris::HttpResponse & inst, ::osiris::uint32 length ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentLength(length);
        __pythreadSaver.restore();
    }

    static void setContentType_4608922d3028a6c724083ef4fa9647d6( ::osiris::HttpResponse & inst, ::std::string const & type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentType(type);
        __pythreadSaver.restore();
    }

    static void setContentType_4208b5a6c682a6558085ed2dc38cb0f3( ::osiris::HttpResponse & inst, ::osiris::HttpContentType type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setContentType(type);
        __pythreadSaver.restore();
    }

    static void setDate( ::osiris::HttpResponse & inst, ::boost::posix_time::ptime const & dt ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setDate(dt);
        __pythreadSaver.restore();
    }

    static void setExpires( ::osiris::HttpResponse & inst, ::boost::posix_time::ptime const & dt ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setExpires(dt);
        __pythreadSaver.restore();
    }

    static void setLastModified( ::osiris::HttpResponse & inst, ::boost::posix_time::ptime const & dt ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLastModified(dt);
        __pythreadSaver.restore();
    }

    static void setLocation( ::osiris::HttpResponse & inst, ::std::string const & location ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setLocation(location);
        __pythreadSaver.restore();
    }

    static void setResponseStream( ::osiris::HttpResponse & inst, ::boost::shared_ptr< osiris::IStream > responseStream ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setResponseStream(responseStream);
        __pythreadSaver.restore();
    }

    static void setServer( ::osiris::HttpResponse & inst, ::std::string const & server ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setServer(server);
        __pythreadSaver.restore();
    }

    static void setStatusCode( ::osiris::HttpResponse & inst, ::osiris::uint32 statusCode ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setStatusCode(statusCode);
        __pythreadSaver.restore();
    }

    static void setWWWBasicAuthenticate( ::osiris::HttpResponse & inst, ::std::string const & realm ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setWWWBasicAuthenticate(realm);
        __pythreadSaver.restore();
    }

    static boost::python::object write_01ab21efbcfc834f8d91b0337fb33237( ::osiris::HttpResponse & inst, ::std::string const & str ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.write(str);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object writeHeader( ::osiris::HttpResponse & inst, ::boost::shared_ptr< osiris::HttpRequest > request ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.writeHeader(request);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual ::boost::shared_ptr< osiris::HttpData > createContent(  ) const {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_createContent = this->get_override( "createContent" ) )
            return func_createContent(  );
        else{
            __pystate.leave();
            return this->::osiris::IHttpMethod::createContent(  );
        }
    }
    
    virtual ::boost::shared_ptr< osiris::HttpData > default_createContent(  ) const {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpMethod::createContent( );
    }

    virtual bool parseContent(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseContent = this->get_override( "parseContent" ) )
            return func_parseContent(  );
        else{
            __pystate.leave();
            return this->::osiris::IHttpMethod::parseContent(  );
        }
    }
    
    virtual bool default_parseContent(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpMethod::parseContent( );
    }

    virtual bool parseHeaders( ::std::string const & headers ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseHeaders = this->get_override( "parseHeaders" ) )
            return func_parseHeaders( headers );
        else{
            __pystate.leave();
            return this->::osiris::IHttpMethod::parseHeaders( headers );
        }
    }
    
    virtual bool default_parseHeaders( ::std::string const & headers ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpMethod::parseHeaders( headers );
    }

    virtual bool parseParam( ::std::string const & paramName, ::std::string const & paramValue ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_parseParam = this->get_override( "parseParam" ) )
            return func_parseParam( paramName, paramValue );
        else{
            __pystate.leave();
            return this->::osiris::IHttpMethod::parseParam( paramName, paramValue );
        }
    }
    
    virtual bool default_parseParam( ::std::string const & paramName, ::std::string const & paramValue ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IHttpMethod::parseParam( paramName, paramValue );
    }

};

void register_HttpResponse_class(){

    { //::osiris::HttpResponse
        typedef ::boost::python::class_< HttpResponse_wrapper, ::boost::python::bases< ::osiris::IHttpMethod >, ::boost::noncopyable > HttpResponse_exposer_t;
        HttpResponse_exposer_t HttpResponse_exposer = HttpResponse_exposer_t( "HttpResponse", ::boost::python::no_init );
        ::boost::python::scope HttpResponse_scope( HttpResponse_exposer );
        HttpResponse_exposer.def( ::boost::python::init< >() );
        { //::osiris::HttpResponse::getCookies
        
            typedef boost::python::object ( *getCookies_function_type )( ::osiris::HttpResponse const & );
            
            HttpResponse_exposer.def( 
                "getCookies"
                , getCookies_function_type( &HttpResponse_wrapper::getCookies ) );
        
        }
        { //::osiris::HttpResponse::getStatusCode
        
            typedef boost::python::object ( *getStatusCode_function_type )( ::osiris::HttpResponse const & );
            
            HttpResponse_exposer.def( 
                "getStatusCode"
                , getStatusCode_function_type( &HttpResponse_wrapper::getStatusCode ) );
        
        }
        { //::osiris::HttpResponse::setCookie
        
            typedef void ( *setCookie_function_type )( ::osiris::HttpResponse &,::std::string const &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setCookie"
                , setCookie_function_type( &HttpResponse_wrapper::setCookie )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name"), ::boost::python::arg("value") ) );
        
        }
        { //::osiris::HttpResponse::getContentType
        
            typedef boost::python::object ( *getContentType_function_type )( ::osiris::HttpResponse const & );
            
            HttpResponse_exposer.def( 
                "getContentType"
                , getContentType_function_type( &HttpResponse_wrapper::getContentType ) );
        
        }
        { //::osiris::HttpResponse::setDateNow
        
            typedef void ( *setDateNow_function_type )( ::osiris::HttpResponse & );
            
            HttpResponse_exposer.def( 
                "setDateNow"
                , setDateNow_function_type( &HttpResponse_wrapper::setDateNow ) );
        
        }
        { //::osiris::HttpResponse::setAllowMethods
        
            typedef void ( *setAllowMethods_function_type )( ::osiris::HttpResponse & );
            
            HttpResponse_exposer.def( 
                "setAllowMethods"
                , setAllowMethods_function_type( &HttpResponse_wrapper::setAllowMethods ) );
        
        }
        { //::osiris::HttpResponse::getResponseBuffer
        
            typedef boost::python::object ( *getResponseBuffer_function_type )( ::osiris::HttpResponse const & );
            
            HttpResponse_exposer.def( 
                "getResponseBuffer"
                , getResponseBuffer_function_type( &HttpResponse_wrapper::getResponseBuffer ) );
        
        }
        { //::osiris::HttpResponse::getResponseStream
        
            typedef boost::python::object ( *getResponseStream_function_type )( ::osiris::HttpResponse const & );
            
            HttpResponse_exposer.def( 
                "getResponseStream"
                , getResponseStream_function_type( &HttpResponse_wrapper::getResponseStream ) );
        
        }
        { //::osiris::HttpResponse::write
        
            typedef boost::python::object ( *write_function_type )( ::osiris::HttpResponse &,void const *,::osiris::uint32 );
            
            HttpResponse_exposer.def( 
                "write"
                , write_function_type( &HttpResponse_wrapper::write_32eb2ccfad46b4718eadc6d90cb8c7f4 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("data"), ::boost::python::arg("size") ) );
        
        }
        { //::osiris::HttpResponse::createHeader
        
            typedef ::boost::shared_ptr< osiris::HttpData > ( HttpResponse_wrapper::*createHeader_function_type )( ::boost::shared_ptr< osiris::HttpData > ) const;
            
            HttpResponse_exposer.def( 
                "createHeader"
                , createHeader_function_type( &HttpResponse_wrapper::default_createHeader )
                , ( ::boost::python::arg("content") ) );
        
        }
        { //::osiris::HttpResponse::parseMethod
        
            typedef bool ( HttpResponse_wrapper::*parseMethod_function_type )( ::std::string const & ) ;
            
            HttpResponse_exposer.def( 
                "parseMethod"
                , parseMethod_function_type( &HttpResponse_wrapper::default_parseMethod )
                , ( ::boost::python::arg("header") ) );
        
        }
        { //::osiris::HttpResponse::removeCookie
        
            typedef boost::python::object ( *removeCookie_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "removeCookie"
                , removeCookie_function_type( &HttpResponse_wrapper::removeCookie )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("name") ) );
        
        }
        { //::osiris::HttpResponse::setContentDisposition
        
            typedef void ( *setContentDisposition_function_type )( ::osiris::HttpResponse &,::std::string const &,::boost::optional<unsigned int> );
            
            HttpResponse_exposer.def( 
                "setContentDisposition"
                , setContentDisposition_function_type( &HttpResponse_wrapper::setContentDisposition )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("filename"), ::boost::python::arg("size")=(boost::none) ) );
        
        }
        { //::osiris::HttpResponse::setContentEncoding
        
            typedef void ( *setContentEncoding_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setContentEncoding"
                , setContentEncoding_function_type( &HttpResponse_wrapper::setContentEncoding )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("encoding") ) );
        
        }
        { //::osiris::HttpResponse::setContentLength
        
            typedef void ( *setContentLength_function_type )( ::osiris::HttpResponse &,::osiris::uint32 );
            
            HttpResponse_exposer.def( 
                "setContentLength"
                , setContentLength_function_type( &HttpResponse_wrapper::setContentLength )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("length") ) );
        
        }
        { //::osiris::HttpResponse::setContentType
        
            typedef void ( *setContentType_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setContentType"
                , setContentType_function_type( &HttpResponse_wrapper::setContentType_4608922d3028a6c724083ef4fa9647d6 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type") ) );
        
        }
        { //::osiris::HttpResponse::setContentType
        
            typedef void ( *setContentType_function_type )( ::osiris::HttpResponse &,::osiris::HttpContentType );
            
            HttpResponse_exposer.def( 
                "setContentType"
                , setContentType_function_type( &HttpResponse_wrapper::setContentType_4208b5a6c682a6558085ed2dc38cb0f3 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("type") ) );
        
        }
        { //::osiris::HttpResponse::setDate
        
            typedef void ( *setDate_function_type )( ::osiris::HttpResponse &,::boost::posix_time::ptime const & );
            
            HttpResponse_exposer.def( 
                "setDate"
                , setDate_function_type( &HttpResponse_wrapper::setDate )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::HttpResponse::setExpires
        
            typedef void ( *setExpires_function_type )( ::osiris::HttpResponse &,::boost::posix_time::ptime const & );
            
            HttpResponse_exposer.def( 
                "setExpires"
                , setExpires_function_type( &HttpResponse_wrapper::setExpires )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::HttpResponse::setLastModified
        
            typedef void ( *setLastModified_function_type )( ::osiris::HttpResponse &,::boost::posix_time::ptime const & );
            
            HttpResponse_exposer.def( 
                "setLastModified"
                , setLastModified_function_type( &HttpResponse_wrapper::setLastModified )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("dt") ) );
        
        }
        { //::osiris::HttpResponse::setLocation
        
            typedef void ( *setLocation_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setLocation"
                , setLocation_function_type( &HttpResponse_wrapper::setLocation )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("location") ) );
        
        }
        { //::osiris::HttpResponse::setResponseStream
        
            typedef void ( *setResponseStream_function_type )( ::osiris::HttpResponse &,::boost::shared_ptr<osiris::IStream> );
            
            HttpResponse_exposer.def( 
                "setResponseStream"
                , setResponseStream_function_type( &HttpResponse_wrapper::setResponseStream )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("responseStream") ) );
        
        }
        { //::osiris::HttpResponse::setServer
        
            typedef void ( *setServer_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setServer"
                , setServer_function_type( &HttpResponse_wrapper::setServer )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("server") ) );
        
        }
        { //::osiris::HttpResponse::setStatusCode
        
            typedef void ( *setStatusCode_function_type )( ::osiris::HttpResponse &,::osiris::uint32 );
            
            HttpResponse_exposer.def( 
                "setStatusCode"
                , setStatusCode_function_type( &HttpResponse_wrapper::setStatusCode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("statusCode") ) );
        
        }
        { //::osiris::HttpResponse::setWWWBasicAuthenticate
        
            typedef void ( *setWWWBasicAuthenticate_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "setWWWBasicAuthenticate"
                , setWWWBasicAuthenticate_function_type( &HttpResponse_wrapper::setWWWBasicAuthenticate )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("realm") ) );
        
        }
        { //::osiris::HttpResponse::write
        
            typedef boost::python::object ( *write_function_type )( ::osiris::HttpResponse &,::std::string const & );
            
            HttpResponse_exposer.def( 
                "write"
                , write_function_type( &HttpResponse_wrapper::write_01ab21efbcfc834f8d91b0337fb33237 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("str") ) );
        
        }
        { //::osiris::HttpResponse::writeHeader
        
            typedef boost::python::object ( *writeHeader_function_type )( ::osiris::HttpResponse &,::boost::shared_ptr<osiris::HttpRequest> );
            
            HttpResponse_exposer.def( 
                "writeHeader"
                , writeHeader_function_type( &HttpResponse_wrapper::writeHeader )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("request") ) );
        
        }
        { //::osiris::IHttpMethod::createContent
        
            typedef ::boost::shared_ptr< osiris::HttpData > ( HttpResponse_wrapper::*createContent_function_type )(  ) const;
            
            HttpResponse_exposer.def( 
                "createContent"
                , createContent_function_type( &HttpResponse_wrapper::default_createContent ) );
        
        }
        { //::osiris::IHttpMethod::parseContent
        
            typedef bool ( HttpResponse_wrapper::*parseContent_function_type )(  ) ;
            
            HttpResponse_exposer.def( 
                "parseContent"
                , parseContent_function_type( &HttpResponse_wrapper::default_parseContent ) );
        
        }
        { //::osiris::IHttpMethod::parseHeaders
        
            typedef bool ( HttpResponse_wrapper::*parseHeaders_function_type )( ::std::string const & ) ;
            
            HttpResponse_exposer.def( 
                "parseHeaders"
                , parseHeaders_function_type( &HttpResponse_wrapper::default_parseHeaders )
                , ( ::boost::python::arg("headers") ) );
        
        }
        { //::osiris::IHttpMethod::parseParam
        
            typedef bool ( HttpResponse_wrapper::*parseParam_function_type )( ::std::string const &,::std::string const & ) ;
            
            HttpResponse_exposer.def( 
                "parseParam"
                , parseParam_function_type( &HttpResponse_wrapper::default_parseParam )
                , ( ::boost::python::arg("paramName"), ::boost::python::arg("paramValue") ) );
        
        }
        { //property "statusCode"[fget=::osiris::HttpResponse::getStatusCode, fset=::osiris::HttpResponse::setStatusCode]
        
            typedef ::osiris::uint32 ( ::osiris::HttpResponse::*fget )(  ) const;
            typedef void ( ::osiris::HttpResponse::*fset )( ::osiris::uint32 ) ;
            
            HttpResponse_exposer.add_property( 
                "statusCode"
                , fget( &::osiris::HttpResponse::getStatusCode )
                , fset( &::osiris::HttpResponse::setStatusCode )
                , "get\\set property, built on top of \"osiris::uint32 osiris::HttpResponse::getStatusCode() const [member function]\" and \"void osiris::HttpResponse::setStatusCode(osiris::uint32 statusCode) [member function]\"" );
        
        }
        { //property "responseStream"[fget=::osiris::HttpResponse::getResponseStream, fset=::osiris::HttpResponse::setResponseStream]
        
            typedef ::boost::shared_ptr<osiris::IStream> ( ::osiris::HttpResponse::*fget )(  ) const;
            typedef void ( ::osiris::HttpResponse::*fset )( ::boost::shared_ptr<osiris::IStream> ) ;
            
            HttpResponse_exposer.add_property( 
                "responseStream"
                , fget( &::osiris::HttpResponse::getResponseStream )
                , fset( &::osiris::HttpResponse::setResponseStream )
                , "get\\set property, built on top of \"boost::shared_ptr<osiris::IStream> osiris::HttpResponse::getResponseStream() const [member function]\" and \"void osiris::HttpResponse::setResponseStream(boost::shared_ptr<osiris::IStream> responseStream) [member function]\"" );
        
        }
        { //property "cookies"[fget=::osiris::HttpResponse::getCookies]
        
            typedef ::std::map<std::string, boost::shared_ptr<osiris::HttpCookie>, std::less<std::string>, osiris::StdAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> >, osiris::SysAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> > > > > const & ( ::osiris::HttpResponse::*fget )(  ) const;
            
            HttpResponse_exposer.add_property( 
                "cookies"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpResponse::getCookies )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"std::map<std::string, boost::shared_ptr<osiris::HttpCookie>, std::less<std::string>, osiris::StdAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> >, osiris::SysAllocator<std::pair<std::string const, boost::shared_ptr<osiris::HttpCookie> > > > > const & osiris::HttpResponse::getCookies() const [member function]\"" );
        
        }
        { //property "contentType"[fget=::osiris::HttpResponse::getContentType]
        
            typedef ::std::string ( ::osiris::HttpResponse::*fget )(  ) const;
            
            HttpResponse_exposer.add_property( 
                "contentType"
                , fget( &::osiris::HttpResponse::getContentType )
                , "get property, built on top of \"std::string osiris::HttpResponse::getContentType() const [member function]\"" );
        
        }
        { //property "responseBuffer"[fget=::osiris::HttpResponse::getResponseBuffer]
        
            typedef ::osiris::Buffer const & ( ::osiris::HttpResponse::*fget )(  ) const;
            
            HttpResponse_exposer.add_property( 
                "responseBuffer"
                , ::boost::python::make_function( 
                      fget( &::osiris::HttpResponse::getResponseBuffer )
                    , bp::return_value_policy< bp::copy_const_reference >() ) 
                , "get property, built on top of \"osiris::Buffer const & osiris::HttpResponse::getResponseBuffer() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HttpResponse > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpResponse >, boost::shared_ptr< ::osiris::IHttpMethod > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpResponse >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpResponse >, boost::shared_ptr< ::osiris::Object > >();
    }

}
