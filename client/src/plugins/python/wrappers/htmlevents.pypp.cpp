// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "eventssource.h"
#include "ievent.h"
#include "htmlevents.pypp.hpp"

namespace bp = boost::python;

struct EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper : ::osiris::EventsSource< osiris::String, osiris::IEvent >, ::osiris::PythonWrapper< ::osiris::EventsSource< osiris::String, osiris::IEvent > > {

    EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper( )
    : ::osiris::EventsSource<osiris::String, osiris::IEvent>( )
      , ::osiris::PythonWrapper< ::osiris::EventsSource< osiris::String, osiris::IEvent > >(){
        // nullptr constructor
    
    }

    virtual void fire( ::osiris::String const & key, ::osiris::IEvent * e ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_fire = this->get_override( "fire" ) )
            func_fire( boost::ref(key), boost::python::ptr(e) );
        else{
            __pystate.leave();
            this->::osiris::EventsSource< osiris::String, osiris::IEvent >::fire( boost::ref(key), boost::python::ptr(e) );
        }
    }
    
    void default_fire( ::osiris::String const & key, ::osiris::IEvent * e ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::EventsSource< osiris::String, osiris::IEvent >::fire( boost::ref(key), boost::python::ptr(e) );
    }

    static boost::python::object exists( ::osiris::EventsSource< osiris::String, osiris::IEvent > const & inst, ::osiris::String const & key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.exists(key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object get( ::osiris::EventsSource< osiris::String, osiris::IEvent > const & inst, ::osiris::String const & key ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::EventSource> result = inst.get(key);
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

};

void register_HtmlEvents_class(){

    { //::osiris::EventsSource< osiris::String, osiris::IEvent >
        typedef ::boost::python::class_< EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper, ::boost::noncopyable > HtmlEvents_exposer_t;
        HtmlEvents_exposer_t HtmlEvents_exposer = HtmlEvents_exposer_t( "HtmlEvents", ::boost::python::no_init );
        ::boost::python::scope HtmlEvents_scope( HtmlEvents_exposer );
        HtmlEvents_exposer.def( ::boost::python::init< >() );
        { //::osiris::EventsSource< osiris::String, osiris::IEvent >::fire
        
            typedef ::osiris::EventsSource< osiris::String, osiris::IEvent > exported_class_t;
            typedef void ( exported_class_t::*fire_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            typedef void ( EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper::*default_fire_function_type )( ::osiris::String const &,::osiris::IEvent * ) ;
            
            HtmlEvents_exposer.def( 
                "fire"
                , fire_function_type(&::osiris::EventsSource< osiris::String, osiris::IEvent >::fire)
                , default_fire_function_type(&EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper::default_fire)
                , ( ::boost::python::arg("key"), ::boost::python::arg("e") ) );
        
        }
        { //::osiris::EventsSource< osiris::String, osiris::IEvent >::exists
        
            typedef ::osiris::EventsSource< osiris::String, osiris::IEvent > exported_class_t;
            typedef boost::python::object ( *exists_function_type )( ::osiris::EventsSource<osiris::String, osiris::IEvent> const &,::osiris::String const & );
            
            HtmlEvents_exposer.def( 
                "exists"
                , exists_function_type( &EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper::exists )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("key") ) );
        
        }
        { //::osiris::EventsSource< osiris::String, osiris::IEvent >::get
        
            typedef ::osiris::EventsSource< osiris::String, osiris::IEvent > exported_class_t;
            typedef boost::python::object ( *get_function_type )( ::osiris::EventsSource<osiris::String, osiris::IEvent> const &,::osiris::String const & );
            
            HtmlEvents_exposer.def( 
                "get"
                , get_function_type( &EventsSource_less__osiris_scope_String_comma__osiris_scope_IEvent__greater__wrapper::get )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("key") ) );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::EventsSource<osiris::String, osiris::IEvent> > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::EventsSource< osiris::String, osiris::IEvent > >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::EventsSource< osiris::String, osiris::IEvent > >, boost::shared_ptr< ::osiris::Object > >();
    }

}
