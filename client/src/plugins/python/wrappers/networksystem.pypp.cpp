// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "networksystem.h"
#include "networksystem.pypp.hpp"

namespace bp = boost::python;

static boost::python::object getLocalAddress_4e9d0e1a99c87c5717f3903db332a65b( ::osiris::NetworkSystem const & inst ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    ::osiris::String result = inst.getLocalAddress();
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object dnsLookup_c78505e8e841fd1f46f534329b4b8113( ::osiris::NetworkSystem & inst, ::in_addr sin_addr, ::osiris::String & domainName ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.dnsLookup(sin_addr, domainName);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object compareAddresses_4c834c93ba11a20cf48d13cbd2307369( ::osiris::NetworkSystem & inst, ::std::string const & ip, ::boost::asio::ip::address const & address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.compareAddresses(ip, address);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isLocalAddress_d6e58555c7464d1e1e4e60b98472a685( ::osiris::NetworkSystem const & inst, ::osiris::String const & address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isLocalAddress(address);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object isPrivateAddress_f085e7a06216870b025dc64e1621e95d( ::osiris::NetworkSystem const & inst, ::osiris::String const & address ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.isPrivateAddress(address);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

static boost::python::object validateIP_73a2a9f0d0b078bdee3a96600705a85d( ::osiris::NetworkSystem & inst, ::osiris::String const & ip ){
    ::osiris::PythonThreadSaver __pythreadSaver;
    bool result = inst.validateIP(ip);
    __pythreadSaver.restore();
    return boost::python::object( result );
}

void register_NetworkSystem_class(){

    { //::osiris::NetworkSystem
        typedef ::boost::python::class_< ::osiris::NetworkSystem, ::boost::python::bases< ::osiris::StaticSingleton< osiris::NetworkSystem, true > >, ::boost::noncopyable > NetworkSystem_exposer_t;
        NetworkSystem_exposer_t NetworkSystem_exposer = NetworkSystem_exposer_t( "NetworkSystem", ::boost::python::init< >() );
        ::boost::python::scope NetworkSystem_scope( NetworkSystem_exposer );
        { //::osiris::NetworkSystem::getLocalAddress
        
            typedef boost::python::object ( *getLocalAddress_function_type )( ::osiris::NetworkSystem const & );
            
            NetworkSystem_exposer.def( 
                "getLocalAddress"
                , getLocalAddress_function_type( &getLocalAddress_4e9d0e1a99c87c5717f3903db332a65b ) );
        
        }
        { //::osiris::NetworkSystem::dnsLookup
        
            typedef boost::python::object ( *dnsLookup_function_type )( ::osiris::NetworkSystem &,::in_addr,::osiris::String & );
            
            NetworkSystem_exposer.def( 
                "dnsLookup"
                , dnsLookup_function_type( &dnsLookup_c78505e8e841fd1f46f534329b4b8113 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("sin_addr"), ::boost::python::arg("domainName") ) );
        
        }
        { //::osiris::NetworkSystem::compareAddresses
        
            typedef boost::python::object ( *compareAddresses_function_type )( ::osiris::NetworkSystem &,::std::string const &,::boost::asio::ip::address const & );
            
            NetworkSystem_exposer.def( 
                "compareAddresses"
                , compareAddresses_function_type( &compareAddresses_4c834c93ba11a20cf48d13cbd2307369 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("ip"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::NetworkSystem::isLocalAddress
        
            typedef boost::python::object ( *isLocalAddress_function_type )( ::osiris::NetworkSystem const &,::osiris::String const & );
            
            NetworkSystem_exposer.def( 
                "isLocalAddress"
                , isLocalAddress_function_type( &isLocalAddress_d6e58555c7464d1e1e4e60b98472a685 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::NetworkSystem::isPrivateAddress
        
            typedef boost::python::object ( *isPrivateAddress_function_type )( ::osiris::NetworkSystem const &,::osiris::String const & );
            
            NetworkSystem_exposer.def( 
                "isPrivateAddress"
                , isPrivateAddress_function_type( &isPrivateAddress_f085e7a06216870b025dc64e1621e95d )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("address") ) );
        
        }
        { //::osiris::NetworkSystem::validateIP
        
            typedef boost::python::object ( *validateIP_function_type )( ::osiris::NetworkSystem &,::osiris::String const & );
            
            NetworkSystem_exposer.def( 
                "validateIP"
                , validateIP_function_type( &validateIP_73a2a9f0d0b078bdee3a96600705a85d )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("ip") ) );
        
        }
        { //property "localAddress"[fget=::osiris::NetworkSystem::getLocalAddress]
        
            typedef ::osiris::String ( ::osiris::NetworkSystem::*fget )(  ) const;
            
            NetworkSystem_exposer.add_property( 
                "localAddress"
                , fget( &::osiris::NetworkSystem::getLocalAddress )
                , "get property, built on top of \"osiris::String osiris::NetworkSystem::getLocalAddress() const [member function]\"" );
        
        }
    }

}
