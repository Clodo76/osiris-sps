// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "httpsession.h"
#include "httprequest.h"
#include "httpresponse.h"
#include "httpsessionstate.h"
#include "ihttpserver.h"
#include "tcpsocket.h"
#include "httpsession.pypp.hpp"

namespace bp = boost::python;

struct HttpSession_wrapper : ::osiris::HttpSession, ::osiris::PythonWrapper< ::osiris::HttpSession > {

    HttpSession_wrapper(::boost::shared_ptr< osiris::IHttpServer > server, ::boost::shared_ptr< osiris::TCPSocket > socket, ::osiris::uint32 timeout=10000 )
    : ::osiris::HttpSession( server, socket, timeout )
      , ::osiris::PythonWrapper< ::osiris::HttpSession >(){
        // constructor
    
    }

    static boost::python::object getServer( ::osiris::HttpSession const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::IHttpServer> result = inst.getServer();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getRequest( ::osiris::HttpSession const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpRequest> result = inst.getRequest();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getResponse( ::osiris::HttpSession const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpResponse> result = inst.getResponse();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getState( ::osiris::HttpSession const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::boost::shared_ptr<osiris::HttpSessionState> result = inst.getState();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getProcessed( ::osiris::HttpSession const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        bool result = inst.getProcessed();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void run(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_run = this->get_override( "run" ) )
            func_run(  );
        else{
            __pystate.leave();
            this->::osiris::HttpSession::run(  );
        }
    }
    
    void default_run(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::HttpSession::run( );
    }

    static void transmitHtml( ::osiris::HttpSession & inst, ::std::string const & html, ::osiris::HttpStatusCode code ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitHtml(html, code);
        __pythreadSaver.restore();
    }

    static void transmitStream( ::osiris::HttpSession & inst, ::boost::shared_ptr< osiris::IStream > stream, ::osiris::String const & file_name, ::osiris::String const & mime_type, ::boost::posix_time::ptime const & date=(osiris::constants::time_null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitStream(stream, file_name, mime_type, date);
        __pythreadSaver.restore();
    }

    static void transmitBuffer_9d0e2d2b0dfa05c8d9c81e085ee7b09c( ::osiris::HttpSession & inst, ::osiris::Buffer const & buffer, ::osiris::String const & file_name, ::osiris::String const & mime_type ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitBuffer(buffer, file_name, mime_type);
        __pythreadSaver.restore();
    }

    static void transmitBuffer_6f0d7076eddbe2b61024d837fa810a29( ::osiris::HttpSession & inst, ::osiris::Buffer const & buffer, ::osiris::String const & file_name, ::osiris::String const & mime_type, ::boost::posix_time::ptime const & date ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitBuffer(buffer, file_name, mime_type, date);
        __pythreadSaver.restore();
    }

    static void transmitBufferPtr( ::osiris::HttpSession & inst, void const * buffer, ::osiris::uint32 size, ::osiris::String const & file_name, ::osiris::String const & mime_type, ::boost::posix_time::ptime const & date=(osiris::constants::time_null) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitBufferPtr(buffer, size, file_name, mime_type, date);
        __pythreadSaver.restore();
    }

    ::boost::shared_ptr< boost::array< char, 8192ul > > getRequestBuffer(  ) const {
        return ::osiris::HttpSession::getRequestBuffer(  );
    }

    ::boost::shared_ptr< boost::array< char, 8192ul > > getResponseBuffer(  ) const {
        return ::osiris::HttpSession::getResponseBuffer(  );
    }

    static void redirect( ::osiris::HttpSession & inst, ::std::string const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.redirect(url);
        __pythreadSaver.restore();
    }

    static void reportStatusCode( ::osiris::HttpSession & inst, ::osiris::HttpStatusCode status, ::std::string const & body=(osiris::constants::empty_string) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.reportStatusCode(status, body);
        __pythreadSaver.restore();
    }

    static void transmitFile( ::osiris::HttpSession & inst, ::osiris::String const & filename, ::std::string const & mimeType=(osiris::constants::empty_string) ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.transmitFile(filename, mimeType);
        __pythreadSaver.restore();
    }

};

void register_HttpSession_class(){

    { //::osiris::HttpSession
        typedef ::boost::python::class_< HttpSession_wrapper, ::boost::noncopyable > HttpSession_exposer_t;
        HttpSession_exposer_t HttpSession_exposer = HttpSession_exposer_t( "HttpSession", ::boost::python::init< ::boost::shared_ptr< osiris::IHttpServer >, ::boost::shared_ptr< osiris::TCPSocket >, ::boost::python::optional< ::osiris::uint32 > >(( ::boost::python::arg("server"), ::boost::python::arg("socket"), ::boost::python::arg("timeout")=(::osiris::uint32)(10000) )) );
        ::boost::python::scope HttpSession_scope( HttpSession_exposer );
        { //::osiris::HttpSession::getServer
        
            typedef boost::python::object ( *getServer_function_type )( ::osiris::HttpSession const & );
            
            HttpSession_exposer.def( 
                "getServer"
                , getServer_function_type( &HttpSession_wrapper::getServer ) );
        
        }
        { //::osiris::HttpSession::getRequest
        
            typedef boost::python::object ( *getRequest_function_type )( ::osiris::HttpSession const & );
            
            HttpSession_exposer.def( 
                "getRequest"
                , getRequest_function_type( &HttpSession_wrapper::getRequest ) );
        
        }
        { //::osiris::HttpSession::getResponse
        
            typedef boost::python::object ( *getResponse_function_type )( ::osiris::HttpSession const & );
            
            HttpSession_exposer.def( 
                "getResponse"
                , getResponse_function_type( &HttpSession_wrapper::getResponse ) );
        
        }
        { //::osiris::HttpSession::getState
        
            typedef boost::python::object ( *getState_function_type )( ::osiris::HttpSession const & );
            
            HttpSession_exposer.def( 
                "getState"
                , getState_function_type( &HttpSession_wrapper::getState ) );
        
        }
        { //::osiris::HttpSession::getProcessed
        
            typedef boost::python::object ( *getProcessed_function_type )( ::osiris::HttpSession const & );
            
            HttpSession_exposer.def( 
                "getProcessed"
                , getProcessed_function_type( &HttpSession_wrapper::getProcessed ) );
        
        }
        { //::osiris::HttpSession::getSocket
        
            typedef ::osiris::TCPSocket & ( ::osiris::HttpSession::*getSocket_function_type )(  ) ;
            
            HttpSession_exposer.def( 
                "getSocket"
                , getSocket_function_type(&::osiris::HttpSession::getSocket)
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::osiris::HttpSession::run
        
            typedef void ( ::osiris::HttpSession::*run_function_type )(  ) ;
            typedef void ( HttpSession_wrapper::*default_run_function_type )(  ) ;
            
            HttpSession_exposer.def( 
                "run"
                , run_function_type(&::osiris::HttpSession::run)
                , default_run_function_type(&HttpSession_wrapper::default_run) );
        
        }
        { //::osiris::HttpSession::transmitHtml
        
            typedef void ( *transmitHtml_function_type )( ::osiris::HttpSession &,::std::string const &,::osiris::HttpStatusCode );
            
            HttpSession_exposer.def( 
                "transmitHtml"
                , transmitHtml_function_type( &HttpSession_wrapper::transmitHtml )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("html"), ::boost::python::arg("code") ) );
        
        }
        { //::osiris::HttpSession::transmitStream
        
            typedef void ( *transmitStream_function_type )( ::osiris::HttpSession &,::boost::shared_ptr<osiris::IStream>,::osiris::String const &,::osiris::String const &,::boost::posix_time::ptime const & );
            
            HttpSession_exposer.def( 
                "transmitStream"
                , transmitStream_function_type( &HttpSession_wrapper::transmitStream )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("stream"), ::boost::python::arg("file_name"), ::boost::python::arg("mime_type"), ::boost::python::arg("date")=(osiris::constants::time_null) ) );
        
        }
        { //::osiris::HttpSession::transmitBuffer
        
            typedef void ( *transmitBuffer_function_type )( ::osiris::HttpSession &,::osiris::Buffer const &,::osiris::String const &,::osiris::String const & );
            
            HttpSession_exposer.def( 
                "transmitBuffer"
                , transmitBuffer_function_type( &HttpSession_wrapper::transmitBuffer_9d0e2d2b0dfa05c8d9c81e085ee7b09c )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("buffer"), ::boost::python::arg("file_name"), ::boost::python::arg("mime_type") ) );
        
        }
        { //::osiris::HttpSession::transmitBuffer
        
            typedef void ( *transmitBuffer_function_type )( ::osiris::HttpSession &,::osiris::Buffer const &,::osiris::String const &,::osiris::String const &,::boost::posix_time::ptime const & );
            
            HttpSession_exposer.def( 
                "transmitBuffer"
                , transmitBuffer_function_type( &HttpSession_wrapper::transmitBuffer_6f0d7076eddbe2b61024d837fa810a29 )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("buffer"), ::boost::python::arg("file_name"), ::boost::python::arg("mime_type"), ::boost::python::arg("date") ) );
        
        }
        { //::osiris::HttpSession::transmitBufferPtr
        
            typedef void ( *transmitBufferPtr_function_type )( ::osiris::HttpSession &,void const *,::osiris::uint32,::osiris::String const &,::osiris::String const &,::boost::posix_time::ptime const & );
            
            HttpSession_exposer.def( 
                "transmitBufferPtr"
                , transmitBufferPtr_function_type( &HttpSession_wrapper::transmitBufferPtr )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("buffer"), ::boost::python::arg("size"), ::boost::python::arg("file_name"), ::boost::python::arg("mime_type"), ::boost::python::arg("date")=(osiris::constants::time_null) ) );
        
        }
        { //::osiris::HttpSession::getRequestBuffer
        
            typedef ::boost::shared_ptr< boost::array< char, 8192ul > > ( HttpSession_wrapper::*getRequestBuffer_function_type )(  ) const;
            
            HttpSession_exposer.def( 
                "getRequestBuffer"
                , getRequestBuffer_function_type( &HttpSession_wrapper::getRequestBuffer ) );
        
        }
        { //::osiris::HttpSession::getResponseBuffer
        
            typedef ::boost::shared_ptr< boost::array< char, 8192ul > > ( HttpSession_wrapper::*getResponseBuffer_function_type )(  ) const;
            
            HttpSession_exposer.def( 
                "getResponseBuffer"
                , getResponseBuffer_function_type( &HttpSession_wrapper::getResponseBuffer ) );
        
        }
        { //::osiris::HttpSession::redirect
        
            typedef void ( *redirect_function_type )( ::osiris::HttpSession &,::std::string const & );
            
            HttpSession_exposer.def( 
                "redirect"
                , redirect_function_type( &HttpSession_wrapper::redirect )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::HttpSession::reportStatusCode
        
            typedef void ( *reportStatusCode_function_type )( ::osiris::HttpSession &,::osiris::HttpStatusCode,::std::string const & );
            
            HttpSession_exposer.def( 
                "reportStatusCode"
                , reportStatusCode_function_type( &HttpSession_wrapper::reportStatusCode )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("status"), ::boost::python::arg("body")=(osiris::constants::empty_string) ) );
        
        }
        { //::osiris::HttpSession::transmitFile
        
            typedef void ( *transmitFile_function_type )( ::osiris::HttpSession &,::osiris::String const &,::std::string const & );
            
            HttpSession_exposer.def( 
                "transmitFile"
                , transmitFile_function_type( &HttpSession_wrapper::transmitFile )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("filename"), ::boost::python::arg("mimeType")=(osiris::constants::empty_string) ) );
        
        }
        { //property "server"[fget=::osiris::HttpSession::getServer]
        
            typedef ::boost::shared_ptr<osiris::IHttpServer> ( ::osiris::HttpSession::*fget )(  ) const;
            
            HttpSession_exposer.add_property( 
                "server"
                , fget( &::osiris::HttpSession::getServer )
                , "get property, built on top of \"boost::shared_ptr<osiris::IHttpServer> osiris::HttpSession::getServer() const [member function]\"" );
        
        }
        { //property "request"[fget=::osiris::HttpSession::getRequest]
        
            typedef ::boost::shared_ptr<osiris::HttpRequest> ( ::osiris::HttpSession::*fget )(  ) const;
            
            HttpSession_exposer.add_property( 
                "request"
                , fget( &::osiris::HttpSession::getRequest )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpRequest> osiris::HttpSession::getRequest() const [member function]\"" );
        
        }
        { //property "response"[fget=::osiris::HttpSession::getResponse]
        
            typedef ::boost::shared_ptr<osiris::HttpResponse> ( ::osiris::HttpSession::*fget )(  ) const;
            
            HttpSession_exposer.add_property( 
                "response"
                , fget( &::osiris::HttpSession::getResponse )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpResponse> osiris::HttpSession::getResponse() const [member function]\"" );
        
        }
        { //property "state"[fget=::osiris::HttpSession::getState]
        
            typedef ::boost::shared_ptr<osiris::HttpSessionState> ( ::osiris::HttpSession::*fget )(  ) const;
            
            HttpSession_exposer.add_property( 
                "state"
                , fget( &::osiris::HttpSession::getState )
                , "get property, built on top of \"boost::shared_ptr<osiris::HttpSessionState> osiris::HttpSession::getState() const [member function]\"" );
        
        }
        { //property "processed"[fget=::osiris::HttpSession::getProcessed]
        
            typedef bool ( ::osiris::HttpSession::*fget )(  ) const;
            
            HttpSession_exposer.add_property( 
                "processed"
                , fget( &::osiris::HttpSession::getProcessed )
                , "get property, built on top of \"bool osiris::HttpSession::getProcessed() const [member function]\"" );
        
        }
        ::boost::python::register_ptr_to_python< boost::shared_ptr< ::osiris::HttpSession > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpSession >, boost::shared_ptr< ::osiris::IConnection > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpSession >, boost::shared_ptr< ::boost::noncopyable_::noncopyable > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpSession >, boost::shared_ptr< ::osiris::Object > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpSession >, boost::shared_ptr< ::osiris::ConnectionScope::IListener > >();
        ::boost::python::implicitly_convertible< boost::shared_ptr< ::osiris::HttpSession >, boost::shared_ptr< ::osiris::enable_this_ptr< osiris::IConnection > > >();
    }

}
