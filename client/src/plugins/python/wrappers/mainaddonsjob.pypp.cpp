// This file has been generated by Py++.

#include "stdafx.h"
#include "pypluspluscommon.h"
#include "boost/python.hpp"
#include "__call_policies.pypp.hpp"
#include "mainaddonsjob.h"
#include "mainaddonsjob.pypp.hpp"

namespace bp = boost::python;

struct MainAddonsJob_wrapper : ::osiris::MainAddonsJob, ::osiris::PythonWrapper< ::osiris::MainAddonsJob > {

    MainAddonsJob_wrapper(::osiris::uint32 id, ::osiris::String const & action, ::std::string const & extensionID, ::osiris::String const & downloadUrl )
    : ::osiris::MainAddonsJob( id, boost::ref(action), extensionID, boost::ref(downloadUrl) )
      , ::osiris::PythonWrapper< ::osiris::MainAddonsJob >(){
        // constructor
    
    }

    static boost::python::object getAction( ::osiris::MainAddonsJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getAction();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getExtensionID( ::osiris::MainAddonsJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::UniqueID result = inst.getExtensionID();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getUrl( ::osiris::MainAddonsJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::String result = inst.getUrl();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    static boost::python::object getProgressPercentage( ::osiris::MainAddonsJob const & inst ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        double result = inst.getProgressPercentage();
        __pythreadSaver.restore();
        return boost::python::object( result );
    }

    virtual void stop(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_stop = this->get_override( "stop" ) )
            func_stop(  );
        else{
            __pystate.leave();
            this->::osiris::MainAddonsJob::stop(  );
        }
    }
    
    void default_stop(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::MainAddonsJob::stop( );
    }

    virtual ::osiris::IJob::JobStatus run(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_run = this->get_override( "run" ) )
            return func_run(  );
        else{
            __pystate.leave();
            return this->::osiris::MainAddonsJob::run(  );
        }
    }
    
    ::osiris::IJob::JobStatus default_run(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::MainAddonsJob::run( );
    }

    virtual ::boost::shared_ptr< osiris::IBackgroundJob::Details > getDetails(  ) const  {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_getDetails = this->get_override( "getDetails" ) )
            return func_getDetails(  );
        else{
            __pystate.leave();
            return this->::osiris::MainAddonsJob::getDetails(  );
        }
    }
    
    ::boost::shared_ptr< osiris::IBackgroundJob::Details > default_getDetails(  ) const  {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::MainAddonsJob::getDetails( );
    }

    static void setAction( ::osiris::MainAddonsJob & inst, ::osiris::String const & action ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setAction(action);
        __pythreadSaver.restore();
    }

    static void setExtensionID( ::osiris::MainAddonsJob & inst, ::osiris::UniqueID const & id ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setExtensionID(id);
        __pythreadSaver.restore();
    }

    static void setProgressPercentage( ::osiris::MainAddonsJob & inst, double v ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setProgressPercentage(v);
        __pythreadSaver.restore();
    }

    static void setUrl( ::osiris::MainAddonsJob & inst, ::osiris::String const & url ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        inst.setUrl(url);
        __pythreadSaver.restore();
    }

    virtual void onProgress(  ){
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_onProgress = this->get_override( "onProgress" ) )
            func_onProgress(  );
        else{
            __pystate.leave();
            this->::osiris::IBackgroundJob::onProgress(  );
        }
    }
    
    virtual void default_onProgress(  ){
        ::osiris::PythonThreadSaver __pythreadSaver;
        ::osiris::IBackgroundJob::onProgress( );
    }

    virtual ::osiris::IJob::JobStatus start(  ) {
        ::osiris::PythonState __pystate(getPythonThreadState());
        if( ::osiris::PythonOverride func_start = this->get_override( "start" ) )
            return func_start(  );
        else{
            __pystate.leave();
            return this->::osiris::IJob::start(  );
        }
    }
    
    ::osiris::IJob::JobStatus default_start(  ) {
        ::osiris::PythonThreadSaver __pythreadSaver;
        return ::osiris::IJob::start( );
    }

};

void register_MainAddonsJob_class(){

    { //::osiris::MainAddonsJob
        typedef ::boost::python::class_< MainAddonsJob_wrapper, ::boost::python::bases< ::osiris::IBackgroundJob >, ::boost::noncopyable > MainAddonsJob_exposer_t;
        MainAddonsJob_exposer_t MainAddonsJob_exposer = MainAddonsJob_exposer_t( "MainAddonsJob", ::boost::python::init< ::osiris::uint32, ::osiris::String const &, ::std::string const &, ::osiris::String const & >(( ::boost::python::arg("id"), ::boost::python::arg("action"), ::boost::python::arg("extensionID"), ::boost::python::arg("downloadUrl") )) );
        ::boost::python::scope MainAddonsJob_scope( MainAddonsJob_exposer );
        { //::osiris::MainAddonsJob::getAction
        
            typedef boost::python::object ( *getAction_function_type )( ::osiris::MainAddonsJob const & );
            
            MainAddonsJob_exposer.def( 
                "getAction"
                , getAction_function_type( &MainAddonsJob_wrapper::getAction ) );
        
        }
        { //::osiris::MainAddonsJob::getExtensionID
        
            typedef boost::python::object ( *getExtensionID_function_type )( ::osiris::MainAddonsJob const & );
            
            MainAddonsJob_exposer.def( 
                "getExtensionID"
                , getExtensionID_function_type( &MainAddonsJob_wrapper::getExtensionID ) );
        
        }
        { //::osiris::MainAddonsJob::getUrl
        
            typedef boost::python::object ( *getUrl_function_type )( ::osiris::MainAddonsJob const & );
            
            MainAddonsJob_exposer.def( 
                "getUrl"
                , getUrl_function_type( &MainAddonsJob_wrapper::getUrl ) );
        
        }
        { //::osiris::MainAddonsJob::getProgressPercentage
        
            typedef boost::python::object ( *getProgressPercentage_function_type )( ::osiris::MainAddonsJob const & );
            
            MainAddonsJob_exposer.def( 
                "getProgressPercentage"
                , getProgressPercentage_function_type( &MainAddonsJob_wrapper::getProgressPercentage ) );
        
        }
        { //::osiris::MainAddonsJob::stop
        
            typedef void ( ::osiris::MainAddonsJob::*stop_function_type )(  ) ;
            typedef void ( MainAddonsJob_wrapper::*default_stop_function_type )(  ) ;
            
            MainAddonsJob_exposer.def( 
                "stop"
                , stop_function_type(&::osiris::MainAddonsJob::stop)
                , default_stop_function_type(&MainAddonsJob_wrapper::default_stop) );
        
        }
        { //::osiris::MainAddonsJob::run
        
            typedef ::osiris::IJob::JobStatus ( ::osiris::MainAddonsJob::*run_function_type )(  ) ;
            typedef ::osiris::IJob::JobStatus ( MainAddonsJob_wrapper::*default_run_function_type )(  ) ;
            
            MainAddonsJob_exposer.def( 
                "run"
                , run_function_type(&::osiris::MainAddonsJob::run)
                , default_run_function_type(&MainAddonsJob_wrapper::default_run) );
        
        }
        { //::osiris::MainAddonsJob::getDetails
        
            typedef ::boost::shared_ptr< osiris::IBackgroundJob::Details > ( ::osiris::MainAddonsJob::*getDetails_function_type )(  ) const;
            typedef ::boost::shared_ptr< osiris::IBackgroundJob::Details > ( MainAddonsJob_wrapper::*default_getDetails_function_type )(  ) const;
            
            MainAddonsJob_exposer.def( 
                "getDetails"
                , getDetails_function_type(&::osiris::MainAddonsJob::getDetails)
                , default_getDetails_function_type(&MainAddonsJob_wrapper::default_getDetails) );
        
        }
        { //::osiris::MainAddonsJob::setAction
        
            typedef void ( *setAction_function_type )( ::osiris::MainAddonsJob &,::osiris::String const & );
            
            MainAddonsJob_exposer.def( 
                "setAction"
                , setAction_function_type( &MainAddonsJob_wrapper::setAction )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("action") ) );
        
        }
        { //::osiris::MainAddonsJob::setExtensionID
        
            typedef void ( *setExtensionID_function_type )( ::osiris::MainAddonsJob &,::osiris::UniqueID const & );
            
            MainAddonsJob_exposer.def( 
                "setExtensionID"
                , setExtensionID_function_type( &MainAddonsJob_wrapper::setExtensionID )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("id") ) );
        
        }
        { //::osiris::MainAddonsJob::setProgressPercentage
        
            typedef void ( *setProgressPercentage_function_type )( ::osiris::MainAddonsJob &,double );
            
            MainAddonsJob_exposer.def( 
                "setProgressPercentage"
                , setProgressPercentage_function_type( &MainAddonsJob_wrapper::setProgressPercentage )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("v") ) );
        
        }
        { //::osiris::MainAddonsJob::setUrl
        
            typedef void ( *setUrl_function_type )( ::osiris::MainAddonsJob &,::osiris::String const & );
            
            MainAddonsJob_exposer.def( 
                "setUrl"
                , setUrl_function_type( &MainAddonsJob_wrapper::setUrl )
                , ( ::boost::python::arg("inst"), ::boost::python::arg("url") ) );
        
        }
        { //::osiris::IBackgroundJob::onProgress
        
            typedef void ( MainAddonsJob_wrapper::*onProgress_function_type )(  ) ;
            
            MainAddonsJob_exposer.def( 
                "onProgress"
                , onProgress_function_type( &MainAddonsJob_wrapper::default_onProgress ) );
        
        }
        { //::osiris::IJob::start
        
            typedef ::osiris::IJob::JobStatus ( ::osiris::IJob::*start_function_type )(  ) ;
            typedef ::osiris::IJob::JobStatus ( MainAddonsJob_wrapper::*default_start_function_type )(  ) ;
            
            MainAddonsJob_exposer.def( 
                "start"
                , start_function_type(&::osiris::IJob::start)
                , default_start_function_type(&MainAddonsJob_wrapper::default_start) );
        
        }
        { //property "action"[fget=::osiris::MainAddonsJob::getAction, fset=::osiris::MainAddonsJob::setAction]
        
            typedef ::osiris::String ( ::osiris::MainAddonsJob::*fget )(  ) const;
            typedef void ( ::osiris::MainAddonsJob::*fset )( ::osiris::String const & ) ;
            
            MainAddonsJob_exposer.add_property( 
                "action"
                , fget( &::osiris::MainAddonsJob::getAction )
                , fset( &::osiris::MainAddonsJob::setAction )
                , "get\\set property, built on top of \"osiris::String osiris::MainAddonsJob::getAction() const [member function]\" and \"void osiris::MainAddonsJob::setAction(osiris::String const & action) [member function]\"" );
        
        }
        { //property "extensionID"[fget=::osiris::MainAddonsJob::getExtensionID, fset=::osiris::MainAddonsJob::setExtensionID]
        
            typedef ::osiris::UniqueID ( ::osiris::MainAddonsJob::*fget )(  ) const;
            typedef void ( ::osiris::MainAddonsJob::*fset )( ::osiris::UniqueID const & ) ;
            
            MainAddonsJob_exposer.add_property( 
                "extensionID"
                , fget( &::osiris::MainAddonsJob::getExtensionID )
                , fset( &::osiris::MainAddonsJob::setExtensionID )
                , "get\\set property, built on top of \"osiris::UniqueID osiris::MainAddonsJob::getExtensionID() const [member function]\" and \"void osiris::MainAddonsJob::setExtensionID(osiris::UniqueID const & id) [member function]\"" );
        
        }
        { //property "url"[fget=::osiris::MainAddonsJob::getUrl, fset=::osiris::MainAddonsJob::setUrl]
        
            typedef ::osiris::String ( ::osiris::MainAddonsJob::*fget )(  ) const;
            typedef void ( ::osiris::MainAddonsJob::*fset )( ::osiris::String const & ) ;
            
            MainAddonsJob_exposer.add_property( 
                "url"
                , fget( &::osiris::MainAddonsJob::getUrl )
                , fset( &::osiris::MainAddonsJob::setUrl )
                , "get\\set property, built on top of \"osiris::String osiris::MainAddonsJob::getUrl() const [member function]\" and \"void osiris::MainAddonsJob::setUrl(osiris::String const & url) [member function]\"" );
        
        }
        { //property "progressPercentage"[fget=::osiris::MainAddonsJob::getProgressPercentage, fset=::osiris::MainAddonsJob::setProgressPercentage]
        
            typedef double ( ::osiris::MainAddonsJob::*fget )(  ) const;
            typedef void ( ::osiris::MainAddonsJob::*fset )( double ) ;
            
            MainAddonsJob_exposer.add_property( 
                "progressPercentage"
                , fget( &::osiris::MainAddonsJob::getProgressPercentage )
                , fset( &::osiris::MainAddonsJob::setProgressPercentage )
                , "get\\set property, built on top of \"double osiris::MainAddonsJob::getProgressPercentage() const [member function]\" and \"void osiris::MainAddonsJob::setProgressPercentage(double v) [member function]\"" );
        
        }
        { //property "details"[fget=::osiris::MainAddonsJob::getDetails]
        
            typedef ::boost::shared_ptr<osiris::IBackgroundJob::Details> ( ::osiris::MainAddonsJob::*fget )(  ) const;
            
            MainAddonsJob_exposer.add_property( 
                "details"
                , fget( &::osiris::MainAddonsJob::getDetails )
                , "get property, built on top of \"boost::shared_ptr<osiris::IBackgroundJob::Details> osiris::MainAddonsJob::getDetails() const [member function]\"" );
        
        }
    }

}
